<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="5/30/2023 2:44:59 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="S8-WHSE-SQL-T01"
  DTS:CreatorName="PSU\jjs7199"
  DTS:DTSID="{69AEF7A8-B4EF-4E36-85BD-2552D1AC87B7}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5685.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="IDR_SF_Notes"
  DTS:PackageType="5"
  DTS:VersionBuild="434"
  DTS:VersionGUID="{59B724D5-66D6-47AD-B554-692D8B019FC1}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[BIADW.BIA_DW]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{5EA2D3AE-367C-411C-A81A-3D3291894F2D}"
      DTS:ObjectName="BIADW.BIA_DW">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=BIADW;User ID=BIA_DW;Provider=OraOLEDB.Oracle.1;Persist Security Info=True;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAR2s4xDsbUE2rNE3TDIFMCgAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAABwwN9ghB1v5+6WXD7jJlFiAAAAAASAAACgAAAAEAAAAOupCCDWu/AyJphyaNHft68wAAAAbtT+5IJKmOKn1HAGNoQuvNQCjv15naadtFnOVpj9e3yQWCuJ4bu/Di12vtEMbUpvFAAAAKjxw8AsQY9LhmUS33wkCdV+LjtH</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DW-SQL.Stage]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{62A80100-15F7-4342-AA10-55E597EC310F}"
      DTS:ObjectName="DW-SQL.Stage">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=.;Initial Catalog=whse_stage;Provider=MSOLEDBSQL.1;Integrated Security=SSPI;Auto Translate=False;Application Name=SSIS-Appointments_Update-{62A80100-15F7-4342-AA10-55E597EC310F}IDW-SQL-local;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[LocalHost.etl]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{F95224C5-A955-4F40-9028-01F22A47175E}"
      DTS:ObjectName="LocalHost.etl">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=.;Initial Catalog=etl;Provider=MSOLEDBSQL;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[LocalHost.IDR]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{88B5920C-6EDE-4B7C-B5ED-6334545933C3}"
      DTS:ObjectName="LocalHost.IDR">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=.;Initial Catalog=IDR;Provider=SQLNCLI11.1;Integrated Security=SSPI;Application Name=SSIS-IDR_SF_Appointments-{88B5920C-6EDE-4B7C-B5ED-6334545933C3}LocalHost.IDR;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[LocalHost.whsestage]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{7C31DB96-1751-4335-80F7-B1B5E936C235}"
      DTS:ObjectName="LocalHost.whsestage">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=.;Initial Catalog=whsestage;Provider=MSOLEDBSQL.1;Integrated Security=SSPI;Auto Translate=False;Application Name=SSIS-Appointments_Update-{7C31DB96-1751-4335-80F7-B1B5E936C235}LocalHost.whsestage;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SMTP Connection Manager]"
      DTS:CreationName="SMTP"
      DTS:DTSID="{57AF754B-2200-4A3A-B11A-543EF4246D8B}"
      DTS:ObjectName="SMTP Connection Manager">
      <DTS:ObjectData>
        <SmtpConnectionManager
          ConnectionString="SmtpServer=smtp.psu.edu;UseWindowsAuthentication=False;EnableSsl=False;"
          ConnectByProxy="False" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[WHSE.local]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{23A9F2E2-40B5-4442-A344-D186176EAB70}"
      DTS:ObjectName="WHSE.local">
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[User::strServer]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=S8-WHSE-SQL-T01;Initial Catalog=institutional_data_repository;Provider=MSOLEDBSQL.1;Integrated Security=SSPI;Auto Translate=False;Application Name=SSIS-Appointments_Update-{23A9F2E2-40B5-4442-A344-D186176EAB70}WHSE.institutional_data_repository;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{88121BE1-110E-4ED8-9348-072A733D6E0E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolder">
      <DTS:VariableValue
        DTS:DataType="8">E:\dat\Starfish\Starfish_Archive\notes</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6850F03E-B69D-4769-B3C9-2148E12B6225}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="(DT_WSTR,4)YEAR(GETDATE()) + &quot;-&quot; + (DT_WSTR,4)MONTH(GETDATE()) + &quot;-&quot; + (DT_WSTR,4)DAY(GETDATE())"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DatePart">
      <DTS:VariableValue
        DTS:DataType="8">2025-3-17</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1B379502-9C57-4E9C-97A4-6862C1EEFF3E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DestinationFolder">
      <DTS:VariableValue
        DTS:DataType="8">E:\dat\starfish\Starfish_Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DAA71905-452F-48DA-900A-698E45EEA220}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Email_id_receiver">
      <DTS:VariableValue
        DTS:DataType="8">L-DWEMAIL@LISTS.PSU.EDU</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{03FCE7A1-8769-4AF2-BD92-B543F9A7CB81}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Email_id_sender">
      <DTS:VariableValue
        DTS:DataType="8">umg-up.biteam.datawarehouse@pennstateoffice365.onmicrosoft.com</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6D28C582-8C4F-47C1-A5D3-AE8F253E17A5}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Error_Dttm">
      <DTS:VariableValue
        DTS:DataType="7">3/17/2025 2:55:47 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0AA419D5-4177-4AA7-AD65-088F5986EDAC}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileExists">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D7D4C1D1-192E-48C4-BB3B-32BA28977778}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="FileExistsFlag">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CEF3D7FA-2A03-4197-8B4D-30D643EB2EC5}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[System::MachineName]+&quot; Job Parm-6017 Starfish no Notes File was received today - &quot;+ @[User::DatePart]+ &quot; !&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileMissingMessage">
      <DTS:VariableValue
        DTS:DataType="8">S8-WHSE-SQL-T01 Job Parm-6017 Starfish no Notes File was received today - 2025-3-17 !</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9736133B-17D2-4B1C-8EBF-2AA72BB9D0A0}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[System::MachineName]+&quot; - Notes files missing - Aborting Import!&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileMissingMsg">
      <DTS:VariableValue
        DTS:DataType="8">S8-WHSE-SQL-T01 - Notes files missing - Aborting Import!</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E15FE20A-0BFC-4E8A-B70B-5C751B23A821}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FEE18895-B8EC-4E52-81ED-27110F2E0C92}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::SourceFolder]+  &quot;\\&quot;+@[User::FileName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FilePath">
      <DTS:VariableValue
        DTS:DataType="8">E:\Dat\starfish\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7B43558D-8D36-4836-9BD9-EC88405C5D8F}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="FileSize">
      <DTS:VariableValue
        DTS:DataType="20">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D090B63C-52CC-49C4-94AB-B45C1A42E11C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FilesMovedCount">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{528C0181-074C-497C-BCE6-C2E12AE1E88C}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[System::MachineName]+  &quot; Number of files moved to Archive : &quot; + (DT_WSTR, 3) @[User::FilesMovedCount]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FilesMovedMsg">
      <DTS:VariableValue
        DTS:DataType="8">S8-WHSE-SQL-T01 Number of files moved to Archive : 0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F5FFDFD7-787D-40CA-96E0-1F203E344773}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileToArchive">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E0B5ED84-339F-4E66-A3CC-6A4553A0CF80}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileToSearch">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C1A058BC-4F7B-41F1-932A-75E5DDA2C26A}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="IsFound">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9F9180AA-D7DD-4364-BC90-EEF5F0B2B7DD}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="NoFilesMoved">
      <DTS:VariableValue
        DTS:DataType="8">No Files were moved tp Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6F3DC6D3-6E78-405F-9BC0-EFB3F292E557}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="NoMatchRowCount">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A838028D-0F23-4FD1-952E-028876E74451}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RowCount">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E4714430-AC5B-4BDF-9ACC-8855CFCD0CE9}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RowCount_Match">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{54F52CE7-D6AE-41AD-BCE0-CE0C4DB1142C}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RowCount_Not_Match">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{254E381B-35FB-4807-AC24-195209CA2E11}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RowsDeleted">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8F4A28BC-E989-4191-AFC0-A872EE6366A6}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RowsInserted">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{12EB0C19-C72C-4C99-BDC6-5249322559FE}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RowsUpdated">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F9031C34-ABBA-4AF9-97E0-1ABE97A2E04E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceFolder">
      <DTS:VariableValue
        DTS:DataType="8">E:\Dat\starfish</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EEB394A6-5FC5-4138-A03A-85662523145B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strCaseSensitive">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{64C5F64B-EAA1-44F6-AD08-1F93D94547E0}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[System::MachineName]==&quot;S8-WHSE-SQL-T01&quot;?&quot;S8-WHSE-SQL-T01&quot;:&#xA;@[System::MachineName]==&quot;S8-WHSE-SQL-A01&quot;?&quot;s8-whse-lst-A01&quot;:&#xA;@[System::MachineName]==&quot;S8-WHSE-SQL-A02&quot;?&quot;s8-whse-lst-A01&quot;:&#xA;@[System::MachineName]==&quot;S8-WHSE-SQL-P01&quot;?&quot;S8-WHSE-LST-P01&quot;:&#xA;@[System::MachineName]==&quot;S8-WHSE-SQL-F01&quot;?&quot;S8-WHSE-LST-P01&quot;: &quot;COUND NOT DETERMINE SERVER&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strServer">
      <DTS:VariableValue
        DTS:DataType="8">S8-WHSE-SQL-T01</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{10D8E949-3454-4483-A97A-70E0D3BB22AF}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::ArchiveFolder] +&quot;\\&quot;+ Replace(Replace(Replace(Replace( @[User::FileName],&quot;.&quot;,&quot;_&quot;+Substring((DT_WSTR,50) GETDATE(),1,19)+&quot;.&quot;),&quot;-&quot;,&quot;&quot;),&quot;:&quot;,&quot;&quot;),&quot; &quot;,&quot;_&quot;)"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarArchiveFullPath">
      <DTS:VariableValue
        DTS:DataType="8">E:\dat\Starfish\Starfish_Archive\notes\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F80F306A-5D54-4A6A-9AC1-98EECA0D3CC2}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::SourceFolder]+&quot;\\&quot;+ @[User::FileName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarSourceFullPath">
      <DTS:VariableValue
        DTS:DataType="8">E:\Dat\starfish\</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Check for File"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{0AF777F7-B6BD-4355-B152-A5A29BC76888}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Check for File">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachFileEnumerator"
        DTS:DTSID="{FC568485-F24E-4042-BE40-71DFE8C61743}"
        DTS:ObjectName="{FC568485-F24E-4042-BE40-71DFE8C61743}">
        <DTS:PropertyExpression
          DTS:Name="Directory">@[User::SourceFolder]</DTS:PropertyExpression>
        <DTS:ObjectData>
          <ForEachFileEnumeratorProperties>
            <FEFEProperty
              Folder="E:\Dat\starfish" />
            <FEFEProperty
              FileSpec="appo*.csv" />
            <FEFEProperty
              FileNameRetrievalType="1" />
            <FEFEProperty
              Recurse="0" />
          </ForEachFileEnumeratorProperties>
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Check for File\Get File Size"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{FDF8859C-46D9-4E2B-BF21-4D0D8FD72854}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get File Size"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_a2d83dd7284c4e118f0128f879486c14"
              VSTAMajorVersion="16"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::FilePath"
              ReadWriteVariables="User::FileSize">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_a2d83dd7284c4e118f0128f879486c14")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_a2d83dd7284c4e118f0128f879486c14")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="ST_a2d83dd7284c4e118f0128f879486c14.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{551c4e0e-3cbd-4c29-9906-2285864e6af5}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_a2d83dd7284c4e118f0128f879486c14</RootNamespace>
    <AssemblyName>ST_a2d83dd7284c4e118f0128f879486c14</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex=""></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
#endregion

namespace ST_a2d83dd7284c4e118f0128f879486c14
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
        {// Specify the file path
            string filePath = Dts.Variables["User::FilePath"].Value.ToString();

            // Initialize file size variable
            long fileSize = 0;

            // Check if the file exists and get the file size
            if (File.Exists(filePath))
            {
                FileInfo fileInfo = new FileInfo(filePath);
                fileSize = fileInfo.Length; // File size in bytes
            }
            else
            {
                // Handle the case where the file does not exist
                Dts.Events.FireError(0, "Script Task", "File not found: " + filePath, "", 0);
            }

            // Store the file size in the variable
            Dts.Variables["User::FileSize"].Value = fileSize;

            // Indicate success
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_a2d83dd7284c4e118f0128f879486c14</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_a2d83dd7284c4e118f0128f879486c14</msb:DisplayName>
    <msb:ProjectId>{A9EC14CC-608C-4948-8E4E-65E04D296845}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_a2d83dd7284c4e118f0128f879486c14.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a2d83dd7284c4e118f0128f879486c14.Properties.Settings.get_Default():ST_a2d83dd7284c4e118f0128f879486c14.Properties.Sett" +
    "ings")]

namespace ST_a2d83dd7284c4e118f0128f879486c14.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a2d83dd7284c4e118f0128f879486c14.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a2d83dd7284c4e118f0128f879486c14.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a2d83dd7284c4e118f0128f879486c14.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_a2d83dd7284c4e118f0128f879486c14.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_a2d83dd7284c4e118f0128f879486c14.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_a2d83dd7284c4e118f0128f879486c14.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAD9c7GYAAAAAAAAAAOAAIiALATAAABAAAAAIAAAAAAAAGi8A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAMguAABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAIA8AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAD8
LgAAAAAAAEgAAAACAAUAUCEAAMAMAAABAAAAAAAAABAuAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwBgCOAAAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAAoKFmoLBigVAAAKLA4GcxYAAApvFwAACgsrKAIoEAAACm8YAAAKFnIfAABwcjcAAHAG
KBkAAApyWQAAcBZvGgAACiYCKBAAAApvEQAACnJbAABwbxIAAAoHjB8AAAFvGwAACgIoEAAAChZv
HAAACioeAigdAAAKKh4CKB4AAAoqrn4BAAAELR5yeQAAcNADAAACKB8AAApvIAAACnMhAAAKgAEA
AAR+AQAABCoafgIAAAQqHgKAAgAABCoafgMAAAQqHgIoIgAACioucwgAAAaAAwAABCpCU0pCAQAB
AAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAAEBAAAI34AAHAEAADIBQAAI1N0cmluZ3MAAAAA
OAoAAOwAAAAjVVMAJAsAABAAAAAjR1VJRAAAADQLAACMAQAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJ
AwAAAPoBMwAWAAABAAAAIgAAAAUAAAAGAAAACQAAAAEAAAAiAAAAAgAAABAAAAABAAAAAgAAAAMA
AAAEAAAAAQAAAAQAAAABAAAAAQAAAAAAnwMBAAAAAAAGADoClgQGAMkClgQGAIYBgwQPAAoFAAAG
ALMBHQQGAB0CHQQGAP4BHQQGALACHQQGAFoCHQQGAHMCHQQGAMoBHQQGAOUBAQMKAI4CTgMKAAUB
TgMGANcD0AMGAGkBgwQGAJYF0AMGAEgEtgQGADgECAQOADkBiQMOAJoBiQMOACEB8wMGAE4BlgQK
AHcDTgMSAEwFsAASAH4AsAAGAKsANAAGAC8ENAAKAFgETgMGAB0D0AMGACUA0AMGANAA0AMGAIcA
0AMGALwFHQQAAAAAKwAAAAAAAQABAAEAEADoAwEAOQABAAEAAAAQAL0EGQVFAAEAAwAAARAAVgUZ
BVkAAwAHAAMBAABvBQAAPQAEAAoAEQDcA40AEQD1AJEAEQBuAJUABgZdAJkAVoBfBZwAVoDVAJwA
UCAAAAAAhgDuAwYAAQDqIAAAAACGGHYEBgABAPIgAAAAAIMYdgQGAAEA+iAAAAAAkwhEBKAAAQAm
IQAAAACTCN0ApQABAC0hAAAAAJMI6QCqAAEANSEAAAAAlgidBbAAAgA8IQAAAACGGHYEBgACAEQh
AAAAAJEYfAS1AAIAAAABAPsCCQB2BAEAEQB2BAYAGQB2BAoAKQB2BBAAMQB2BBAAOQB2BBAAQQB2
BBAASQB2BBAAUQB2BBAAWQB2BBAAYQB2BBAAaQB2BAYAgQB2BAYAqQB2BBUAuQB2BAYAcQBnBSAA
wQBIBSUAyQDHAyoA0QDnAjAAiQAbAzQA2QCIBTgA4QB2BBAA4QAkAz0AwQB9BUEA8QCPBUYA6QBs
BEwA0QDxAlUAwQCpBQEAcQB2BAYAiQB2BAYAAQGZAFoAAQG4BWMAkQB2BGkAsQB2BAYACAAUAIMA
CAAYAIgAKQBzAPAALgALAMgALgATANEALgAbAPAALgAjAPkALgArACIBLgAzACIBLgA7ACIBLgBD
APkALgBLACgBLgBTACIBLgBbAD8BQwBjAIgASQBzAPAAYQB7AIgAYwBrAIgAGwADAAEABAADAAAA
SAS5AAAA/QC+AAAAoQXDAAIABAADAAIABQAFAAEABgAFAAIABwAHAASAAAABAAAARCM/XQAAAAAA
AAEAAAAEAAAAAAAAAAAAAABxAGUAAAAAABAAAAAAAAAAAAAAAHoALwMAAAAABAAAAAAAAAAAAAAA
cQDQAwAAAAAQAAAAAAAAAAAAAAB6AD4AAAAAAAAAAAABAAAAxwQAAAUAAgAAAABTVF9hMmQ4M2Rk
NzI4NGM0ZTExOGYwMTI4Zjg3OTQ4NmMxNABJbnQ2NAA8TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9z
b2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AbXNjb3JsaWIAZGVmYXVsdEluc3RhbmNl
AFZhcmlhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEZpbGUATWljcm9z
b2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1
bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNh
dGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0
dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUA
RWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlU
cmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmln
dXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9u
UmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29w
eXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJs
eUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVl
AHNldF9WYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAGdldF9M
ZW5ndGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1v
ZGVsAFNUX2EyZDgzZGQ3Mjg0YzRlMTE4ZjAxMjhmODc5NDg2YzE0LmRsbABnZXRfSXRlbQBTeXN0
ZW0ARW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3Rl
bS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEZpbGVJbmZvAEN1bHR1cmVJbmZvAGdl
dF9SZXNvdXJjZU1hbmFnZXIARXZlbnRzT2JqZWN0V3JhcHBlcgBGaXJlRXJyb3IALmN0b3IALmNj
dG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5
c3RlbS5SZXNvdXJjZXMAU1RfYTJkODNkZDcyODRjNGUxMThmMDEyOGY4Nzk0ODZjMTQuUHJvcGVy
dGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUX2EyZDgzZGQ3Mjg0YzRl
MTE4ZjAxMjhmODc5NDg2YzE0LlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBTZXR0aW5ncwBTdWNj
ZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBnZXRfRXZlbnRzAEV4aXN0cwBDb25jYXQAT2JqZWN0
AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0AGdldF9Bc3NlbWJseQAAAAAAHVUAcwBlAHIAOgA6
AEYAaQBsAGUAUABhAHQAaAAAF1MAYwByAGkAcAB0ACAAVABhAHMAawAAIUYAaQBsAGUAIABuAG8A
dAAgAGYAbwB1AG4AZAA6ACAAAAEAHVUAcwBlAHIAOgA6AEYAaQBsAGUAUwBpAHoAZQAAcVMAVABf
AGEAMgBkADgAMwBkAGQANwAyADgANABjADQAZQAxADEAOABmADAAMQAyADgAZgA4ADcAOQA0ADgA
NgBjADEANAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAO04COCE
7f9OpIZExg3XORMABCABAQgDIAABBSABARERBCABAQ4FIAEBEVEEBwIOCgQgABJhBCAAEmUFIAES
aRwDIAAcAyAADgQAAQIOAyAACgQgABJ1BQACDg4OCCAFAggODg4IBCABARwIAAESgIERgIUFIAAS
gIkHIAIBDhKAiQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJJAwYSTQMGEhACBggDBhEU
BAAAEkkEAAASTQUAAQESTQQAABIQAwAAAQQIABJJBAgAEk0ECAASEAgBAAgAAAAAAB4BAAEAVAIW
V3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfYTJkODNkZDcyODRjNGUxMThm
MDEyOGY4Nzk0ODZjMTQAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyNAAASQEAGi5ORVRGcmFt
ZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29y
ayA0LjcAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIs
IG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9r
ZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIA
AAAAAAAAAAAAAFBBRFBBRFC0AAAA8C4AAAAAAAAAAAAACi8AAAAgAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAPwuAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQA/XUQjAAABAD9dRCM/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
AAAAAFMAVABfAGEAMgBkADgAMwBkAGQANwAyADgANABjADQAZQAxADEAOABmADAAMQAyADgAZgA4
ADcAOQA0ADgANgBjADEANAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAA
LgA5ADAAMgA4AC4AMgAzADgANwAxAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAA
AFMAVABfAGEAMgBkADgAMwBkAGQANwAyADgANABjADQAZQAxADEAOABmADAAMQAyADgAZgA4ADcA
OQA0ADgANgBjADEANAAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0
AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgA0AAAAKgABAAEATABlAGcAYQBsAFQA
cgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu
AGEAbQBlAAAAUwBUAF8AYQAyAGQAOAAzAGQAZAA3ADIAOAA0AGMANABlADEAMQA4AGYAMAAxADIA
OABmADgANwA5ADQAOAA2AGMAMQA0AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAVABfAGEAMgBkADgAMwBkAGQANwAyADgANABjADQAZQAxADEAOABmADAAMQAyADgA
ZgA4ADcAOQA0ADgANgBjADEANAAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4AOQAwADIAOAAuADIAMwA4ADcAMQAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAA
VgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOQAwADIAOAAuADIAMwA4ADcAMQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAAAcPwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Check for File\Is Notes*-csv Present"
          DTS:CreationName="Microsoft.ExpressionTask"
          DTS:Description="Expression Task"
          DTS:DTSID="{40BA2582-82DD-4B20-B83E-1B3DE1DED4D1}"
          DTS:ExecutableType="Microsoft.ExpressionTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Is Notes*-csv Present"
          DTS:TaskContact="Expression Task;Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ExpressionTask
              Expression="@[User::IsFound] =  @[User::FileName]  == @[User::FileToSearch] ? TRUE : FALSE" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Check for File.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{7DCA624A-D225-4651-A764-2B50FF430840}"
          DTS:From="Package\Check for File\Is Notes*-csv Present"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Check for File\Get File Size" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{5803FB9F-A854-47E1-8506-48ED6350ED00}"
          DTS:ObjectName="{5803FB9F-A854-47E1-8506-48ED6350ED00}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::FileName" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Error Mail"
      DTS:CreationName="Microsoft.SendMailTask"
      DTS:Description="Send Mail Task"
      DTS:DTSID="{5E17C5C0-D8B5-46CB-ACBF-63FF9B621D73}"
      DTS:ExecutableType="Microsoft.SendMailTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Error Mail"
      DTS:ThreadHint="2">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:PropertyExpression
        DTS:Name="FromLine">@[User::Email_id_sender]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="MessageSource">"Failure -  Starfish ETL Importer Failed " +  @[System::MachineName] + " !"</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ToLine">@[User::Email_id_receiver]</DTS:PropertyExpression>
      <DTS:EventHandlers>
        <DTS:EventHandler
          DTS:refId="Package\Error Mail.EventHandlers[OnPreValidate]"
          DTS:CreationName="OnPreValidate"
          DTS:DTSID="{CDABB301-6DFB-4FEF-B098-2B1A0034F487}"
          DTS:EventID="0"
          DTS:EventName="OnPreValidate"
          DTS:LocaleID="-1">
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:Description="The propagate property of the event"
              DTS:DTSID="{987FCD17-8C65-4D60-81FB-19EF94D25ED7}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="System"
              DTS:ObjectName="Propagate">
              <DTS:VariableValue
                DTS:DataType="11">-1</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:Executables />
        </DTS:EventHandler>
      </DTS:EventHandlers>
      <DTS:ObjectData>
        <SendMailTask:SendMailTaskData
          SendMailTask:SMTPServer="{57AF754B-2200-4A3A-B11A-543EF4246D8B}"
          SendMailTask:From="umg-up.biteam.datawarehouse@pennstateoffice365.onmicrosoft.com"
          SendMailTask:To="L-DWEMAIL@LISTS.PSU.EDU"
          SendMailTask:Subject="Failure Starfish ETL Failed ON"
          SendMailTask:Priority="High"
          SendMailTask:MessageSource="Failure -  Starfish ETL Importer Failed S8-WHSE-SQL-T01 !" xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Files is missing Mail"
      DTS:CreationName="Microsoft.SendMailTask"
      DTS:Description="Send Mail Task"
      DTS:DTSID="{9D53B7B8-0CE0-4EC6-878B-A863FE6CDACB}"
      DTS:ExecutableType="Microsoft.SendMailTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Files is missing Mail"
      DTS:TaskContact="Send Mail Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:PropertyExpression
        DTS:Name="FromLine">@[User::Email_id_sender]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="MessageSource">@[User::FileMissingMessage]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="Subject">@[User::FileMissingMsg]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ToLine">@[User::Email_id_receiver]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <SendMailTask:SendMailTaskData
          SendMailTask:SMTPServer="{57AF754B-2200-4A3A-B11A-543EF4246D8B}"
          SendMailTask:From="umg-up.biteam.datawarehouse@pennstateoffice365.onmicrosoft.com"
          SendMailTask:To="L-DWEMAIL@LISTS.PSU.EDU"
          SendMailTask:CC="sarakaj@psu.edu"
          SendMailTask:Subject="S8-WHSE-SQL-T01 - Notes files missing - Aborting Import!"
          SendMailTask:MessageSource="S8-WHSE-SQL-T01 Job Parm-6017 Starfish no Notes File was received today - 2025-3-17 !" xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Loop Trought All Appointment Files"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{7AFE41EC-6491-498E-8564-7F94EBD6ADFC}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Loop Trought All Appointment Files">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachFileEnumerator"
        DTS:DTSID="{1714C7BD-973E-48A0-A71A-41B7A6B4D4C5}"
        DTS:ObjectName="{D1AD99D4-524B-49F5-9E7F-301E545F0144}">
        <DTS:ObjectData>
          <ForEachFileEnumeratorProperties>
            <FEFEProperty
              Folder="E:\dat\Starfish" />
            <FEFEProperty
              FileSpec="notes*_*.csv" />
            <FEFEProperty
              FileNameRetrievalType="1" />
            <FEFEProperty
              Recurse="0" />
          </ForEachFileEnumeratorProperties>
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{68F10D2C-1FFC-4288-ADAD-B79B77CE968A}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Importing Notes to Stage"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <pipeline
              autoAdjustBufferSize="true"
              BLOBTempStoragePath="F:\Dat\starfish\Logs"
              bufferTempStoragePath=""
              defaultBufferMaxRows="1000"
              defaultBufferSize="104857600"
              version="1">
              <components>
                <component
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Adding New Columns"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Inputs[Derived Column Input].Columns[note_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="note_ext_id"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[note_ext_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Inputs[Derived Column Input].Columns[author_integration_id]"
                          cachedDataType="i4"
                          cachedName="author_integration_id"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_integration_id]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[INSERT_DT]"
                          dataType="date"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[INSERT_DT]"
                          name="INSERT_DT"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_DATE)[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_DATE)GETDATE()</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[FileName]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[FileName]"
                          name="FileName"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_STR,50,1252)@[User::FileName]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_STR,50,1252)@[User::FileName]</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[Integration_ID_SOURCE]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="72"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[Integration_ID_SOURCE]"
                          name="Integration_ID_SOURCE"
                          truncationRowDisposition="IgnoreFailure">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_WSTR,50)(#{Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_integration_id]}) + (DT_WSTR,22)(#{Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[note_ext_id]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_WSTR,50)(author_integration_id) + (DT_WSTR,22)(note_ext_id)</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[File_Created_On]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="15"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[File_Created_On]"
                          name="File_Created_On"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_STR,15,1252)[RIGHT](@[User::FileName],[FINDSTRING]([REVERSE](@[User::FileName]),"_",1) - 1)</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_STR,15,1252)RIGHT(@[User::FileName],FINDSTRING(REVERSE(@[User::FileName]),"_",1) - 1)</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[FileSize]"
                          dataType="i4"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[FileSize]"
                          name="FileSize"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_I4)@[User::FileSize]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_I4)@[User::FileSize]</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[ETL_Source]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="8"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[ETL_Source]"
                          name="ETL_Source"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_WSTR,8)"STARFISH"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_WSTR,8)"STARFISH"</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="DB Insert into idr-sf_notes"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[idr].[sf_notes]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">CHECK_CONSTRAINTS,ROWS_PER_BATCH = 1000</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[DW-SQL.Stage]"
                      connectionManagerRefId="Package.ConnectionManagers[DW-SQL.Stage]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[note_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="note_ext_id"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[note_ext_id]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[note_ext_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[cms_note_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="100"
                          cachedName="cms_note_ext_id"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[cms_note_ext_id]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[cms_note_ext_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[date]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="date"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[date]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[date]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[note_type]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="note_type"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[note_type]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[note_type]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[subject]"
                          cachedDataType="wstr"
                          cachedLength="1000"
                          cachedName="subject"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[subject]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[subject]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[author_integration_id]"
                          cachedDataType="i4"
                          cachedName="author_integration_id"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[author_integration_id]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_integration_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[author_institutional_email]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_institutional_email"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[author_institutional_email]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_institutional_email]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[student_integration_id]"
                          cachedDataType="i4"
                          cachedName="student_integration_id"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[student_integration_id]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_integration_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[INSERT_DT]"
                          cachedDataType="date"
                          cachedName="INSERT_DT"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[INSERT_DT]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[INSERT_DT]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[ETL_Source]"
                          cachedDataType="wstr"
                          cachedLength="8"
                          cachedName="ETL_Source"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[ETL_SOURCE]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[ETL_Source]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[New_Hash]"
                          cachedDataType="wstr"
                          cachedLength="250"
                          cachedName="New_Hash"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[Hash_DW]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Outputs[Output 0].Columns[New_Hash]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[Integration_ID_SOURCE]"
                          cachedDataType="wstr"
                          cachedLength="72"
                          cachedName="Integration_ID_SOURCE"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[note_integration_id]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[Integration_ID_SOURCE]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[File_Created_On]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="15"
                          cachedName="File_Created_On"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[FileCreated_On]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[File_Created_On]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[FileName]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="50"
                          cachedName="FileName"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[FileImported]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[FileName]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[FileSize]"
                          cachedDataType="i4"
                          cachedName="FileSize"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[FileSize]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output].Columns[FileSize]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[body]"
                          cachedDataType="wstr"
                          cachedLength="4000"
                          cachedName="body"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[body]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[body]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[author_userid]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_userid"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[author_userid]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_userid]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[author_first_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_first_name"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[author_first_name]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_first_name]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[author_last_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_last_name"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[author_last_name]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_last_name]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[student_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_id"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[student_id]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[student_first_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_first_name"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[student_first_name]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_first_name]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[student_last_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_last_name"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[student_last_name]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_last_name]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[tracking_item_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="tracking_item_ext_id"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[tracking_item_ext_id]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[tracking_item_ext_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[tracking_rule_name]"
                          cachedDataType="i4"
                          cachedName="tracking_rule_name"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[tracking_rule_name]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[tracking_rule_name]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[appointment_item_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="appointment_item_ext_id"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[appointment_item_ext_id]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[appointment_item_ext_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].Columns[student_userid]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_userid"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[student_userid]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_userid]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[note_ext_id]"
                          dataType="wstr"
                          length="50"
                          name="note_ext_id" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[cms_note_ext_id]"
                          dataType="wstr"
                          length="100"
                          name="cms_note_ext_id" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[date]"
                          dataType="wstr"
                          length="50"
                          name="date" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[note_type]"
                          dataType="wstr"
                          length="50"
                          name="note_type" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[subject]"
                          dataType="wstr"
                          length="1000"
                          name="subject" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[body]"
                          dataType="wstr"
                          length="4000"
                          name="body" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[author_userid]"
                          dataType="wstr"
                          length="50"
                          name="author_userid" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[author_integration_id]"
                          dataType="i4"
                          name="author_integration_id" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[author_first_name]"
                          dataType="wstr"
                          length="50"
                          name="author_first_name" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[author_last_name]"
                          dataType="wstr"
                          length="50"
                          name="author_last_name" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[author_institutional_email]"
                          dataType="wstr"
                          length="150"
                          name="author_institutional_email" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[student_integration_id]"
                          dataType="i4"
                          name="student_integration_id" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[student_userid]"
                          dataType="wstr"
                          length="50"
                          name="student_userid" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[student_id]"
                          dataType="i4"
                          name="student_id" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[student_first_name]"
                          dataType="wstr"
                          length="50"
                          name="student_first_name" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[student_last_name]"
                          dataType="wstr"
                          length="50"
                          name="student_last_name" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[tracking_item_ext_id]"
                          dataType="wstr"
                          length="50"
                          name="tracking_item_ext_id" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[tracking_rule_name]"
                          dataType="wstr"
                          length="500"
                          name="tracking_rule_name" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[appointment_item_ext_id]"
                          dataType="wstr"
                          length="50"
                          name="appointment_item_ext_id" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[note_integration_id]"
                          dataType="wstr"
                          length="72"
                          name="note_integration_id" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[DELETE_FLG]"
                          dataType="wstr"
                          length="1"
                          name="DELETE_FLG" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[INSERT_DT]"
                          dataType="dbTimeStamp"
                          name="INSERT_DT" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[UPDATE_DT]"
                          dataType="dbTimeStamp"
                          name="UPDATE_DT" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[ETL_SOURCE]"
                          dataType="wstr"
                          length="15"
                          name="ETL_SOURCE" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[Hash_DW]"
                          dataType="wstr"
                          length="255"
                          name="Hash_DW" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[FileImported]"
                          codePage="1252"
                          dataType="str"
                          length="100"
                          name="FileImported" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[FileCreated_On]"
                          codePage="1252"
                          dataType="str"
                          length="25"
                          name="FileCreated_On" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input].ExternalColumns[FileSize]"
                          dataType="i4"
                          name="FileSize" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="Get Single Row"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset"></property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">SELECT 1 AS DUMMY</property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">2</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[LocalHost.etl]"
                      connectionManagerRefId="Package.ConnectionManagers[LocalHost.etl]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Output]"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Output].Columns[DUMMY]"
                          dataType="i4"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Output].ExternalColumns[DUMMY]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Output].Columns[DUMMY]"
                          name="DUMMY"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Output].ExternalColumns[DUMMY]"
                          dataType="i4"
                          name="DUMMY" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Error Output].Columns[DUMMY]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Error Output].Columns[DUMMY]"
                          name="DUMMY" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="New Parse Error Columns"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Output].Columns[Created_Dttm]"
                          dataType="date"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Output].Columns[Created_Dttm]"
                          name="Created_Dttm"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">@[User::Error_Dttm]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">@[User::Error_Dttm]</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Output].Columns[TaskName]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="32"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Output].Columns[TaskName]"
                          name="TaskName"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_STR,32,1252)@[System::TaskName]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_STR,32,1252)@[System::TaskName]</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="Push errors to starfish_ETL_Parse_Errors"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[starfish].[starfish_ETL_Parse_Errors]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">true</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[DW-SQL.Stage]"
                      connectionManagerRefId="Package.ConnectionManagers[DW-SQL.Stage]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].Columns[Created_Dttm]"
                          cachedDataType="date"
                          cachedName="Created_Dttm"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Created_Dttm]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Output].Columns[Created_Dttm]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].Columns[TaskName]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="32"
                          cachedName="TaskName"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Task_Name]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Output].Columns[TaskName]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].Columns[Failed_Line_Text]"
                          cachedDataType="wstr"
                          cachedLength="4000"
                          cachedName="Failed_Line_Text"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Source_Line_Text]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[Failed_Line_Text]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].Columns[Message]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="5000"
                          cachedName="Message"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Error_Message]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[Message]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].Columns[ErrorColumn]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="255"
                          cachedName="ErrorColumn"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Target_Field_Name]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[ErrorColumn]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].Columns[File_Name]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="255"
                          cachedName="File_Name"
                          externalMetadataColumnId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Source_File]"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[File_Name]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Error_Seq]"
                          dataType="i8"
                          name="Error_Seq" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Task_Name]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          name="Task_Name" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Control_ID]"
                          dataType="i4"
                          name="Parse_Control_ID" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Source_File]"
                          codePage="1252"
                          dataType="str"
                          length="1000"
                          name="Parse_Source_File" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Source_Line_Text]"
                          dataType="wstr"
                          length="4000"
                          name="Parse_Source_Line_Text" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Source_Line_Offset]"
                          dataType="i4"
                          name="Parse_Source_Line_Offset" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Target_Field_Number]"
                          dataType="i4"
                          name="Target_Field_Number" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Target_Field_Name]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          name="Target_Field_Name" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Target_Field_DataType]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          name="Target_Field_DataType" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Target_Field_Nullable]"
                          codePage="1252"
                          dataType="str"
                          length="20"
                          name="Target_Field_Nullable" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Field_Text]"
                          dataType="wstr"
                          length="4000"
                          name="Parse_Field_Text" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_PassFail_Result]"
                          codePage="1252"
                          dataType="str"
                          length="20"
                          name="Parse_PassFail_Result" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Truncation_Error]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          name="Parse_Truncation_Error" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Nullability_Error]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          name="Parse_Nullability_Error" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_DataType_Error]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          name="Parse_DataType_Error" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_FieldCount_Error]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          name="Parse_FieldCount_Error" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Format_Error]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          name="Parse_Format_Error" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Other_Error]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          name="Parse_Other_Error" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Parse_Error_Message]"
                          codePage="1252"
                          dataType="text"
                          name="Parse_Error_Message" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Created_Dttm]"
                          dataType="dbTimeStamp"
                          name="Created_Dttm" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Lastupd_Dttm]"
                          dataType="dbTimeStamp"
                          name="Lastupd_Dttm" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Batch_Sid]"
                          dataType="i4"
                          name="Batch_Sid" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Delete_Flag]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          name="Delete_Flag" />
                        <externalMetadataColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input].ExternalColumns[Src_Sys_Id]"
                          codePage="1252"
                          dataType="str"
                          length="20"
                          name="Src_Sys_Id" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Row Count"
                  componentClassID="Microsoft.RowCount"
                  contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                  name="Row Count">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the variable to hold the row count."
                      name="VariableName">User::RowCount</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Row Count.Inputs[Row Count Input 1]"
                      hasSideEffects="true"
                      name="Row Count Input 1">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Row Count.Outputs[Row Count Output 1]"
                      name="Row Count Output 1"
                      synchronousInputId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Row Count.Inputs[Row Count Input 1]">
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;11"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="SafeParse Flat File notes*"
                  version="13">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_6d69f28d6f704f998cd82fa2b2d3f760.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{9F9EFE2F-CF8A-4C6C-9396-51399A9FC7FB}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_6d69f28d6f704f998cd82fa2b2d3f760</RootNamespace>
    <AssemblyName>SC_0E8B4E4774024C04A3081ADD15F981F7</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>x64</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.VisualBasic" />
    <Reference Include="Microsoft.VisualBasic.Compatibility" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[
#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using Microsoft.VisualBasic.FileIO;
using System.Reflection;
using System.Diagnostics;
using Microsoft.SqlServer.Dts.Pipeline;
using System.Globalization;
#endregion


[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    //Variables to hold values of parameters passed in through other SSIS pipeline components:
    private string fileLocation = "";                    //path to file
    private string fileName = "";                        //Mandatory: must contain the name of a file in folder pointed to by fileLocation
    private string fileFullPath = "";                    //Contains the full path to the input file (i.e. location\name)
    private string fileNameOutputColumn = "";            //Name of the output column expected to receive the file name (MUST BE AT AND OF RECORDSET!!!)
    private string recordTextOutputColumn = "";          //Name of the output column expected to receive the text of the input line (MUST BE AT AND OF RECORDSET!!!)
    private int headerLineCount = 1;                     //If > 0, the number of input lines to skip before reading data
    private int columnHeaderLine = 1;                    //If > 0, the input line where column headings are expected (first line = 1)
    private string columnHeaderList = "";                //If non-empty, overrides columnHeaderLine with comma-separated list of column headings
    private int maxLinesToProcess = -1;                  //If > -1, the number of data lines to process (does not count header lines)
    private int maxErrorsToIgnore = 100;                 //If > -1, the number errors to encounter before throwing an exception
    private int maxEventsToLog = 100;                    //If > -1, the number of parse errors to log (allows for more errors to be ignored, without logging every one)
    private string parseLogLevel = "E";                  //If E: Errors only.  A: All parse events (warning, can result in LARGE log tables).
    private string allowExtraColumnsYN = "Y";            //If Y, columns not in the output recordset will be ignored
    private string allowMissingColumnsYN = "Y";          //If Y, columns not in the input recordset will be output as NULL
    private string failOnExtraColumnYN = "N";            //If Y, and allowExtraColumnsYN = "N", script will throw an exception instead of skipping the file
    private string failOnMissingColumnYN = "N";          //If Y, and allowMissingColumnsYN = "N", script will throw an exception instead of skipping the file
    private string failOnMissingMandatoryColumnInHeaderYN = "N"; //If Y, and allowMissingColumnsYN = "Y" but a column in mandatoryColumns is missing in the header, script will throw an exception instead of skipping the file
    private string failOnMissingMandatoryColumnInLineYN = "N"; //If Y, and allowMissingColumnsYN = "Y" but a column in mandatoryColumns is missing in an input line, script will throw an exception instead of skipping the file
    private string columnNamesCaseSensitive = "Y";       //If Y, column names are case sensitive
    private string truncateStringValuesYN = "Y";         //If Y, columns with length > output field will be truncated
    private string stripUnicodeFromNonUnicodeYN = "N";   //If Y, strings with Unicode characters destined for non-Unicode columns will have those characters stripped from the string.
    private string convertThreeCharTzsToOffsetYN = "N";    //If Y, date values with "EST,EDT,PST,PDT,etc." will be converted to offset from GMT 
    private string fixDateValuesYN = "Y";                //If Y, unparseable dates and dates with Year < earliestAllowableYear will be set to NULL
    private int earliestAllowableYear = 0;               //if fixDateValuesYN == "Y" then dates with earlier Years will be set to NULL (NOTE: For SQL Server tables with DATETIME columns this should be set to 1753. DATETIME2 columns can be as early as CE 1)
    private string allowableDateFormats = "";            //A comma-separated set of date formats (compatible with .Net DateTime class's "ParseExact" function.  Use backslas-style escapes for embedded commas
    private string convertToTimeZone = "";               //The name of the timezone to convert dates with TZ offets to when a DT_DATE or DT_DATETIME is the target field.
    private string workdayIDColumn = "";                 //Contains the name of the column in the source file that has the Workday ID
    private string lookupValueColumn = "";               //Contains the name of the column in the source file that will provide lookup information
    private string additionalDataColumn = "";            //Contains the name of the column in the source file that provides any additional information
    private string notNullColumns = "";                  //A comma-separated set of column names that are considered a parse error if NULL (i.e. empty string in input file)
    private string mandatoryColumns = "";                //A comma-separated set of column names that MUST be in the input file.  If all are not found, parsing will not continue.
    private string nonTruncateableColumns = "";          //A comma-separated set of column names that MAY NOT be truncated.  Ignored if truncateStringValuesYN = "N" (not needed because all columns would be considered non-truncateable).
    private string columnRegexPatterns = "";             //A set of column names and associated regex patterns.  Format is colname:pattern;  Use backslash-style escapes for embedded : and ;
                                                         //If the value in the input file does NOT match the pattern for a column, it is considered an error
    private Dictionary<string, string> tz3ToOffset = new Dictionary<string, string>(); //A hard-coded lookup from three-character timezoned to their GMT offsets (e.g. EST -> -05:00, EDT -> -04:00)


    //Set up misc. variables
    //colCaseSensitivity governs how column names are compared and looked up.
    //it defaults to OrdinalIgnoreCase (column names are NOT case sensitive)
    //but could be set to Ordinal if input parameter ColumnNamesCaseSensitiveYN == "Y"
    private StringComparer colCaseSensitivity = StringComparer.OrdinalIgnoreCase;

    //Variables related to the output recordset:
    private Dictionary<string, IDTSOutputColumn100> mainOutputColumnsByName = new Dictionary<string, IDTSOutputColumn100>(StringComparer.OrdinalIgnoreCase);
    private Dictionary<int, string> mainOutputColumnNamesByPosition = new Dictionary<int, string>();
    private PipelineBuffer mainOutputBuffer = null;
    //private PipelineBuffer errorDetailBuffer = null;
    //private PipelineBuffer errorSummaryBuffer = null;

    //Variables related to the flatfile recordset:
    private Dictionary<string, int> flatfileColumnsByName = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase);
    private Dictionary<int, string> flatfileColumnsByPosition = new Dictionary<int, string>();

    //Variables controlling how parsing is done:
    private bool readyToParse = false; //Assume column headings are not as desired.
    private HashSet<string> mandatoryColumnList = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
    private HashSet<string> notNullColumnList = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
    private HashSet<string> nonTruncateableColumnList = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
    private Dictionary<string, Regex> columnRegexPatternMap = new Dictionary<string, Regex>(StringComparer.OrdinalIgnoreCase);
    private string[] dateFormatArray = { }; //empty string array
    private TimeZoneInfo convertToTimeZoneInfo = TimeZoneInfo.Local;

    //Variables related to parsing events
    private int totalParseEventsLogged = 0;         //Counter for # of parsing events performed
    private int totalLinesParsed = 0;               //Counter for # of lines parsed
    private int totalLineErrors = 0;                //Counter for # of lines with errors encountered
    private int totalFieldsParsed = 0;              //Counter for # of fields parsed
    private int totalFieldErrors = 0;               //Counter for # of fields with errors encountered
    private int totalTruncationErrors = 0;          //Counter for # of fields with truncation errors encountered
    private int totalNullabilityErrors = 0;         //Counter for # of fields with nullability errors encountered
    private int totalDataTypeErrors = 0;            //Counter for # of fields with data type errors encountered
    private int totalFieldCountErrors = 0;          //Counter for # of fields with field count errors encountered
    private int totalFormatErrors = 0;              //Counter for # of fields with format errors encountered
    private int totalOtherErrors = 0;               //Counter for # of fields or lines with other errors encountered

    public override void PreExecute()
    {
        base.PreExecute();

        //Get output column list:
        //Script sends data to the first output not named "Error Detail Output" or "Error Summary Output"
        foreach (IDTSOutput100 mo in ComponentMetaData.OutputCollection)
        {
            if (mo.Name.Equals("Output - File Data"))
            {
                //If an output not named Error Detail Output or Error Summary Output, gather a list of 
                foreach (IDTSOutputColumn100 outputColumn in mo.OutputColumnCollection)
                {
                    //Add the column to mainOutputColumns so it can be looked up by name
                    mainOutputColumnsByName.Add(outputColumn.Name, outputColumn);
                    mainOutputColumnNamesByPosition.Add(mainOutputColumnNamesByPosition.Count, outputColumn.Name);
                }
                break;
            }
        }
    }

    //Save off a copy of the output buffer (and associated objects)
    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
        base.PrimeOutput(Outputs, OutputIDs, Buffers, OutputMap);

        for (int Idx = 0; Idx < Outputs; Idx++)
        {
            if (OutputIDs[Idx] == GetOutputID(OutputMap, @"Output - File Data"))
            {
                mainOutputBuffer = Buffers[Idx];
            }
        }
    }

    private void AddFieldLevelParseLog(int parseControlID, string parseSourceFile, string parseSourceLineText, int parseSourceLineOffset,
                               int targetFieldNumber, string targetFieldName, string targetFieldDataType,
                               string targetFieldNullable, string parseFieldText, string parsePassFailResult, string parseTruncationError,
                               string parseNullabilityError, string parseDataTypeError, string parseFieldCountError,
                               string parseFormatError, string parseOtherError, string parseErrorMessage)
    {
        if (parseLogLevel == "E" && parsePassFailResult == "PASS")
            return; //Bail if we're set to ignore fields where parsing is successful
        if (totalParseEventsLogged > maxEventsToLog + 1 && maxEventsToLog != -1)
            return; //Bail if we've already logged as many events as we are allowed to

        OutputFieldLevelParseLoggingBuffer.AddRow();
        OutputFieldLevelParseLoggingBuffer.ParseControlID = parseControlID;
        OutputFieldLevelParseLoggingBuffer.ParseSourceFile = parseSourceFile;
        OutputFieldLevelParseLoggingBuffer.ParseSourceLineText = parseSourceLineText.Substring(0, Math.Min(parseSourceLineText.Length, 4000));
        OutputFieldLevelParseLoggingBuffer.ParseSourceLineOffset = parseSourceLineOffset;
        OutputFieldLevelParseLoggingBuffer.TargetFieldNumber = targetFieldNumber;
        OutputFieldLevelParseLoggingBuffer.TargetFieldName = targetFieldName;
        OutputFieldLevelParseLoggingBuffer.TargetFieldDataType = targetFieldDataType;
        OutputFieldLevelParseLoggingBuffer.TargetFieldNullable = targetFieldNullable;
        OutputFieldLevelParseLoggingBuffer.ParseFieldText = parseFieldText.Substring(0, Math.Min(parseFieldText.Length, 4000));
        OutputFieldLevelParseLoggingBuffer.ParsePassFailResult = parsePassFailResult;
        OutputFieldLevelParseLoggingBuffer.ParseTruncationError = parseTruncationError;
        OutputFieldLevelParseLoggingBuffer.ParseNullabilityError = parseNullabilityError;
        OutputFieldLevelParseLoggingBuffer.ParseDataTypeError = parseDataTypeError;
        OutputFieldLevelParseLoggingBuffer.ParseFieldCountError = parseFieldCountError;
        OutputFieldLevelParseLoggingBuffer.ParseFormatError = parseFormatError;
        OutputFieldLevelParseLoggingBuffer.ParseOtherError = parseOtherError;
        OutputFieldLevelParseLoggingBuffer.ParseErrorMessage = parseErrorMessage;

        totalParseEventsLogged++;
    }

    private void AddRecordLevelParsingError(string FailedLineText, string LookupWorkdayID, string LookupValue, string AdditionalData, string ErrorCode, string ErrorColumn, string Message)
    {
        if (totalParseEventsLogged > maxEventsToLog + 1 && maxEventsToLog != -1)
            return; //Bail if we've already logged as many events as we are allowed to
        OutputRecordLevelParseErrorsBuffer.AddRow();
        OutputRecordLevelParseErrorsBuffer.FileName = fileFullPath.Substring(0, Math.Min(fileFullPath.Length, 4000));
        OutputRecordLevelParseErrorsBuffer.FailedLineText = FailedLineText.Substring(0, Math.Min(FailedLineText.Length, 8000));
        OutputRecordLevelParseErrorsBuffer.LookupWorkdayID = LookupWorkdayID.Substring(0, Math.Min(LookupWorkdayID.Length, 255));
        OutputRecordLevelParseErrorsBuffer.LookupValue = LookupValue.Substring(0, Math.Min(LookupValue.Length, 255));
        OutputRecordLevelParseErrorsBuffer.AdditionalData = AdditionalData.Substring(0, Math.Min(AdditionalData.Length, 8000));
        OutputRecordLevelParseErrorsBuffer.ErrorCode = ErrorCode.Substring(0, Math.Min(ErrorCode.Length, 255));
        OutputRecordLevelParseErrorsBuffer.ErrorColumn = ErrorColumn.Substring(0, Math.Min(ErrorColumn.Length, 255));
        OutputRecordLevelParseErrorsBuffer.Message = Message.Substring(0, Math.Min(Message.Length, 5000));
        totalParseEventsLogged++;
    }

    private void AddFileLevelParseLog()
    {
        OutputFileLevelParseLoggingBuffer.AddRow();
        OutputFileLevelParseLoggingBuffer.ParseSourceFile = fileFullPath.Substring(0, Math.Min(fileFullPath.Length, 1000));
        OutputFileLevelParseLoggingBuffer.TotalLinesParsed = totalLinesParsed;
        OutputFileLevelParseLoggingBuffer.TotalLinesPassed = totalLinesParsed - totalLineErrors;
        OutputFileLevelParseLoggingBuffer.TotalLinesFailed = totalLineErrors;
        OutputFileLevelParseLoggingBuffer.TotalFieldsParsed = totalFieldsParsed;
        OutputFileLevelParseLoggingBuffer.TotalFieldsPassed = totalFieldsParsed - totalFieldErrors;
        OutputFileLevelParseLoggingBuffer.TotalFieldsFailed = totalFieldErrors;
        OutputFileLevelParseLoggingBuffer.TotalTruncationErrors = totalTruncationErrors;
        OutputFileLevelParseLoggingBuffer.TotalNullabilityErrors = totalNullabilityErrors;
        OutputFileLevelParseLoggingBuffer.TotalDataTypeErrors = totalDataTypeErrors;
        OutputFileLevelParseLoggingBuffer.TotalFieldCountErrors = totalFieldCountErrors;
        OutputFileLevelParseLoggingBuffer.TotalFormatErrors = totalFormatErrors;
        OutputFileLevelParseLoggingBuffer.TotalOtherErrors = totalOtherErrors;
    }


    private void ParseFlatFile()
    {

        //Get full file path and name
        fileFullPath = fileLocation.Trim();
        if (!Regex.IsMatch(fileFullPath, "^.*\\$"))
            fileFullPath = fileFullPath + "\\";
        fileFullPath = fileFullPath + fileName.Trim();

        //Set up the dictionary object to hold the 
        tz3ToOffset.Add("EDT", "-04:00");
        tz3ToOffset.Add("EST", "-05:00");
        tz3ToOffset.Add("CDT", "-05:00");
        tz3ToOffset.Add("CST", "-06:00");
        tz3ToOffset.Add("MDT", "-06:00");
        tz3ToOffset.Add("MST", "-07:00");
        tz3ToOffset.Add("PDT", "-07:00");
        tz3ToOffset.Add("PST", "-08:00");
        tz3ToOffset.Add("AKDT", "-08:00");
        tz3ToOffset.Add("AKST", "-09:00");
        tz3ToOffset.Add("HDT", "-09:00");
        tz3ToOffset.Add("HST", "-10:00");       


        //Set up the text field parser object
        TextFieldParser parser;
        try
        {
            parser = new TextFieldParser(fileFullPath);
            parser.SetDelimiters(",");
            parser.HasFieldsEnclosedInQuotes = true;
        }
        catch (Exception ex)
        {
            totalOtherErrors++;
            AddFileLevelParseLog();
            throw ex;
        }

        string[] curFields = { };   //the set of fields parsed out of an input line
        int curline = 0;            //Starting at line 
        Boolean abortParse = false;

        //Read to end of file or limit on lines to process is reached:
        while (!abortParse && !parser.EndOfData && (curline <= maxLinesToProcess || maxLinesToProcess == -1))
        {
            //Peek ahead to get the full text of the current line
            string curLineText = parser.PeekChars(8000);

            //read a line from the file, chopping it into individual strings
            curline++;
            try
            {
                curFields = parser.ReadFields();
            }
            catch (MalformedLineException ex)
            {
                totalOtherErrors++;
                totalLineErrors++;
                AddRecordLevelParsingError(curLineText, "N/A", "N/A", "N/A", "N/A", "N/A", "Unable to parse line " + curline.ToString() + " of file. [" + ex.Message + "]");
                if (totalLineErrors > maxErrorsToIgnore && maxErrorsToIgnore != -1)
                    break; //Quit reading from the file (i.e. exit from the "while(!parser.EndOfData)" loop).
                else
                    continue; //Don't bother parsing this line, just move on to the next one.
            }

            //Process header lines
            if (curline <= headerLineCount) //Line is a header line
            {
                if (curline == columnHeaderLine && columnHeaderList.Trim().Equals(""))  //Current line is the header (and the headers are not overriden by specifying the 
                {
                    //Set up some variables for column presence checking
                    bool mandatoryHeadersOK = true; //assume all mandatory columns are found
                    bool specialHeadersOK = true;   //assume Workday ID, Lookup Value and Additional Data columns are found (if requested)
                    bool expectedHeadersOK = true;  //assume all expected columns are found
                    bool extraHeadersOK = true;     //assume no extra columns are found
                    bool duplicateHeadersOK = true; //assume no duplicate headers are found

                    foreach (string colname in curFields)
                    {
                        if (flatfileColumnsByName.ContainsKey(colname))
                        {
                            AddFieldLevelParseLog(-1, fileFullPath, curLineText, curline, -1, colname, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Duplicate column name found in input recordset.");
                            duplicateHeadersOK = false;
                        }
                        else
                        {
                            flatfileColumnsByName.Add(colname, flatfileColumnsByName.Count);
                            flatfileColumnsByPosition.Add(flatfileColumnsByPosition.Count, colname);
                        }
                    }

                    //Check against the list of columns in mandatoryColumnList
                    foreach (string colname in mandatoryColumnList)
                    {
                        if (!flatfileColumnsByName.ContainsKey(colname))
                        {
                            totalFieldCountErrors++;
                            mandatoryHeadersOK = false;
                            AddFieldLevelParseLog(-1, fileFullPath, curLineText, curline, -1, colname, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Mandatory column missing from input recordset.");
                        }
                    }
                    //Check the "special" column list (workday ID, lookup value, and additional data)
                    if (workdayIDColumn != "" && !flatfileColumnsByName.ContainsKey(workdayIDColumn))
                    {
                        totalFieldCountErrors++;
                        specialHeadersOK = false;
                        AddFieldLevelParseLog(-1, fileFullPath, curLineText, curline, -1, workdayIDColumn, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Workday ID column requested but missing from input recordset.");
                    }
                    if (lookupValueColumn != "" && !flatfileColumnsByName.ContainsKey(lookupValueColumn))
                    {
                        totalFieldCountErrors++;
                        specialHeadersOK = false;
                        AddFieldLevelParseLog(-1, fileFullPath, curLineText, curline, -1, lookupValueColumn, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Lookup Value column requested but missing from input recordset.");
                    }
                    if (additionalDataColumn != "" && !flatfileColumnsByName.ContainsKey(additionalDataColumn))
                    {
                        totalFieldCountErrors++;
                        specialHeadersOK = false;
                        AddFieldLevelParseLog(-1, fileFullPath, curLineText, curline, -1, additionalDataColumn, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Additional Data column requested but missing from input recordset.");
                    }
                    //Check expected output column list and see if they are on the input
                    foreach (string colname in mainOutputColumnsByName.Keys)
                    {
                        if (!flatfileColumnsByName.ContainsKey(colname))
                        {
                            if (colname != recordTextOutputColumn && colname != fileNameOutputColumn)
                            {
                                totalFieldCountErrors++;
                                expectedHeadersOK = false;
                                AddFieldLevelParseLog(-1, fileFullPath, curLineText, curline, -1, colname, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Column on output recordset but missing from input recordset.");
                            }
                        }
                    }
                    //Check actual columns in file to see if all are on the output
                    foreach (string colname in flatfileColumnsByName.Keys)
                    {
                        if (!mainOutputColumnsByName.ContainsKey(colname))
                        {
                            totalFieldCountErrors++;
                            extraHeadersOK = false;
                            AddFieldLevelParseLog(-1, fileFullPath, curLineText, curline, -1, colname, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Extra column found on input recordset.");
                        }
                    }

                    //If a mandatory column was missing, then fail package or quit
                    if (!mandatoryHeadersOK)
                    {
                        if (failOnMissingMandatoryColumnInHeaderYN == "Y")
                        {
                            bool t = true;
                            this.ComponentMetaData.FireError(-1, ComponentMetaData.Name, "Mandatory Column Missing from Input File", null, 0, out t);
                        }
                        return;
                    }
                    //If Workday ID, Lookup Value or Additional Data columns are missing (if requested), then just quit.  Don't fail package.
                    if (!specialHeadersOK)
                        return;
                    //If expected columns are missing and "Allow Missing Columns" is not "Y" then fail package or quit
                    if (!expectedHeadersOK && allowMissingColumnsYN != "Y")
                    {
                        if (failOnMissingColumnYN == "Y")
                        {
                            bool t = true;
                            this.ComponentMetaData.FireError(-1, ComponentMetaData.Name, "Expected Column Missing from Input File", null, 0, out t);
                        }
                        return;
                    }
                    //If an extra column was found and "Allow Extra Columns" is not "Y" then fail package or quit
                    if (!extraHeadersOK && allowExtraColumnsYN != "Y")
                    {
                        if (failOnExtraColumnYN == "Y")
                        {
                            bool t = true;
                            this.ComponentMetaData.FireError(-1, ComponentMetaData.Name, "Unexpected Column Found in Input File", null, 0, out t);
                        }
                        return;
                    };
                    //If a duplicate column was found then just quit
                    if (!duplicateHeadersOK)
                        return;
                }
            }
            else //Line is a data line
            {
                //Try to get the workday ID, lookup value, and additional columns:
                string workdayIDValue = "";
                string lookupValueValue = "";
                string additionalDataValue = "";
                if (flatfileColumnsByName.ContainsKey(workdayIDColumn) && flatfileColumnsByName[workdayIDColumn] < curFields.Length)
                {
                    workdayIDValue = curFields[flatfileColumnsByName[workdayIDColumn]];
                }
                if (flatfileColumnsByName.ContainsKey(lookupValueColumn) && flatfileColumnsByName[lookupValueColumn] < curFields.Length)
                {
                    lookupValueValue = curFields[flatfileColumnsByName[lookupValueColumn]];
                }
                if (flatfileColumnsByName.ContainsKey(additionalDataColumn) && flatfileColumnsByName[additionalDataColumn] < curFields.Length)
                {
                    additionalDataValue = curFields[flatfileColumnsByName[additionalDataColumn]];
                }

                //Create a new output row for the mainOutputRowBuffer 
                mainOutputBuffer.AddRow();
                //Assume all fields will parse correctly
                bool allFieldsParsedOK = true;
                string failedFields = "";

                //Iterate over the set of expected output columns (retrieved earlier in the PreExecute() method):
                for (int outColPos = 0; outColPos < mainOutputColumnNamesByPosition.Count; outColPos++)
                {
                    //Break out of the for loop if abortParse == true
                    if (abortParse)
                        break;
                    //String to hold value of the input field
                    string inColVal = "";
                    //Get the current output column name: 
                    string outColName = mainOutputColumnNamesByPosition[outColPos];
                    //Get the current output column definition:
                    IDTSOutputColumn100 outCol = mainOutputColumnsByName[outColName];
                    //String to hold the type name
                    string outColTypeName = "";
                    //String to hold the nullability
                    string outColNullable = "";

                    //Set up variables to record if/what type of errors were encountered:
                    string parseTruncationError = "N";
                    string parseNullabilityError = "N";
                    string parseDataTypeError = "N";
                    string parseFieldCountError = "N";
                    string parseFormatError = "N";
                    string parseOtherError = "N";
                    string parseUnicodeError = "N";
                    string parseDateYearError = "N";
                    string errorText = "";
                    string fieldPassFailResult = "PASS"; //Default status to "PASS"

                    //Get column type name
                    outColTypeName = outCol.DataType.ToString();
                    if (Regex.IsMatch(outColTypeName, "DT_BYTES|DT_STR|DT_WSTR"))
                    {
                        outColTypeName = outColTypeName + "(" + outCol.Length.ToString() + ")";
                    }
                    if (Regex.IsMatch(outColTypeName, "DT_DECIMAL|DT_NUMERIC"))
                    {
                        outColTypeName = outColTypeName + "(" + outCol.Precision.ToString();
                        if (outCol.Scale != 0)
                            outColTypeName = outColTypeName + "," + outCol.Scale.ToString();
                        outColTypeName = outColTypeName + ")";

                    }
                    //Get column nullability
                    if (notNullColumnList.Contains(outColName))
                        outColNullable = "NOT NULL";
                    else
                        outColNullable = "NULL";

                    //Look for the column in the set of fields on the input record:

                    if (flatfileColumnsByName.ContainsKey(outColName))
                    { //The column was found
                        //Retrieve the column's position
                        int inColPos = flatfileColumnsByName[outColName];

                        //Check to see if the array containing the current line's parsed fields
                        //is long enough to have contained the output column
                        //NOTE 1: there's no way to know if a field is "shifted left" due to a formatting error within 
                        //        the line (other than to see if the header count == field count)
                        //        e.g. Headers say to expect fields A,B,C,D,E but line had four fields.  
                        //        Were they A,B,D,E? B,C,D,E? A,B,C,E? A,B,C,D?  It's impossible to tell.
                        //NOTE 2: Since it's possible to configure the script to allow extra columns, 
                        //        There's no point in checking to see if the parsed array has more fields than expected
                        if (flatfileColumnsByName[outColName] >= curFields.Length)
                        {
                            if (allowMissingColumnsYN != "N") //allowMissingColumnsYN == "Y" or Blank
                            {
                                parseFieldCountError = "Y";
                                errorText = "Expected Column Missing from Input File";
                                mainOutputBuffer.SetNull(outColPos);
                                fieldPassFailResult = "FAIL";
                                if (mandatoryColumnList.Contains(outColName) && failOnMissingMandatoryColumnInLineYN == "Y")
                                {
                                    errorText = "Mandatory Column Missing from Input File";
                                    bool t = true;
                                    this.ComponentMetaData.FireError(-1, ComponentMetaData.Name, "Mandatory Column Missing from Input File", null, 0, out t);
                                    mainOutputBuffer.RemoveRow(); //Remove the current row from the output buffer
                                    abortParse = true; //abort parsing
                                }
                            }
                            else //allowMissingColumnsYN == "N"
                            {
                                if (failOnMissingColumnYN == "Y")
                                {
                                    bool t = true;
                                    this.ComponentMetaData.FireError(-1, ComponentMetaData.Name, "Expected Column Missing from Input File", null, 0, out t);
                                    mainOutputBuffer.RemoveRow(); //Remove the current row from the output buffer
                                    abortParse = true; //abort parsing
                                }
                                if (mandatoryColumnList.Contains(outColName) && failOnMissingMandatoryColumnInLineYN == "Y")
                                {
                                    bool t = true;
                                    this.ComponentMetaData.FireError(-1, ComponentMetaData.Name, "Mandatory Column Missing from Input File", null, 0, out t);
                                    mainOutputBuffer.RemoveRow(); //Remove the current row from the output buffer
                                    abortParse = true; //abort parsing
                                }
                            }
                        }
                        else
                        {
                            //Retrieve the text of the column from the current parsed input record
                            inColVal = curFields[inColPos];

                            //If the string is empty, consider it NULL
                            if (inColVal.Equals(""))
                            {
                                if (notNullColumnList.Contains(outColName))
                                {
                                    allFieldsParsedOK = false;
                                    parseNullabilityError = "Y";
                                    failedFields = failedFields + outColName + ",";
                                }
                                mainOutputBuffer.SetNull(outColPos);
                            }
                            else //Parse the fields
                            {
                                //Pick the right parser/setter based on the desired output data type
                                switch (outCol.DataType)
                                {
                                    #region Type Cases for Parsing
                                    case DataType.DT_BOOL:
                                        {
                                            try //try to cast to System.Boolean and add to row with SetBoolean()
                                            {
                                                System.Boolean v;
                                                v = System.Boolean.Parse(inColVal);
                                                mainOutputBuffer.SetBoolean(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    //DataType DT_BYTES Not Supported
                                    //case DataType.DT_BYTES:
                                    //    {
                                    //        try //try to cast to Array of System.Byte and add to row with SetBytes()
                                    //        {
                                    //           Array of System.Byte v;
                                    //           v = Array of System.Byte.Parse(inColVal);
                                    //           mainOutputBuffer.SetBytes(outColPos,v);
                                    //        } catch(Exception ex) {
                                    //           //handleerrors
                                    //           parseDataTypeError = "Y";
                                    //           errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                    //           mainOutputBuffer.SetNull(outColPos);
                                    //           fieldPassFailResult = "FAIL";
                                    //        }
                                    //        break;
                                    //    }
                                    case DataType.DT_CY:
                                        {
                                            try //try to cast to System.Decimal and add to row with SetDecimal()
                                            {
                                                System.Decimal v;
                                                v = System.Decimal.Parse(inColVal);
                                                mainOutputBuffer.SetDecimal(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_DATE:
                                        {
                                            try //try to cast to System.DateTime and add to row with SetDateTime()
                                            {
                                                if(convertThreeCharTzsToOffsetYN == "Y")
                                                {
                                                    foreach(KeyValuePair<string,string> kvp in this.tz3ToOffset)
                                                    {
                                                        inColVal = Regex.Replace(inColVal, kvp.Key, kvp.Value);
                                                    }
                                                }
                                                System.DateTimeOffset v;
                                                if (dateFormatArray.Length > 0)
                                                    v = System.DateTimeOffset.ParseExact(inColVal, dateFormatArray, CultureInfo.InvariantCulture, DateTimeStyles.None);
                                                else
                                                    v = System.DateTimeOffset.Parse(inColVal);
                                                v = v.ToUniversalTime();
                                                v = TimeZoneInfo.ConvertTime(v, convertToTimeZoneInfo);

                                                //Check for dates with invalid year (less than earliestAllowableYear)
                                                if (fixDateValuesYN.Equals("Y") && v.Year < earliestAllowableYear)
                                                {
                                                    parseDataTypeError = "Y"; //Consider an improper date a data type error
                                                    fieldPassFailResult = "FAIL";
                                                    parseDateYearError = "Y";
                                                    errorText = "Date with Year < " + earliestAllowableYear.ToString();
                                                    mainOutputBuffer.SetNull(outColPos);
                                                }
                                                else
                                                {
                                                    mainOutputBuffer.SetDateTime(outColPos, new DateTime(v.Year, v.Month, v.Day, v.Hour, v.Minute, v.Second, v.Millisecond));
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_DBDATE:
                                        {
                                            try //try to cast to System.DateTimeOffset and add to row with SetDate()
                                            {
                                                System.DateTimeOffset v;
                                                if (dateFormatArray.Length > 0)
                                                    v = System.DateTimeOffset.ParseExact(inColVal, dateFormatArray, CultureInfo.InvariantCulture, DateTimeStyles.None);
                                                else
                                                    v = System.DateTimeOffset.Parse(inColVal);
                                                v = v.ToUniversalTime();
                                                v = TimeZoneInfo.ConvertTime(v, convertToTimeZoneInfo);

                                                //Check for dates with invalid year (less than earliestAllowableYear)
                                                if (fixDateValuesYN.Equals("Y") && v.Year < earliestAllowableYear)
                                                {
                                                    parseDataTypeError = "Y"; //Consider an improper date a data type error
                                                    fieldPassFailResult = "FAIL";
                                                    parseDateYearError = "Y";
                                                    errorText = "Date with Year < " + earliestAllowableYear.ToString();
                                                    mainOutputBuffer.SetNull(outColPos);
                                                }
                                                else
                                                {
                                                    mainOutputBuffer.SetDateTime(outColPos, new DateTime(v.Year, v.Month, v.Day, v.Hour, v.Minute, v.Second, v.Millisecond));
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_DBTIME:
                                        {
                                            try //try to cast to System.TimeSpan and add to row with SetTime()
                                            {
                                                System.TimeSpan v;
                                                v = System.TimeSpan.Parse(inColVal);
                                                mainOutputBuffer.SetTime(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_DBTIME2:
                                        {
                                            try //try to cast to System.TimeSpan and add to row with SetTime()
                                            {
                                                System.TimeSpan v;
                                                v = System.TimeSpan.Parse(inColVal);
                                                mainOutputBuffer.SetTime(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_DBTIMESTAMP:
                                        {
                                            try //try to cast to System.DateTime and add to row with SetDateTime()
                                            {
                                                System.DateTimeOffset v;
                                                if (dateFormatArray.Length > 0)
                                                    v = System.DateTimeOffset.ParseExact(inColVal, dateFormatArray, CultureInfo.InvariantCulture, DateTimeStyles.None);
                                                else
                                                    v = System.DateTimeOffset.Parse(inColVal);
                                                v = v.ToUniversalTime();
                                                v = TimeZoneInfo.ConvertTime(v, convertToTimeZoneInfo);

                                                //Check for dates with invalid year (less than earliestAllowableYear)
                                                if (fixDateValuesYN.Equals("Y") && v.Year < earliestAllowableYear)
                                                {
                                                    parseDataTypeError = "Y"; //Consider an improper date a data type error
                                                    fieldPassFailResult = "FAIL";
                                                    parseDateYearError = "Y";
                                                    errorText = "Date with Year < " + earliestAllowableYear.ToString();
                                                    mainOutputBuffer.SetNull(outColPos);
                                                }
                                                else
                                                {
                                                    mainOutputBuffer.SetDateTime(outColPos, new DateTime(v.Year, v.Month, v.Day, v.Hour, v.Minute, v.Second, v.Millisecond));
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_DBTIMESTAMP2:
                                        {
                                            try //try to cast to System.DateTime and add to row with SetDateTime()
                                            {
                                                System.DateTimeOffset v;
                                                if (dateFormatArray.Length > 0)
                                                    v = System.DateTimeOffset.ParseExact(inColVal, dateFormatArray, CultureInfo.InvariantCulture, DateTimeStyles.None);
                                                else
                                                    v = System.DateTimeOffset.Parse(inColVal);
                                                v = v.ToUniversalTime();
                                                v = TimeZoneInfo.ConvertTime(v, convertToTimeZoneInfo);

                                                //Check for dates with invalid year (less than earliestAllowableYear)
                                                if (fixDateValuesYN.Equals("Y") && v.Year < earliestAllowableYear)
                                                {
                                                    parseDataTypeError = "Y"; //Consider an improper date a data type error
                                                    fieldPassFailResult = "FAIL";
                                                    parseDateYearError = "Y";
                                                    errorText = "Date with Year < " + earliestAllowableYear.ToString();
                                                    mainOutputBuffer.SetNull(outColPos);
                                                }
                                                else
                                                {
                                                    mainOutputBuffer.SetDateTime(outColPos, new DateTime(v.Year, v.Month, v.Day, v.Hour, v.Minute, v.Second, v.Millisecond));
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_DBTIMESTAMPOFFSET:
                                        {
                                            try //try to cast to System.DateTimeOffset and add to row with SetDateTimeOffset()
                                            {
                                                System.DateTimeOffset v;
                                                v = System.DateTimeOffset.Parse(inColVal);
                                                //Check for dates with invalid year (less than earliestAllowableYear)

                                                if (fixDateValuesYN.Equals("Y") && v.Year < earliestAllowableYear)
                                                {
                                                    parseDataTypeError = "Y"; //Consider an improper date a data type error
                                                    fieldPassFailResult = "FAIL";
                                                    parseDateYearError = "Y";
                                                    errorText = "Date with Year < " + earliestAllowableYear.ToString();
                                                    mainOutputBuffer.SetNull(outColPos);
                                                }
                                                else
                                                {
                                                    mainOutputBuffer.SetDateTimeOffset(outColPos, v);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_DECIMAL:
                                        {
                                            try //try to cast to System.Decimal and add to row with SetDecimal()
                                            {
                                                System.Decimal v;
                                                v = System.Decimal.Parse(inColVal);
                                                mainOutputBuffer.SetDecimal(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_FILETIME:
                                        {
                                            try //try to cast to System.DateTime and add to row with SetDateTime()
                                            {
                                                System.DateTimeOffset v;
                                                if (dateFormatArray.Length > 0)
                                                    v = System.DateTimeOffset.ParseExact(inColVal, dateFormatArray, CultureInfo.InvariantCulture, DateTimeStyles.None);
                                                else
                                                    v = System.DateTimeOffset.Parse(inColVal);
                                                v = v.ToUniversalTime();
                                                v = TimeZoneInfo.ConvertTime(v, convertToTimeZoneInfo);

                                                //Check for dates with invalid year (less than earliestAllowableYear)
                                                if (fixDateValuesYN.Equals("Y") && v.Year < earliestAllowableYear)
                                                {
                                                    parseDataTypeError = "Y"; //Consider an improper date a data type error
                                                    fieldPassFailResult = "FAIL";
                                                    parseDateYearError = "Y";
                                                    errorText = "Date with Year < " + earliestAllowableYear.ToString();
                                                    mainOutputBuffer.SetNull(outColPos);
                                                }
                                                else
                                                {
                                                    mainOutputBuffer.SetDateTime(outColPos, new DateTime(v.Year, v.Month, v.Day, v.Hour, v.Minute, v.Second, v.Millisecond));
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_GUID:
                                        {
                                            try //try to cast to System.Guid and add to row with SetGuid()
                                            {
                                                System.Guid v;
                                                v = System.Guid.Parse(inColVal);
                                                mainOutputBuffer.SetGuid(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_I1:
                                        {
                                            try //try to cast to System.SByte and add to row with SetSByte()
                                            {
                                                System.SByte v;
                                                v = System.SByte.Parse(inColVal);
                                                mainOutputBuffer.SetSByte(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_I2:
                                        {
                                            try //try to cast to System.Int16 and add to row with SetInt16()
                                            {
                                                System.Int16 v;
                                                v = System.Int16.Parse(inColVal);
                                                mainOutputBuffer.SetInt16(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_I4:
                                        {
                                            try //try to cast to System.Int32 and add to row with SetInt32()
                                            {
                                                System.Int32 v;
                                                v = System.Int32.Parse(inColVal);
                                                mainOutputBuffer.SetInt32(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_I8:
                                        {
                                            try //try to cast to System.Int64 and add to row with SetInt64()
                                            {
                                                System.Int64 v;
                                                v = System.Int64.Parse(inColVal);
                                                mainOutputBuffer.SetInt64(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    //DataType DT_IMAGE Not Supported
                                    //case DataType.DT_IMAGE:
                                    //    {
                                    //        try //try to cast to N/A and add to row with AddBlobData or AddBlobData()
                                    //        {
                                    //           N/A v;
                                    //           v = N/A.Parse(inColVal);
                                    //           mainOutputBuffer.AddBlobData or AddBlobData(outColPos,v);
                                    //        } catch(Exception ex) {
                                    //           //handleerrors
                                    //           parseDataTypeError = "Y";
                                    //           errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                    //           mainOutputBuffer.SetNull(outColPos);
                                    //           fieldPassFailResult = "FAIL";
                                    //        }
                                    //        break;
                                    //    }
                                    case DataType.DT_NTEXT:
                                        {
                                            try //try to cast to System.String and add to row with SetString()
                                            {
                                                string v = inColVal;
                                                //Truncate strings longer than allowable size
                                                if (inColVal.Length > outCol.Length)
                                                {
                                                    parseTruncationError = "Y";
                                                    fieldPassFailResult = "FAIL";
                                                    errorText = "String would be truncated";
                                                    if (truncateStringValuesYN.Equals("Y"))
                                                    {
                                                        if (nonTruncateableColumnList.Contains(outColName))
                                                            v = null;
                                                        else
                                                            v = inColVal.Substring(0, outCol.Length);
                                                    }
                                                }
                                                if (columnRegexPatternMap.ContainsKey(outColName))
                                                {
                                                    if (!columnRegexPatternMap[outColName].IsMatch(inColVal))
                                                    {
                                                        fieldPassFailResult = "FAIL";
                                                        if (errorText != "") errorText = errorText + " and ";
                                                        errorText = errorText + "String value failed to match regular expression pattern";
                                                        parseFormatError = "Y";
                                                    }
                                                }
                                                mainOutputBuffer.SetString(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    //DataType DT_NULL Not Supported
                                    //case DataType.DT_NULL:
                                    //    {
                                    //        try //try to cast to N/A and add to row with SetNull()
                                    //        {
                                    //           N/A v;
                                    //           v = N/A.Parse(inColVal);
                                    //           mainOutputBuffer.SetNull(outColPos,v);
                                    //        } catch(Exception ex) {
                                    //           //handleerrors
                                    //           parseDataTypeError = "Y";
                                    //           errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                    //           mainOutputBuffer.SetNull(outColPos);
                                    //           fieldPassFailResult = "FAIL";
                                    //        }
                                    //        break;
                                    //    }
                                    case DataType.DT_NUMERIC:
                                        {
                                            try //try to cast to System.Decimal and add to row with SetDecimal()
                                            {
                                                System.Decimal v;
                                                v = System.Decimal.Parse(inColVal);
                                                mainOutputBuffer.SetDecimal(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_R4:
                                        {
                                            try //try to cast to System.Single and add to row with SetSingle()
                                            {
                                                System.Single v;
                                                v = System.Single.Parse(inColVal);
                                                mainOutputBuffer.SetSingle(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_R8:
                                        {
                                            try //try to cast to System.Double and add to row with SetDouble()
                                            {
                                                System.Double v;
                                                v = System.Double.Parse(inColVal);
                                                mainOutputBuffer.SetDouble(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_STR:
                                        {
                                            try //try to cast to System.String and add to row with SetString()
                                            {
                                                //Strip Unicode characters from non-unicode target columns if requested
                                                if (this.stripUnicodeFromNonUnicodeYN == "Y")
                                                {
                                                    inColVal = Regex.Replace(inColVal, @"[^\u0000-\u007F]+", string.Empty);
                                                }
                                                string v = inColVal;
                                                //Truncate strings longer than allowable size
                                                if (inColVal.Length > outCol.Length)
                                                {
                                                    parseTruncationError = "Y";
                                                    fieldPassFailResult = "FAIL";
                                                    errorText = "String would be truncated";
                                                    if (truncateStringValuesYN.Equals("Y"))
                                                    {
                                                        if (nonTruncateableColumnList.Contains(outColName))
                                                            v = null;
                                                        else
                                                            v = inColVal.Substring(0, outCol.Length);
                                                    }
                                                }
                                                //Check for Unicode input with non-Unicode target column
                                                if (Regex.IsMatch(inColVal, "[^\x00-\x7F]"))
                                                {
                                                    fieldPassFailResult = "FAIL";
                                                    if (errorText != "") errorText = errorText + " and ";
                                                    errorText = errorText + "Unicode character found for non-unicode target column";
                                                    parseUnicodeError = "Y";
                                                    parseFormatError = "Y";
                                                }
                                                if (columnRegexPatternMap.ContainsKey(outColName))
                                                {
                                                    if (!columnRegexPatternMap[outColName].IsMatch(inColVal))
                                                    {
                                                        fieldPassFailResult = "FAIL";
                                                        if (errorText != "") errorText = errorText + " and ";
                                                        errorText = errorText + "String value failed to match regular expression pattern";
                                                        parseFormatError = "Y";
                                                    }
                                                }
                                                mainOutputBuffer.SetString(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_TEXT:
                                        {
                                            try //try to cast to System.String and add to row with SetString()
                                            {
                                                string v = inColVal;
                                                //Truncate strings longer than allowable size
                                                if (inColVal.Length > outCol.Length)
                                                {
                                                    parseTruncationError = "Y";
                                                    fieldPassFailResult = "FAIL";
                                                    errorText = "String would be truncated";
                                                    if (truncateStringValuesYN.Equals("Y"))
                                                        if (truncateStringValuesYN.Equals("Y"))
                                                        {
                                                            if (nonTruncateableColumnList.Contains(outColName))
                                                                v = null;
                                                            else
                                                                v = inColVal.Substring(0, outCol.Length);
                                                        }
                                                }
                                                //Check for Unicode input with non-Unicode target column
                                                if (Regex.IsMatch(inColVal, "[^\x00-\x7F]"))
                                                {
                                                    fieldPassFailResult = "FAIL";
                                                    if (errorText != "") errorText = errorText + " and ";
                                                    errorText = errorText + "Unicode character found for non-unicode target column";
                                                    parseUnicodeError = "Y";
                                                    parseFormatError = "Y";
                                                }
                                                if (columnRegexPatternMap.ContainsKey(outColName))
                                                {
                                                    if (!columnRegexPatternMap[outColName].IsMatch(inColVal))
                                                    {
                                                        fieldPassFailResult = "FAIL";
                                                        if (errorText != "") errorText = errorText + " and ";
                                                        errorText = errorText + "String value failed to match regular expression pattern";
                                                        parseFormatError = "Y";
                                                    }
                                                }
                                                mainOutputBuffer.SetString(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_UI1:
                                        {
                                            try //try to cast to System.Byte and add to row with SetByte()
                                            {
                                                System.Byte v;
                                                v = System.Byte.Parse(inColVal);
                                                mainOutputBuffer.SetByte(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_UI2:
                                        {
                                            try //try to cast to System.UInt16 and add to row with SetUInt16()
                                            {
                                                System.UInt16 v;
                                                v = System.UInt16.Parse(inColVal);
                                                mainOutputBuffer.SetUInt16(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_UI4:
                                        {
                                            try //try to cast to System.UInt32 and add to row with SetUInt32()
                                            {
                                                System.UInt32 v;
                                                v = System.UInt32.Parse(inColVal);
                                                mainOutputBuffer.SetUInt32(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_UI8:
                                        {
                                            try //try to cast to System.UInt64 and add to row with SetUInt64()
                                            {
                                                System.UInt64 v;
                                                v = System.UInt64.Parse(inColVal);
                                                mainOutputBuffer.SetUInt64(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                    case DataType.DT_WSTR:
                                        {
                                            try //try to cast to System.String and add to row with SetString()
                                            {
                                                string v = inColVal;
                                                //Truncate strings longer than allowable size
                                                if (inColVal.Length > outCol.Length)
                                                {
                                                    parseTruncationError = "Y";
                                                    fieldPassFailResult = "FAIL";
                                                    errorText = "String would be truncated";
                                                    if (truncateStringValuesYN.Equals("Y"))
                                                    {
                                                        if (nonTruncateableColumnList.Contains(outColName))
                                                            v = null;
                                                        else
                                                            v = inColVal.Substring(0, outCol.Length);
                                                    }
                                                }
                                                if (columnRegexPatternMap.ContainsKey(outColName))
                                                {
                                                    if (!columnRegexPatternMap[outColName].IsMatch(inColVal))
                                                    {
                                                        fieldPassFailResult = "FAIL";
                                                        if (errorText != "") errorText = errorText + " and ";
                                                        errorText = errorText + "String value failed to match regular expression pattern";
                                                        parseFormatError = "Y";
                                                    }
                                                }
                                                mainOutputBuffer.SetString(outColPos, v);
                                            }
                                            catch (Exception ex)
                                            {
                                                //handleerrors
                                                parseDataTypeError = "Y";
                                                errorText = "Unable to convert to target data type [" + ex.Message + "]";
                                                mainOutputBuffer.SetNull(outColPos);
                                                fieldPassFailResult = "FAIL";
                                            }
                                            break;
                                        }
                                        #endregion
                                }
                            }
                        }
                        totalFieldsParsed++; //Increment the count of fields parsed
                        //Write a field-level log entry:
                        AddFieldLevelParseLog(-1, fileFullPath, curLineText, curline, outColPos, outColName, outColTypeName, outColNullable, inColVal, fieldPassFailResult, parseTruncationError, parseNullabilityError, parseDataTypeError, parseFieldCountError, parseFormatError, parseOtherError, errorText);
                    } //End of processing where the expected column was found in the input recordset
                    else //The expected column was not found in the input recordset.
                    {
                        //It might be the column the user has chosen to hold the file name (account for case senstivity here)
                        if (columnNamesCaseSensitive == "Y" && outColName == fileNameOutputColumn || columnNamesCaseSensitive != "Y" && outColName.ToUpper() == fileNameOutputColumn.ToUpper())
                        {
                            mainOutputBuffer.SetString(outColPos, fileFullPath);
                        }
                        //It might be the column the user has chosen to hold the text of the input line (account for case senstivity here)
                        else if (columnNamesCaseSensitive == "Y" && outColName == recordTextOutputColumn || columnNamesCaseSensitive != "Y" && outColName.ToUpper() == recordTextOutputColumn.ToUpper())
                        {
                            mainOutputBuffer.SetString(outColPos, curLineText.Substring(0, Math.Min(4000, curLineText.Length)));
                        }
                        else //If it's not the file name or record text column, it truly is missing...It's actually a column missing from the input recordset
                        {
                            //An exception would have been thrown by now if allowMissingColumnsYN was "N" or the column is in the mandatory column list
                            //So just add a NULL:
                            fieldPassFailResult = "FAIL";
                            parseFieldCountError = "Y";
                            mainOutputBuffer.SetNull(outColPos);
                            //Uncomment the line below if writing a field-level "missing input field" log entry for every record:
                            //  AddFieldLevelParseLog(-1, fileFullPath, curLineText, curline, outColPos, outColName, outColTypeName, outColNullable, inColVal, fieldPassFailResult, "N", "N", "N", "Y", "N", "N", "Field missing from input record set.");
                        }
                    }
                    //Perform post-parse error handling at the field level:
                    if (fieldPassFailResult == "FAIL")
                    {
                        failedFields = failedFields + outColName + ",";
                        totalFieldErrors++;
                        if (parseTruncationError == "Y")
                        {
                            totalTruncationErrors++;
                            if (truncateStringValuesYN != "Y" || nonTruncateableColumnList.Contains(outColName))
                                allFieldsParsedOK = false;
                        }
                        if (parseNullabilityError == "Y")
                        {
                            totalNullabilityErrors++;
                            if (notNullColumnList.Contains(outColName))
                                allFieldsParsedOK = false;
                        }
                        if (parseDataTypeError == "Y")
                        {
                            totalDataTypeErrors++;
                            if (parseDateYearError != "Y" || fixDateValuesYN != "Y") //Allow a data type error to slide if it's also a bad-year and fixing dates is allowable
                                allFieldsParsedOK = false;
                        }
                        if (parseFieldCountError == "Y")
                            totalFieldCountErrors++;
                        if (parseFormatError == "Y" || parseUnicodeError == "Y")
                            totalFormatErrors++;
                        if (parseDateYearError == "Y" && fixDateValuesYN != "Y")
                            allFieldsParsedOK = false;
                        if (parseOtherError == "Y")
                            totalOtherErrors++;
                    } //End of post-parse error handling at the field level
                }

                //Increment the count of lines parsed
                totalLinesParsed++;
                //Check to see if a parsing exception has been caught:
                if (!allFieldsParsedOK)
                {
                    mainOutputBuffer.RemoveRow(); //Get rid of the output buffer
                    totalLineErrors++; ; //increment error line counter
                    if (totalLineErrors <= maxErrorsToIgnore || maxErrorsToIgnore == -1)
                    {
                        AddRecordLevelParsingError(curLineText, workdayIDValue, lookupValueValue, additionalDataValue, "", failedFields.Substring(0, Math.Min(failedFields.Length, 255)), "The following columns failed to parse: " + failedFields.Substring(0, failedFields.Length - 1));
                    }
                    if (totalLineErrors > maxErrorsToIgnore && maxErrorsToIgnore != -1)
                    {
                        AddRecordLevelParsingError(curLineText, workdayIDValue, lookupValueValue, additionalDataValue, "", failedFields.Substring(0, Math.Min(failedFields.Length, 255)), "The following columns failed to parse: " + failedFields.Substring(0, failedFields.Length - 1));
                        bool cancel = true;
                        ComponentMetaData.FireError(-1, "Custom Flat File Parser", "Maximum Number of Error Lines to Ignore (" + maxErrorsToIgnore.ToString() + ") exceeded in file \"" + fileFullPath + "\".", "", 0, out cancel);
                        parser.ReadToEnd(); //Don't bother reading the rest of the input records.
                    }
                }
                //Create a new output record buffer:
                mainOutputBuffer.NextRow();
            }
        }
        parser.Close(); //Release the file.

    }


    public override void InputConfigurationParameter_ProcessInput(InputConfigurationParameterBuffer Buffer)
    {
        bool alreadyProcessedInput = false; //Only actually process one record.

        //Process the input variables from the FIRST ROW ENCOUNTERED ONLY!!!
        // (user can pipe in through a SQL query or other means, but only the first file encountered will be parsed)
        while (Buffer.NextRow())
        {
            if (!alreadyProcessedInput)
            {
                InputConfigurationParameter_ProcessInputRow(Buffer);
                alreadyProcessedInput = true;
            }
        }

        //After the last record in the last buffer segment is reached, 
        if (Buffer.EndOfRowset())
        {
            //Check value of readyToParse before actually parsing file.  It could be set to false if
            //the headers were provided as an input string (instead of being picked up from a header line in the file)
            //but there were issues with the headers (e.g. a missing mandatory field, missing field where not allowed, etc.)
            if (readyToParse)
                ParseFlatFile();
            //Log a file-level entry with the results of the parsing (if any was performed)
            AddFileLevelParseLog();
        }

    }

    //Read input records.  By design, the script should only get one input 
    //record, which it only needs so that the data in the Derived Column that holds
    //parameters can be retrieved.  However, it should be noted that if Input0 gets multiple 
    //rows ONLY THE FIRST ROW will be used.   
    public override void InputConfigurationParameter_ProcessInputRow(InputConfigurationParameterBuffer Row)
    {
        //Set variables to the values in the input row (or defaults where the corresponding input column "_IsNull" value is true)
        fileLocation = !Row.FileLocation_IsNull ? Row.FileLocation : "";
        fileName = !(Row.FileName_IsNull) ? Row.FileName : "";
        headerLineCount = !(Row.HeaderLineCount_IsNull) ? Row.HeaderLineCount : 1;
        columnHeaderLine = !(Row.ColumnHeaderLine_IsNull) ? Row.ColumnHeaderLine : 1;
        columnHeaderList = !(Row.ColumnHeaderList_IsNull) ? Row.ColumnHeaderList : "";
        maxLinesToProcess = !(Row.MaxLinesToProcess_IsNull) ? Row.MaxLinesToProcess : -1;
        maxErrorsToIgnore = !(Row.MaxErrorsToIgnore_IsNull) ? Row.MaxErrorsToIgnore : 100;
        maxEventsToLog = !(Row.MaxEventsToLog_IsNull) ? Row.MaxEventsToLog : 100;
        parseLogLevel = !(Row.ParseLogLevelAEAllorErrorsOnly_IsNull) ? Row.ParseLogLevelAEAllorErrorsOnly : "E";
        allowExtraColumnsYN = !(Row.AllowExtraColumnsYN_IsNull) ? Row.AllowExtraColumnsYN : "";
        allowMissingColumnsYN = !(Row.AllowMissingColumnsYN_IsNull) ? Row.AllowMissingColumnsYN : "";
        columnNamesCaseSensitive = !(Row.ColumnNamesCaseSensitiveYN_IsNull) ? Row.ColumnNamesCaseSensitiveYN : "N";
        truncateStringValuesYN = !(Row.TruncateStringValuesYN_IsNull) ? Row.TruncateStringValuesYN : "Y";
        stripUnicodeFromNonUnicodeYN = !(Row.StripUnicodefromNonUnicodeYN_IsNull) ? Row.StripUnicodefromNonUnicodeYN : "N";
        convertThreeCharTzsToOffsetYN = !(Row.ConvertThreeCharTimezonedtoOffsetsYN_IsNull) ? Row.ConvertThreeCharTimezonedtoOffsetsYN : "N";
        fixDateValuesYN = !(Row.FixDateValuesYN_IsNull) ? Row.FixDateValuesYN : "Y";
        earliestAllowableYear = !(Row.EarliestAllowableYear_IsNull) ? Row.EarliestAllowableYear : 0;
        allowableDateFormats = !(Row.AllowableDateFormats_IsNull) ? Row.AllowableDateFormats : ":";
        convertToTimeZone = !(Row.ConverttoTimeZone_IsNull) ? Row.ConverttoTimeZone : "";
        workdayIDColumn = !(Row.WorkdayIDColumn_IsNull) ? Row.WorkdayIDColumn : "";
        lookupValueColumn = !(Row.LookupValueColumn_IsNull) ? Row.LookupValueColumn : "";
        additionalDataColumn = !(Row.AdditionalDataColumn_IsNull) ? Row.AdditionalDataColumn : "";
        notNullColumns = !(Row.NotNullColumns_IsNull) ? Row.NotNullColumns : "";
        mandatoryColumns = !(Row.MandatoryColumns_IsNull) ? Row.MandatoryColumns : "";
        nonTruncateableColumns = !(Row.NonTruncateableColumns_IsNull) ? Row.NonTruncateableColumns : "";
        columnRegexPatterns = !(Row.ColumnRegexPatterns_IsNull) ? Row.ColumnRegexPatterns : "";
        fileNameOutputColumn = !(Row.FileNameOutputColumn_IsNull) ? Row.FileNameOutputColumn : "";
        recordTextOutputColumn = !(Row.RecordTextOutputColumn_IsNull) ? Row.RecordTextOutputColumn : "";

        failOnExtraColumnYN = !(Row.FailOnExtraColumnYN_IsNull) ? Row.FailOnExtraColumnYN : "N";
        failOnMissingColumnYN = !(Row.FailOnMissingColumnYN_IsNull) ? Row.FailOnMissingColumnYN : "N";
        failOnMissingMandatoryColumnInHeaderYN = !(Row.FailOnMissingMandatoryColumnInHeaderYN_IsNull) ? Row.FailOnMissingMandatoryColumnInHeaderYN : "N";
        failOnMissingMandatoryColumnInLineYN = !(Row.FailOnMissingMandatoryColumnInLineYN_IsNull) ? Row.FailOnMissingMandatoryColumnInLineYN : "N";

        //Only make column names case sensitive if input variable ColumnNamesCaseSensitiveYN is "Y"
        if (columnNamesCaseSensitive == "Y")
        {
            //set the comparer to Ordinal (i.e. case sensitive)
            this.colCaseSensitivity = StringComparer.Ordinal;

            //Re-add the IDTSOutputColumn100 objects to a new case-sensitive version of mainOutputColumnsByName 
            Dictionary<string, IDTSOutputColumn100> tmpMainOutputColumnsByName = new Dictionary<string, IDTSOutputColumn100>();
            foreach (string k in mainOutputColumnsByName.Keys)
            {
                tmpMainOutputColumnsByName.Add(k, mainOutputColumnsByName[k]);
            }
            mainOutputColumnsByName = tmpMainOutputColumnsByName;
            //Re-create the other column name Dictionary and HashSet objects as case-sensitive versions
            flatfileColumnsByName = new Dictionary<string, int>();
            columnRegexPatternMap = new Dictionary<string, Regex>();
        }

        //Process input variables that are lists (not-null columns, mandatory columns, date formats, and regex patterns for columns)
        mandatoryColumnList.Clear();
        if (mandatoryColumns != "")
            mandatoryColumnList = new HashSet<string>(mandatoryColumns.Split(','), colCaseSensitivity);
        notNullColumnList.Clear();
        if (notNullColumns != "")
            notNullColumnList = new HashSet<string>(this.notNullColumns.Split(','), colCaseSensitivity);
        nonTruncateableColumnList.Clear();
        if (nonTruncateableColumns != "")
            nonTruncateableColumnList = new HashSet<string>(this.nonTruncateableColumns.Split(','), colCaseSensitivity);
        if (allowableDateFormats != "")
            dateFormatArray = Regex.Split(allowableDateFormats, @"(?<!($|[^\\])(\\\\)*?\\)\,");
        columnRegexPatternMap.Clear();
        if (columnRegexPatterns != "")
        {
            //Split the string into substrings on the semi-colon
            foreach (string colpat in Regex.Split(columnRegexPatterns, @"(?<!($|[^\\])(\\\\)*?\\)\;"))
            {
                //Split the column:pattern entry into individual parts
                string[] splitpat = Regex.Split(colpat, @"(?<!($|[^\\])(\\\\)*?\\)\:");
                //If it looks like a valid entry, attempt to add it to the map
                if (splitpat.Length == 2 && splitpat[0] != "" && splitpat[1] != "")
                {
                    try
                    {
                        //Try to create a new Regex object
                        Regex newpattern = new Regex(splitpat[1]);
                        columnRegexPatternMap.Add(splitpat[0], newpattern);
                    }
                    catch
                    {
                        //Do nothing - fail gently if user formats the ColumnRegexPatterns input variable incorrectly
                    }
                }
            }

        }

        //Process the column header list (if one is given)
        if (!columnHeaderList.Trim().Equals(""))
        {
            //Set up some variables for column presence checking
            bool mandatoryHeadersOK = true; //assume all mandatory columns are found
            bool specialHeadersOK = true;   //assume Workday ID, Lookup Value and Additional Data columns are found (if requested)
            bool expectedHeadersOK = true;  //assume all expected columns are found
            bool extraHeadersOK = true;     //assume no extra columns are found
            bool duplicateHeadersOK = true; //assume no duplicate headers are found

            foreach (string colname in columnHeaderList.Trim().Split(','))
            {
                if (flatfileColumnsByName.ContainsKey(colname))
                {
                    AddFieldLevelParseLog(-1, fileFullPath, columnHeaderList, -1, -1, colname, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Duplicate column name found in input recordset.");
                    duplicateHeadersOK = false;
                }
                else
                {
                    flatfileColumnsByName.Add(colname, flatfileColumnsByName.Count);
                    flatfileColumnsByPosition.Add(flatfileColumnsByPosition.Count, colname);
                }
            }

            //Check against the list of columns in mandatoryColumnList
            foreach (string colname in mandatoryColumnList)
            {
                if (!flatfileColumnsByName.ContainsKey(colname))
                {
                    totalFieldCountErrors++;
                    mandatoryHeadersOK = false;
                    AddFieldLevelParseLog(-1, fileFullPath, "N/A", -1, -1, colname, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Mandatory column missing from input recordset.");
                }
            }
            if (workdayIDColumn != "" && !flatfileColumnsByName.ContainsKey(workdayIDColumn))
            {
                totalFieldCountErrors++;
                specialHeadersOK = false;
                AddFieldLevelParseLog(-1, fileFullPath, "N/A", -1, -1, workdayIDColumn, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Workday ID column requested but missing from input recordset.");
            }
            if (lookupValueColumn != "" && !flatfileColumnsByName.ContainsKey(lookupValueColumn))
            {
                totalFieldCountErrors++;
                specialHeadersOK = false;
                AddFieldLevelParseLog(-1, fileFullPath, "N/A", -1, -1, lookupValueColumn, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Lookup Value column requested but missing from input recordset.");
            }
            if (additionalDataColumn != "" && !flatfileColumnsByName.ContainsKey(additionalDataColumn))
            {
                totalFieldCountErrors++;
                specialHeadersOK = false;
                AddFieldLevelParseLog(-1, fileFullPath, "N/A", -1, -1, additionalDataColumn, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Additional Data column requested but missing from input recordset.");
            }
            //Check expected output column list and see if they are on the input
            foreach (string colname in mainOutputColumnsByName.Keys)
            {
                if (!flatfileColumnsByName.ContainsKey(colname))
                {
                    totalFieldCountErrors++;
                    expectedHeadersOK = false;
                    AddFieldLevelParseLog(-1, fileFullPath, "N/A", -1, -1, colname, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Column on output recordset but missing from input recordset.");
                }
            }
            //Check actual columns in file to see if all are on the output
            foreach (string colname in flatfileColumnsByName.Keys)
            {
                if (!mainOutputColumnsByName.ContainsKey(colname))
                {
                    totalFieldCountErrors++;
                    extraHeadersOK = false;
                    AddFieldLevelParseLog(-1, fileFullPath, "N/A", -1, -1, colname, "N/A", "N/A", "", "FAIL", "N", "N", "N", "Y", "N", "N", "Extra column found on input recordset.");
                }
            }

            //If a mandatory column was missing, then fail package or quit
            if (!mandatoryHeadersOK)
            {
                if (failOnMissingMandatoryColumnInHeaderYN == "Y")
                {
                    bool t = true;
                    this.ComponentMetaData.FireError(-1, ComponentMetaData.Name, "Mandatory Column Missing from Input File", null, 0, out t);
                }
                return;
            }
            //If Workday ID, Lookup Value or Additional Data columns are missing (if requested), then just quit.  Don't fail package.
            if (!specialHeadersOK)
                return;
            //If expected columns are missing and "Allow Missing Columns" is not "Y" then fail package or quit
            if (!expectedHeadersOK && allowMissingColumnsYN != "Y")
            {
                if (failOnMissingColumnYN == "Y")
                {
                    bool t = true;
                    this.ComponentMetaData.FireError(-1, ComponentMetaData.Name, "Expected Column Missing from Input File", null, 0, out t);
                }
                return;
            }
            //If an extra column was found and "Allow Extra Columns" is not "Y" then fail package or quit
            if (!extraHeadersOK && allowExtraColumnsYN != "Y")
            {
                if (failOnExtraColumnYN == "Y")
                {
                    bool t = true;
                    this.ComponentMetaData.FireError(-1, ComponentMetaData.Name, "Unexpected Column Found in Input File", null, 0, out t);
                }
                return;
            };
            //If a duplicate column was found then just quit
            if (!duplicateHeadersOK)
                return;


            //Process the desired convert-to timezone:
            if (convertToTimeZone != "")
            {
                //Attempt to create a new TimeZoneInfo object based on the string the user passed in
                //The convertToTimeZoneInfo object is already instantiated at declaration time as 
                //TimeZoneInfo.Local()
                //  NOTE: If this fails, the component will throw an exception.  This is the proper
                //  action, as it would not be good to load data at this point.
                convertToTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(convertToTimeZone);
            }
        }

        readyToParse = true; //If we reached this point, the parser may read the file.

    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class InputConfigurationParameterBuffer: ScriptBuffer

{
    public InputConfigurationParameterBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String FileLocation
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool FileLocation_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String FileName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
    }
    public bool FileName_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public Int32 HeaderLineCount
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[2]);
        }
    }
    public bool HeaderLineCount_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public Int32 ColumnHeaderLine
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[3]);
        }
    }
    public bool ColumnHeaderLine_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public String ColumnHeaderList
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
    }
    public bool ColumnHeaderList_IsNull
    {
        get
        {
            return IsNull(4);
        }
    }

    public Int32 MaxLinesToProcess
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[5]);
        }
    }
    public bool MaxLinesToProcess_IsNull
    {
        get
        {
            return IsNull(5);
        }
    }

    public Int32 MaxErrorsToIgnore
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[6]);
        }
    }
    public bool MaxErrorsToIgnore_IsNull
    {
        get
        {
            return IsNull(6);
        }
    }

    public Int32 MaxEventsToLog
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[7]);
        }
    }
    public bool MaxEventsToLog_IsNull
    {
        get
        {
            return IsNull(7);
        }
    }

    public String ParseLogLevelAEAllorErrorsOnly
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[8]);
        }
    }
    public bool ParseLogLevelAEAllorErrorsOnly_IsNull
    {
        get
        {
            return IsNull(8);
        }
    }

    public String AllowMissingColumnsYN
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[9]);
        }
    }
    public bool AllowMissingColumnsYN_IsNull
    {
        get
        {
            return IsNull(9);
        }
    }

    public String AllowExtraColumnsYN
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[10]);
        }
    }
    public bool AllowExtraColumnsYN_IsNull
    {
        get
        {
            return IsNull(10);
        }
    }

    public String TruncateStringValuesYN
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[11]);
        }
    }
    public bool TruncateStringValuesYN_IsNull
    {
        get
        {
            return IsNull(11);
        }
    }

    public String FixDateValuesYN
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[12]);
        }
    }
    public bool FixDateValuesYN_IsNull
    {
        get
        {
            return IsNull(12);
        }
    }

    public String AllowableDateFormats
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[13]);
        }
    }
    public bool AllowableDateFormats_IsNull
    {
        get
        {
            return IsNull(13);
        }
    }

    public String ConverttoTimeZone
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[14]);
        }
    }
    public bool ConverttoTimeZone_IsNull
    {
        get
        {
            return IsNull(14);
        }
    }

    public String WorkdayIDColumn
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[15]);
        }
    }
    public bool WorkdayIDColumn_IsNull
    {
        get
        {
            return IsNull(15);
        }
    }

    public String LookupValueColumn
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[16]);
        }
    }
    public bool LookupValueColumn_IsNull
    {
        get
        {
            return IsNull(16);
        }
    }

    public String AdditionalDataColumn
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[17]);
        }
    }
    public bool AdditionalDataColumn_IsNull
    {
        get
        {
            return IsNull(17);
        }
    }

    public String NotNullColumns
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[18]);
        }
    }
    public bool NotNullColumns_IsNull
    {
        get
        {
            return IsNull(18);
        }
    }

    public String MandatoryColumns
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[19]);
        }
    }
    public bool MandatoryColumns_IsNull
    {
        get
        {
            return IsNull(19);
        }
    }

    public String ColumnRegexPatterns
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[20]);
        }
    }
    public bool ColumnRegexPatterns_IsNull
    {
        get
        {
            return IsNull(20);
        }
    }

    public String FileNameOutputColumn
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[21]);
        }
    }
    public bool FileNameOutputColumn_IsNull
    {
        get
        {
            return IsNull(21);
        }
    }

    public String RecordTextOutputColumn
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[22]);
        }
    }
    public bool RecordTextOutputColumn_IsNull
    {
        get
        {
            return IsNull(22);
        }
    }

    public Int32 EarliestAllowableYear
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[23]);
        }
    }
    public bool EarliestAllowableYear_IsNull
    {
        get
        {
            return IsNull(23);
        }
    }

    public String NonTruncateableColumns
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[24]);
        }
    }
    public bool NonTruncateableColumns_IsNull
    {
        get
        {
            return IsNull(24);
        }
    }

    public String ColumnNamesCaseSensitiveYN
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[25]);
        }
    }
    public bool ColumnNamesCaseSensitiveYN_IsNull
    {
        get
        {
            return IsNull(25);
        }
    }

    public String FailOnExtraColumnYN
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[26]);
        }
    }
    public bool FailOnExtraColumnYN_IsNull
    {
        get
        {
            return IsNull(26);
        }
    }

    public String FailOnMissingColumnYN
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[27]);
        }
    }
    public bool FailOnMissingColumnYN_IsNull
    {
        get
        {
            return IsNull(27);
        }
    }

    public String FailOnMissingMandatoryColumnInHeaderYN
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[28]);
        }
    }
    public bool FailOnMissingMandatoryColumnInHeaderYN_IsNull
    {
        get
        {
            return IsNull(28);
        }
    }

    public String FailOnMissingMandatoryColumnInLineYN
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[29]);
        }
    }
    public bool FailOnMissingMandatoryColumnInLineYN_IsNull
    {
        get
        {
            return IsNull(29);
        }
    }

    public String StripUnicodefromNonUnicodeYN
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[30]);
        }
    }
    public bool StripUnicodefromNonUnicodeYN_IsNull
    {
        get
        {
            return IsNull(30);
        }
    }

    public String ConvertThreeCharTimezonedtoOffsetsYN
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[31]);
        }
    }
    public bool ConvertThreeCharTimezonedtoOffsetsYN_IsNull
    {
        get
        {
            return IsNull(31);
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class OutputFileDataBuffer: ScriptBuffer

{
    public OutputFileDataBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String noteextid
    {
        set
        {
            this[0] = value;
        }
    }
    public bool noteextid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String cmsnoteextid
    {
        set
        {
            this[1] = value;
        }
    }
    public bool cmsnoteextid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String date
    {
        set
        {
            this[2] = value;
        }
    }
    public bool date_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String notetype
    {
        set
        {
            this[3] = value;
        }
    }
    public bool notetype_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subject
    {
        set
        {
            this[4] = value;
        }
    }
    public bool subject_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String body
    {
        set
        {
            this[5] = value;
        }
    }
    public bool body_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String authoruserid
    {
        set
        {
            this[6] = value;
        }
    }
    public bool authoruserid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 authorintegrationid
    {
        set
        {
            this[7] = value;
        }
    }
    public bool authorintegrationid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String authorfirstname
    {
        set
        {
            this[8] = value;
        }
    }
    public bool authorfirstname_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String authorlastname
    {
        set
        {
            this[9] = value;
        }
    }
    public bool authorlastname_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(9);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String authorinstitutionalemail
    {
        set
        {
            this[10] = value;
        }
    }
    public bool authorinstitutionalemail_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(10);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 studentintegrationid
    {
        set
        {
            this[11] = value;
        }
    }
    public bool studentintegrationid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(11);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String studentuserid
    {
        set
        {
            this[12] = value;
        }
    }
    public bool studentuserid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(12);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String studentid
    {
        set
        {
            this[13] = value;
        }
    }
    public bool studentid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(13);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String studentfirstname
    {
        set
        {
            this[14] = value;
        }
    }
    public bool studentfirstname_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(14);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String studentlastname
    {
        set
        {
            this[15] = value;
        }
    }
    public bool studentlastname_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(15);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String trackingitemextid
    {
        set
        {
            this[16] = value;
        }
    }
    public bool trackingitemextid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(16);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 trackingrulename
    {
        set
        {
            this[17] = value;
        }
    }
    public bool trackingrulename_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(17);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String appointmentitemextid
    {
        set
        {
            this[18] = value;
        }
    }
    public bool appointmentitemextid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(18);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class OutputRecordLevelParseErrorsBuffer: ScriptBuffer

{
    public OutputRecordLevelParseErrorsBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String FileName
    {
        set
        {
            this[0] = value;
        }
    }
    public bool FileName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FailedLineText
    {
        set
        {
            this[1] = value;
        }
    }
    public bool FailedLineText_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String LookupWorkdayID
    {
        set
        {
            this[2] = value;
        }
    }
    public bool LookupWorkdayID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String LookupValue
    {
        set
        {
            this[3] = value;
        }
    }
    public bool LookupValue_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String AdditionalData
    {
        set
        {
            this[4] = value;
        }
    }
    public bool AdditionalData_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ErrorCode
    {
        set
        {
            this[5] = value;
        }
    }
    public bool ErrorCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ErrorColumn
    {
        set
        {
            this[6] = value;
        }
    }
    public bool ErrorColumn_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String Message
    {
        set
        {
            this[7] = value;
        }
    }
    public bool Message_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class OutputFieldLevelParseLoggingBuffer: ScriptBuffer

{
    public OutputFieldLevelParseLoggingBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 ParseControlID
    {
        set
        {
            this[0] = value;
        }
    }
    public bool ParseControlID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ParseSourceFile
    {
        set
        {
            this[1] = value;
        }
    }
    public bool ParseSourceFile_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ParseSourceLineText
    {
        set
        {
            this[2] = value;
        }
    }
    public bool ParseSourceLineText_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 ParseSourceLineOffset
    {
        set
        {
            this[3] = value;
        }
    }
    public bool ParseSourceLineOffset_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TargetFieldNumber
    {
        set
        {
            this[4] = value;
        }
    }
    public bool TargetFieldNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String TargetFieldName
    {
        set
        {
            this[5] = value;
        }
    }
    public bool TargetFieldName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String TargetFieldDataType
    {
        set
        {
            this[6] = value;
        }
    }
    public bool TargetFieldDataType_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String TargetFieldNullable
    {
        set
        {
            this[7] = value;
        }
    }
    public bool TargetFieldNullable_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ParseFieldText
    {
        set
        {
            this[8] = value;
        }
    }
    public bool ParseFieldText_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ParsePassFailResult
    {
        set
        {
            this[9] = value;
        }
    }
    public bool ParsePassFailResult_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(9);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ParseTruncationError
    {
        set
        {
            this[10] = value;
        }
    }
    public bool ParseTruncationError_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(10);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ParseNullabilityError
    {
        set
        {
            this[11] = value;
        }
    }
    public bool ParseNullabilityError_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(11);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ParseDataTypeError
    {
        set
        {
            this[12] = value;
        }
    }
    public bool ParseDataTypeError_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(12);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ParseFieldCountError
    {
        set
        {
            this[13] = value;
        }
    }
    public bool ParseFieldCountError_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(13);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ParseFormatError
    {
        set
        {
            this[14] = value;
        }
    }
    public bool ParseFormatError_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(14);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ParseOtherError
    {
        set
        {
            this[15] = value;
        }
    }
    public bool ParseOtherError_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(15);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ParseErrorMessage
    {
        set
        {
            this[16] = value;
        }
    }
    public bool ParseErrorMessage_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(16);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class OutputFileLevelParseLoggingBuffer: ScriptBuffer

{
    public OutputFileLevelParseLoggingBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String ParseSourceFile
    {
        set
        {
            this[0] = value;
        }
    }
    public bool ParseSourceFile_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TotalLinesParsed
    {
        set
        {
            this[1] = value;
        }
    }
    public bool TotalLinesParsed_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TotalLinesPassed
    {
        set
        {
            this[2] = value;
        }
    }
    public bool TotalLinesPassed_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TotalLinesFailed
    {
        set
        {
            this[3] = value;
        }
    }
    public bool TotalLinesFailed_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TotalFieldsParsed
    {
        set
        {
            this[4] = value;
        }
    }
    public bool TotalFieldsParsed_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TotalFieldsPassed
    {
        set
        {
            this[5] = value;
        }
    }
    public bool TotalFieldsPassed_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TotalFieldsFailed
    {
        set
        {
            this[6] = value;
        }
    }
    public bool TotalFieldsFailed_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TotalTruncationErrors
    {
        set
        {
            this[7] = value;
        }
    }
    public bool TotalTruncationErrors_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TotalNullabilityErrors
    {
        set
        {
            this[8] = value;
        }
    }
    public bool TotalNullabilityErrors_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TotalDataTypeErrors
    {
        set
        {
            this[9] = value;
        }
    }
    public bool TotalDataTypeErrors_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(9);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TotalFieldCountErrors
    {
        set
        {
            this[10] = value;
        }
    }
    public bool TotalFieldCountErrors_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(10);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TotalFormatErrors
    {
        set
        {
            this[11] = value;
        }
    }
    public bool TotalFormatErrors_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(11);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 TotalOtherErrors
    {
        set
        {
            this[12] = value;
        }
    }
    public bool TotalOtherErrors_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(12);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public OutputFileDataBuffer OutputFileDataBuffer;

    public OutputRecordLevelParseErrorsBuffer OutputRecordLevelParseErrorsBuffer;

    public OutputFieldLevelParseLoggingBuffer OutputFieldLevelParseLoggingBuffer;

    public OutputFileLevelParseLoggingBuffer OutputFileLevelParseLoggingBuffer;

    int InputsFinished = 0;

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input - Configuration Parameter", StringComparison.Ordinal))
        {
            InputConfigurationParameter_ProcessInput(new InputConfigurationParameterBuffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

        if (Buffer.EndOfRowset)
        {
            InputsFinished = InputsFinished + 1;
            if (InputsFinished == 1)
            {
                FinishOutputs();
                MarkOutputsFinished();
            }
        }

    }

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != OutputFileDataBuffer)
        {
            OutputFileDataBuffer.SetEndOfRowset();
            OutputFileDataBuffer = null;
        }

        if (null != OutputRecordLevelParseErrorsBuffer)
        {
            OutputRecordLevelParseErrorsBuffer.SetEndOfRowset();
            OutputRecordLevelParseErrorsBuffer = null;
        }

        if (null != OutputFieldLevelParseLoggingBuffer)
        {
            OutputFieldLevelParseLoggingBuffer.SetEndOfRowset();
            OutputFieldLevelParseLoggingBuffer = null;
        }

        if (null != OutputFileLevelParseLoggingBuffer)
        {
            OutputFileLevelParseLoggingBuffer.SetEndOfRowset();
            OutputFileLevelParseLoggingBuffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output - File Data"))
            {
                OutputFileDataBuffer = new OutputFileDataBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output - Record Level Parse Errors"))
            {
                OutputRecordLevelParseErrorsBuffer = new OutputRecordLevelParseErrorsBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output - Field Level Parse Logging"))
            {
                OutputFieldLevelParseLoggingBuffer = new OutputFieldLevelParseLoggingBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output - File Level Parse Logging"))
            {
                OutputFileLevelParseLoggingBuffer = new OutputFileLevelParseLoggingBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

    }

    public virtual void CreateNewOutputRows()
    {
    }

    public virtual void InputConfigurationParameter_ProcessInput(InputConfigurationParameterBuffer Buffer)
    {
        while (Buffer.NextRow())
        {
            InputConfigurationParameter_ProcessInputRow(Buffer);
        }
    }

    public virtual void InputConfigurationParameter_ProcessInputRow(InputConfigurationParameterBuffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_6d69f28d6f704f998cd82fa2b2d3f760.Properties.Settings.get_Default():SC_6d69f28d6f704f998cd82fa2b2d3f760.Properties.Sett" +
    "ings")]

namespace SC_6d69f28d6f704f998cd82fa2b2d3f760.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_6d69f28d6f704f998cd82fa2b2d3f760</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_6d69f28d6f704f998cd82fa2b2d3f760</msb:DisplayName>
    <msb:ProjectId>{21C13A06-8ABA-429C-B441-03D934980864}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_6d69f28d6f704f998cd82fa2b2d3f760.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_6d69f28d6f704f998cd82fa2b2d3f760")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_6d69f28d6f704f998cd82fa2b2d3f760")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_6d69f28d6f704f998cd82fa2b2d3f760.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_6d69f28d6f704f998cd82fa2b2d3f760.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_6d69f28d6f704f998cd82fa2b2d3f760.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_6d69f28d6f704f998cd82fa2b2d3f760.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_6d69f28d6f704f998cd82fa2b2d3f760.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0E8B4E4774024C04A3081ADD15F981F7.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[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
XwEAcHJhAQBwcmsBAHByawEAcHJrAQBwcm8BAHByawEAcHJrAQBwci0DAHAoAwAABgJ7JAAABG83
AAAKbzgAAAoLK3YSASg5AAAKEw8CeycAAAQRD28wAAAKLV4CAns4AAAEF1h9OAAABBYTCQIVAnsD
AAAEcg8BAHAVFREPcg8BAHByDwEAcHJfAQBwcmEBAHByawEAcHJrAQBwcmsBAHBybwEAcHJrAQBw
cmsBAHBytAMAcCgDAAAGEgEoOgAACi2B3g4SAf4WCAAAG28eAAAK3AJ7JwAABG87AAAKbzwAAAoT
ECt2EhAoPQAAChMRAnskAAAEERFvPgAACi1eAgJ7OAAABBdYfTgAAAQWEwoCFQJ7AwAABHIPAQBw
FRUREXIPAQBwcg8BAHByXwEAcHJhAQBwcmsBAHByawEAcHJrAQBwcm8BAHByawEAcHJrAQBwci4E
AHAoAwAABhIQKD8AAAotgd4OEhD+FgoAABtvHgAACtwRBy02AnsRAAAEcm8BAHAoIAAACiwjFxMS
AigRAAAKFQIoEQAACm9AAAAKcnwEAHAUFhISb0EAAAoqEQgtASoRCS1IAnsOAAAEcm8BAHAoNgAA
Ciw2AnsQAAAEcm8BAHAoIAAACiwjFxMTAigRAAAKFQIoEQAACm9AAAAKcs4EAHAUFhITb0EAAAoq
EQotSAJ7DQAABHJvAQBwKDYAAAosNgJ7DwAABHJvAQBwKCAAAAosIxcTFAIoEQAAChUCKBEAAApv
QAAACnIeBQBwFBYSFG9BAAAKKhELLQEqAnsaAAAEcl8BAHAoNgAACiwRAgJ7GgAABCiWAAAKfS8A
AAQCF30pAAAEKgAAAAFAAAACAH4DKKYDDgAAAAAAAC8FHk0FAyYAAAECAF8Gg+IGDgAAAAACAJYI
gxkJDgAAAAACADkJg7wJDgAAAAATMAIA+AEAAAAAAAACcl8BAHB9AQAABAJyXwEAcH0CAAAEAnJf
AQBwfQMAAAQCcl8BAHB9BAAABAJyXwEAcH0FAAAEAhd9BgAABAIXfQcAAAQCcl8BAHB9CAAABAIV
fQkAAAQCH2R9CgAABAIfZH0LAAAEAnInAABwfQwAAAQCcm8BAHB9DQAABAJybwEAcH0OAAAEAnJr
AQBwfQ8AAAQCcmsBAHB9EAAABAJyawEAcH0RAAAEAnJrAQBwfRIAAAQCcm8BAHB9EwAABAJybwEA
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
KLEAAApvsgAACnOzAAAKgEQAAAR+RAAABCoafkUAAAQqHgKARQAABCoafkYAAAQqHgIotAAACiou
c94AAAaARgAABCpCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAADEIgAAI34AADAj
AACsJAAAI1N0cmluZ3MAAAAA3EcAAHgLAAAjVVMAVFMAABAAAAAjR1VJRAAAAGRTAACcBQAAI0Js
b2IAAAAAAAAAAgAAAVcVogkJAQAAAPoBMwAWAAABAAAASgAAAAwAAABGAAAA3wAAAKwAAAC0AAAA
EAAAAAUAAAAHAAAAtQAAALYAAAANAAAAAQAAAAgAAAABAAAAAAACDQEAAAAAAAYA0Qp1HQYAZQt1
HQYAHQpXHQ8A6R0AAAYASgrBGAYAtArBGAYAlQrBGAYATAvBGAYA8QrBGAYACgvBGAYAYQrBGAYA
fArjCwoAJQt+CAYAyQAiBAYA2RtGFw4AGgCwGxIAtRp+CBYAlAAiBBoADiQWHwYAlhlGFwYAHR01
Hw4AZACwGwYAxQZGFwoArxl+CB4A6BvFAx4ASxnFA0sALB0AADsAAxkAAHMALB0AACIA9wiIGwYA
chlGFwYArQxGFwYAdiFGFzsALB0AAAYAugAiBAYAaRdGFwYA/wVGFwYAYCFGFwoATht+CAoAPCJ+
CAYAAApXHQYAcBuVHQYAoxmsGBoA0AnBDBoAMQrBDBoAfgmXGAYA5Ql1HQ4AAQCwGw4ATACwGwYA
EwxGFw4ALgCwGwYAeQxGFwYAtABGFwYAYRdGFwYAkBpGFwYAMR6sGAYAKwhGFwYAnAtGFwYA9gBG
FwYA4wBGFwYAAgdGFwYA1AZGFwYApQtGFwYA7ABGFwYAoQBGFwYA2QBGFwYAYxpGFwYAcgAiBAYA
gAAiBAYAYhlGFwYAfBlGFwYA+whGFwYA2wZGFwYATSTBGAAAAAAgAQAAAAABAAEAAQAQAHYXAAAg
AAEAAQABABAACRsAAJ0AOwAKAAEAEACgGgAAnQA7AE0AAQAQACsbAACdADsAdwABABAAxBoAAJ0A
OwCLAAEAEADnGgAAnQA7ALEAAQAQAB4iAAChADsAzwABABAASB8AAJkAQgDXAAEAEAAnHgAAmQBD
ANgAAAAQAJwd+B2ZAEQA2QAAARAAgx74HbkARgDdAAEAihjxAgEAggfxAgEAfgzxAgEAJBjxAgEA
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
AAACAGMBAAADALgLAAAEAAoEAAAFAEUGAAAGAP8XAAAHAIcGAAABAGUbAAABAAokAAABAGUbAAAC
AF4eAAADANMZAAABAGUbAAACAF4eAAADANMZAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQL
AAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAAB
AMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQL
AAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAAB
AMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAGUbAAACAF4eAAADANMZAAABAMQLAAABAMQL
AAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAAB
AMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAGUbAAACAF4eAAADANMZAAABAMQLAAABAMQL
AAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAAB
AMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQL
AAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAAB
AMQLAAABAMQLAAABAMQLAAABAMQLAAABAGUbAAACAF4eAAADANMZAAABAMQLAAABAMQLAAABAMQL
AAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAAB
AMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAMQL
AAABAMQLAAABAMQLAAABAMQLAAABAMQLAAABAEsBAAACAIsHAAADAGUbAAAEANMZAAABACkhAAAC
AE0dAAADAIofAAAEANMZAAABAGUbAAABAAokAAABAEIiAAABAEIiAAABAMQLCQA3HQEAEQA3HQYA
GQA3HQoAKQA3HRAAMQA3HRAAOQA3HRAAQQA3HRAASQA3HRAAUQA3HRAAWQA3HRAAYQA3HRAAaQA3
HQYASQE3HQYAaQE3HRUAeQE3HQYAQQGDCwYAQQHiAykAgQHuGC8AiQEpHTUAqQBMIjoAsQA7Bz4A
kQGMHkIAsQDTGEcAmQEpHTUAgQA7Bz4ADABqBFUAFABYImQAFABqBFUAqQBfI2gAuQCyCQYAQQFT
AXAAkQF5JHcAkQGLDGQAoQFyF30AkQEaDIMAkQFNFz4AmQBxDHcAkQFOIUsBHABqBFUAyQA3HRAA
yQCSH1gByQBAHl4ByQCAH2MByQBqHWgBqQH9Cz4A+QBPBj4AkQFOIW0BJAA9JHoBJABYImQAJABq
BFUALAApHYYBNABMIpUBNABfI2gAkQGFJHcADABFIZoBPAApHa0BRABMIpUBRABfI2gAJABFIZoB
TAApHa0BVABMIpUBDAA9JHoBVABfI2gAgQE7Bz4AgQEiHM4BJAA0F9kBiQDJIwYAFAA0F9kBDAA0
F9kBgQDHCOABMQH9Cz4AgQCLDGQAkQFOIeUBgQBrGGQAkQFOIe0BgQCPBmQALACTHnoBiQAsFwEA
iQDQIwYAsQHBCfQBiQBeF/kBAQHBCf8BiQCqDAYCHAApHQ4CXABMIiICZAA1JJUBZACqCzYCmQAp
Bu0BXABfI2gAWQFpCTsCCQFVIUECCQHBCVACCQE0CFcCoQBMCF0CCQEkGmQACQGWDGQACQEUJGQA
CQFEHWQACQGOC2QACQEOBmQACQEZBmQAyQE3HWgCiQAoCHMCIQHBCXsCiQBECIICiQBzIYoCKQHB
CZICiQD8BZkC0QHBCaECiQCZC6YC2QHBCawCiQDzALECqQHBCbcCiQCxALwC4QHBCcICiQDgAMcC
bAA9JHoBbAA0F9kBmQBxDEIAiQAQDNUC6QHBCdsCiQD/BuAC8QHBCeYCiQDRBusCkQGmJPEC+QHB
CfQCiQCiC/kCAQLBCf8CiQDpAAQDCQLBCQoDiQCeAA8DEQLBCRUDiQDWABoDkQGAGz4AyQAEBj4A
iQAGJGgAyQD4A2gAyQCsCQYAeQC1DFQDDAA3HQYAJAA3HQYAbAA3HQYALABdGgYAkQHgIVkDLAA3
HWADmQDgIXIDbABdGgYAmQA3HRAAbABqBFUAoQBTBHkDHAA3HQYAeQCWCVQDDAA3HX8DFAA3HQYA
JAA3HX8DLAA3HX8DbAA3HX8DoQCgDIoDOQE3HY8DOQFlG5kDOQFeHp0DiQAGDGMBOQElF6EDiQCo
AKYDOQEGJGgAOQHUIWgAOQE9F6sDOQEsFwEAMQI3HRAAOQHJIwYAOQHRIQYAQQE3HQYAkQGMHrED
QQFyHrkDiQDBIWgAMQE3HQYAQQLtBr8DQQJJJMgDUQE3Hc4DcQE3HQYALgALANUELgATAN4ELgAb
AP0ELgAjAAYFLgArAC8FLgAzAC8FLgA7AC8FLgBDAAYFLgBLADUFLgBTAC8FLgBbAEwFQwBjAJYF
YwFrAJYFwQh7AJYFaRZzAP0EiRZzAP0EHABsAIkAIAMkAwMAAQAEAEEABQBnAAYAdwAHAJkACwCz
AAwAtQAAAH0YuAQAAJ0TvAQAAHkHuAQAAGIRvAQAAGYiwAQAAGwWvAQAAFwIwAQAAP4RvAQAAOci
uAQAAIcWvAQAANEgwAQAANwVvAQAAB0JwAQAAGoSvAQAAFMMwAQAAK4SvAQAAFokuAQAAAYXvAQA
AFIDuAQAAK8OvAQAACYDuAQAAJAOvAQAAPQCuAQAAG4OvAQAANACuAQAAFMOvAQAAPkguAQAAPkV
vAQAALUIuAQAABoSvAQAAIUXuAQAAOwSvAQAANcXuAQAACcTvAQAAKkXuAQAAAcTvAQAANIeuAQA
AMsUvAQAAPQeuAQAAOUUvAQAAFgfuAQAAAEVvAQAAA8YuAQAAFsTvAQAAD0YuAQAAHsTvAQAADEa
wAQAALUTvAQAAKAeuAQAAKkUvAQAAAMCuAQAALsNvAQAACICuAQAAOENvAQAAE4CuAQAAAAOvAQA
AH4CuAQAACEOvAQAALUBuAQAAIsNvAQAAJQBuAQAAGMNvAQAAIIDuAQAANAOvAQAAMMFuAQAAGIQ
vAQAAMAFuAQAAF8QvAQAAMsJuAQAAIcSvAQAAAQJuAQAAFYSvAQAAGshuAQAABkWvAQAADAkuAQA
APYWvAQAAIEFuAQAAAQQvAQAAFAFwAQAAMUPvAQAAAMIuAQAAMcRvAQAANwHuAQAAJIRvAQAAOkM
uAQAAMgSvAQAAGgFwAQAAOQPvAQAAJIFuAQAABwQvAQAAKQFuAQAADUQvAQAABcIuAQAAOIRvAQA
AO8HuAQAAKwRvAQAANEFuAQAAHcQvAQAAMcHwAQAAHYRvAQAAOcFuAQAAJQQvAQAAHkHuAQAAGIR
vAQAAI4juAQAAL0WvAQAAGMBuAQAAEgNvAQAALgLuAQAAJcSvAQAAAoEuAQAAAAPvAQAAEUGuAQA
ALQQvAQAAP8XuAQAAEQTvAQAAIcGuAQAAOYQvAQAAC0BwAQAAC4NvAQAAA0HuAQAABgRvAQAAKEj
uAQAANcWvAQAAIkhwAQAACwWvAQAAGwawAQAANYTvAQAAEgHuAQAADMRvAQAANgIuAQAADcSvAQA
AJ0GuAQAAPkQvAQAAGwjuAQAAKMWvAQAAPYhuAQAAE0WvAQAAEscuAQAABEUvAQAAPEcuAQAAIgU
vAQAAPwbuAQAAPMTvAQAAMMcuAQAAGgUvAQAAJ0cuAQAAEwUvAQAAHkcuAQAADEUvAQAAGsGuAQA
ANwQvAQAAA0HuAQAABgRvAQAAP8EwAQAAHAPvAQAADsFwAQAAKkPvAQAAMIEwAQAADcPvAQAANcE
wAQAAFMPvAQAACUFwAQAAIwPvAQAAKwEwAQAABoPvAQAAPEfwAQAAD8VvAQAAJ8gwAQAALoVvAQA
AMUfwAQAACAVvAQAAG8gwAQAAJkVvAQAAEcgwAQAAHwVvAQAACEgwAQAAGAVvAQAAHAbxAQAAHYJ
ygQAAOoh0AQCAAsAAwACAAwABQACAA0ABwACAA4ACQACAA8ACwACABAADQACABEADwACABIAEQAC
ABMAEwACABQAFQACABUAFwACABYAGQACABcAGwACABgAHQACABkAHwACABoAIQACABsAIwACABwA
JQACAB0AJwACAB4AKQACAB8AKwACACAALQACACEALwACACIAMQACACMAMwACACQANQACACUANwAC
ACYAOQACACcAOwACACgAPQACACkAPwACACoAQQACACsAQwACACwARQACAC0ARwACAC4ASQACAC8A
SwACADAATQACADEATwACADIAUQACADMAUwACADQAVQACADUAVwACADYAWQACADcAWwACADgAXQAC
ADkAXwACADoAYQACADsAYwACADwAZQACAD0AZwACAD4AaQACAD8AawACAEAAbQACAEEAbwACAEIA
cQACAEMAcwACAEQAdQACAEUAdwACAEYAeQACAEcAewACAEgAfQACAEkAfwACAEoAgQABAE4AgwAB
AE8AhQABAFAAhwABAFEAiQABAFIAiwABAFMAjQABAFQAjwABAFUAkQABAFYAkwABAFcAlQABAFgA
lwABAFkAmQABAFoAmwABAFsAnQABAFwAnwABAF0AoQABAF4AowABAF8ApQABAGAApwABAGEAqQAB
AGIAqwABAGMArQABAGQArwABAGUAsQABAGYAswABAGcAtQABAGgAtwABAGkAuQABAGoAuwABAGsA
vQABAGwAvwABAG0AwQABAG4AwwABAG8AxQABAHAAxwABAHEAyQABAHIAywABAHMAzQABAHgAzwAB
AHkA0QABAHoA0wABAHsA1QABAHwA1wABAH0A2QABAH4A2wABAH8A3QABAIAA3wABAIEA4QABAIIA
4wABAIMA5QABAIQA5wABAIUA6QABAIYA6wABAIcA7QABAIwA7wABAI0A8QABAI4A8wABAI8A9QAB
AJAA9wABAJEA+QABAJIA+wABAJMA/QABAJQA/wABAJUAAQEBAJYAAwEBAJcABQEBAJgABwEBAJkA
CQEBAJoACwEBAJsADQEBAJwADwEBAJ0AEQEBAJ4AEwEBAJ8AFQEBAKAAFwEBAKEAGQEBAKIAGwEB
AKMAHQEBAKQAHwEBAKUAIQEBAKYAIwEBAKcAJQEBAKgAJwEBAKkAKQEBAKoAKwEBAKsALQEBAKwA
LwEBAK0AMQEBALIAMwEBALMANQEBALQANwEBALUAOQEBALYAOwEBALcAPQEBALgAPwEBALkAQQEB
ALoAQwEBALsARQEBALwARwEBAL0ASQEBAL4ASwEBAL8ATQEBAMAATwEBAMEAUQEBAMIAUwEBAMMA
VQEBAMQAVwEBAMUAWQEBAMYAWwEBAMcAXQEBAMgAXwEBAMkAYQEBAMoAYwEBAMsAZQECANoAZwEC
ANsAaQEBANwAaQECAN0AawFNAF0AUQFzAYABjwGlAbgBwAHHARoCLgLNAgSAAAABAAAAAAAAAAAA
AAAAAPwAAAAEAAAAAAAAAAAAAADWAxkEAAAAABAAAAAAAAAAAAAAAN8DhiIAAAAAEAAAAAAAAAAA
AAAA3wMAGgAAAAAQAAAAAAAAAAAAAADfAwkjAAAAAAQAAAAAAAAAAAAAANYDDQkAAAAABAAAAAAA
AAAAAAAA1gNGFwAAAAAKAAAAAAAAAAAAAADoAz0EAAAAABAAAAAAAAAAAAAAAN8D3RkAAAAAAAAA
AAEAAACmHQAAAAAAAABJRFRTQ29tcG9uZW50TWV0YURhdGExMDAASURUU091dHB1dENvbHVtbjEw
MABJRFRTT3V0cHV0Q29sdW1uQ29sbGVjdGlvbjEwMABJRFRTT3V0cHV0Q29sbGVjdGlvbjEwMABJ
RFRTT3V0cHV0MTAwAElFbnVtZXJhYmxlYDEASUVxdWFsaXR5Q29tcGFyZXJgMQBIYXNoU2V0YDEA
U2V0VUludDMyAEdldEludDMyAFNldEludDMyAEtleVZhbHVlUGFpcmAyAERpY3Rpb25hcnlgMgBT
ZXRVSW50NjQAU2V0SW50NjQAU2V0VUludDE2AFNldEludDE2AFNDXzBFOEI0RTQ3NzQwMjRDMDRB
MzA4MUFERDE1Rjk4MUY3ADxNb2R1bGU+AHNldF9QYXJzZUNvbnRyb2xJRABwYXJzZUNvbnRyb2xJ
RABJbnB1dElEAEdldE91dHB1dElEAHNldF9Mb29rdXBXb3JrZGF5SUQAc3RyaXBVbmljb2RlRnJv
bU5vblVuaWNvZGVZTgBnZXRfU3RyaXBVbmljb2RlZnJvbU5vblVuaWNvZGVZTgBnZXRfRmFpbE9u
TWlzc2luZ01hbmRhdG9yeUNvbHVtbkluTGluZVlOAGZhaWxPbk1pc3NpbmdNYW5kYXRvcnlDb2x1
bW5JbkxpbmVZTgBnZXRfQ29sdW1uTmFtZXNDYXNlU2Vuc2l0aXZlWU4AZ2V0X0ZhaWxPbkV4dHJh
Q29sdW1uWU4AZmFpbE9uRXh0cmFDb2x1bW5ZTgBnZXRfRmFpbE9uTWlzc2luZ0NvbHVtbllOAGZh
aWxPbk1pc3NpbmdDb2x1bW5ZTgBnZXRfRmFpbE9uTWlzc2luZ01hbmRhdG9yeUNvbHVtbkluSGVh
ZGVyWU4AZmFpbE9uTWlzc2luZ01hbmRhdG9yeUNvbHVtbkluSGVhZGVyWU4AZ2V0X0ZpeERhdGVW
YWx1ZXNZTgBmaXhEYXRlVmFsdWVzWU4AZ2V0X1RydW5jYXRlU3RyaW5nVmFsdWVzWU4AdHJ1bmNh
dGVTdHJpbmdWYWx1ZXNZTgBnZXRfQWxsb3dFeHRyYUNvbHVtbnNZTgBhbGxvd0V4dHJhQ29sdW1u
c1lOAGdldF9BbGxvd01pc3NpbmdDb2x1bW5zWU4AYWxsb3dNaXNzaW5nQ29sdW1uc1lOAGdldF9D
b252ZXJ0VGhyZWVDaGFyVGltZXpvbmVkdG9PZmZzZXRzWU4AY29udmVydFRocmVlQ2hhclR6c1Rv
T2Zmc2V0WU4ATWljcm9zb2Z0LlZpc3VhbEJhc2ljLkZpbGVJTwBnZXRfQ29tcG9uZW50TWV0YURh
dGEAZ2V0X0VuZE9mRGF0YQBzZXRfQWRkaXRpb25hbERhdGEAbXNjb3JsaWIAU3lzdGVtLkNvbGxl
Y3Rpb25zLkdlbmVyaWMATWljcm9zb2Z0LlZpc3VhbEJhc2ljAEZpbmRTeXN0ZW1UaW1lWm9uZUJ5
SWQAQWRkAHRvdGFsUGFyc2VFdmVudHNMb2dnZWQASW5wdXRzRmluaXNoZWQATWFya091dHB1dHNG
aW5pc2hlZABzZXRfVG90YWxGaWVsZHNGYWlsZWQAc2V0X1RvdGFsTGluZXNGYWlsZWQAc2V0X1Rv
dGFsRmllbGRzUGFyc2VkAHRvdGFsRmllbGRzUGFyc2VkAHNldF9Ub3RhbExpbmVzUGFyc2VkAHRv
dGFsTGluZXNQYXJzZWQAc2V0X1RvdGFsRmllbGRzUGFzc2VkAHNldF9Ub3RhbExpbmVzUGFzc2Vk
AHNldF9hdXRob3JpbnRlZ3JhdGlvbmlkAHNldF9zdHVkZW50aW50ZWdyYXRpb25pZABzZXRfYXV0
aG9ydXNlcmlkAHNldF9zdHVkZW50dXNlcmlkAHNldF9zdHVkZW50aWQAc2V0X25vdGVleHRpZABz
ZXRfY21zbm90ZWV4dGlkAHNldF90cmFja2luZ2l0ZW1leHRpZABzZXRfYXBwb2ludG1lbnRpdGVt
ZXh0aWQAU2V0R3VpZABSZWFkVG9FbmQAZ2V0X1NlY29uZABnZXRfTWlsbGlzZWNvbmQAUmVwbGFj
ZQBkZWZhdWx0SW5zdGFuY2UAc2V0X0Vycm9yQ29kZQBnZXRfTWVzc2FnZQBzZXRfTWVzc2FnZQBz
ZXRfUGFyc2VFcnJvck1lc3NhZ2UAcGFyc2VFcnJvck1lc3NhZ2UAZ2V0X1NjYWxlAHNldF9UYXJn
ZXRGaWVsZE51bGxhYmxlAHRhcmdldEZpZWxkTnVsbGFibGUASURpc3Bvc2FibGUAU2V0RG91Ymxl
AFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAFNldFNpbmdsZQBzZXRfUGFyc2VT
b3VyY2VGaWxlAHBhcnNlU291cmNlRmlsZQBQYXJzZUZsYXRGaWxlAGdldF9OYW1lAHNldF9UYXJn
ZXRGaWVsZE5hbWUAdGFyZ2V0RmllbGROYW1lAGdldF9GaWxlTmFtZQBzZXRfRmlsZU5hbWUAZmls
ZU5hbWUASW5wdXROYW1lAGZsYXRmaWxlQ29sdW1uc0J5TmFtZQBtYWluT3V0cHV0Q29sdW1uc0J5
TmFtZQBzZXRfdHJhY2tpbmdydWxlbmFtZQBzZXRfYXV0aG9ybGFzdG5hbWUAc2V0X3N0dWRlbnRs
YXN0bmFtZQBzZXRfYXV0aG9yZmlyc3RuYW1lAHNldF9zdHVkZW50Zmlyc3RuYW1lAFNldERhdGVU
aW1lAFRvVW5pdmVyc2FsVGltZQBTZXRUaW1lAENvbnZlcnRUaW1lAGdldF9Db2x1bW5IZWFkZXJM
aW5lAGNvbHVtbkhlYWRlckxpbmUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUAY29u
dmVydFRvVGltZVpvbmUAZ2V0X0NvbnZlcnR0b1RpbWVab25lAGdldF9EYXRhVHlwZQBzZXRfVGFy
Z2V0RmllbGREYXRhVHlwZQB0YXJnZXRGaWVsZERhdGFUeXBlAHNldF9ub3RldHlwZQBTeXN0ZW0u
Q29yZQBnZXRfTWF4RXJyb3JzVG9JZ25vcmUAbWF4RXJyb3JzVG9JZ25vcmUAZ2V0X0N1bHR1cmUA
c2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAGdldF9JbnZhcmlhbnRDdWx0dXJlAEFwcGxpY2F0
aW9uU2V0dGluZ3NCYXNlAGdldF9PcmRpbmFsSWdub3JlQ2FzZQBDbG9zZQBEaXNwb3NlAHJlYWR5
VG9QYXJzZQBzZXRfZGF0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0
dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUA
RWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlU
cmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmln
dXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9u
UmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29w
eXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50QXR0cmlidXRlAEFz
c2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBQcmVF
eGVjdXRlAGdldF9NaW51dGUAU2V0U0J5dGUAU2V0Qnl0ZQBnZXRfVmFsdWUAc2V0X0xvb2t1cFZh
bHVlAHZhbHVlAGNvbHVtbk5hbWVzQ2FzZVNlbnNpdGl2ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9u
aW5nAFRvU3RyaW5nAEdldFN0cmluZwBTZXRTdHJpbmcAU3Vic3RyaW5nAEFkZEZpZWxkTGV2ZWxQ
YXJzZUxvZwBBZGRGaWxlTGV2ZWxQYXJzZUxvZwBnZXRfTWF4RXZlbnRzVG9Mb2cAbWF4RXZlbnRz
VG9Mb2cASXNNYXRjaABNYXRoAGZpbGVGdWxsUGF0aABnZXRfTGVuZ3RoAGdldF9Nb250aABnZXRf
TG9jYWwAU2V0RGVjaW1hbABnZXRfT3JkaW5hbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAcGFyc2VM
b2dMZXZlbABzZXRfYXV0aG9yaW5zdGl0dXRpb25hbGVtYWlsAFNDXzBFOEI0RTQ3NzQwMjRDMDRB
MzA4MUFERDE1Rjk4MUY3LmRsbABzZXRfUGFyc2VDb250cm9sSURfSXNOdWxsAHNldF9Mb29rdXBX
b3JrZGF5SURfSXNOdWxsAGdldF9TdHJpcFVuaWNvZGVmcm9tTm9uVW5pY29kZVlOX0lzTnVsbABn
ZXRfRmFpbE9uTWlzc2luZ01hbmRhdG9yeUNvbHVtbkluTGluZVlOX0lzTnVsbABnZXRfQ29sdW1u
TmFtZXNDYXNlU2Vuc2l0aXZlWU5fSXNOdWxsAGdldF9GYWlsT25FeHRyYUNvbHVtbllOX0lzTnVs
bABnZXRfRmFpbE9uTWlzc2luZ0NvbHVtbllOX0lzTnVsbABnZXRfRmFpbE9uTWlzc2luZ01hbmRh
dG9yeUNvbHVtbkluSGVhZGVyWU5fSXNOdWxsAGdldF9GaXhEYXRlVmFsdWVzWU5fSXNOdWxsAGdl
dF9UcnVuY2F0ZVN0cmluZ1ZhbHVlc1lOX0lzTnVsbABnZXRfQWxsb3dFeHRyYUNvbHVtbnNZTl9J
c051bGwAZ2V0X0FsbG93TWlzc2luZ0NvbHVtbnNZTl9Jc051bGwAZ2V0X0NvbnZlcnRUaHJlZUNo
YXJUaW1lem9uZWR0b09mZnNldHNZTl9Jc051bGwAc2V0X0FkZGl0aW9uYWxEYXRhX0lzTnVsbABz
ZXRfVG90YWxGaWVsZHNGYWlsZWRfSXNOdWxsAHNldF9Ub3RhbExpbmVzRmFpbGVkX0lzTnVsbABz
ZXRfVG90YWxGaWVsZHNQYXJzZWRfSXNOdWxsAHNldF9Ub3RhbExpbmVzUGFyc2VkX0lzTnVsbABz
ZXRfVG90YWxGaWVsZHNQYXNzZWRfSXNOdWxsAHNldF9Ub3RhbExpbmVzUGFzc2VkX0lzTnVsbABz
ZXRfYXV0aG9yaW50ZWdyYXRpb25pZF9Jc051bGwAc2V0X3N0dWRlbnRpbnRlZ3JhdGlvbmlkX0lz
TnVsbABzZXRfYXV0aG9ydXNlcmlkX0lzTnVsbABzZXRfc3R1ZGVudHVzZXJpZF9Jc051bGwAc2V0
X3N0dWRlbnRpZF9Jc051bGwAc2V0X25vdGVleHRpZF9Jc051bGwAc2V0X2Ntc25vdGVleHRpZF9J
c051bGwAc2V0X3RyYWNraW5naXRlbWV4dGlkX0lzTnVsbABzZXRfYXBwb2ludG1lbnRpdGVtZXh0
aWRfSXNOdWxsAHNldF9FcnJvckNvZGVfSXNOdWxsAHNldF9NZXNzYWdlX0lzTnVsbABzZXRfUGFy
c2VFcnJvck1lc3NhZ2VfSXNOdWxsAHNldF9UYXJnZXRGaWVsZE51bGxhYmxlX0lzTnVsbABzZXRf
UGFyc2VTb3VyY2VGaWxlX0lzTnVsbABzZXRfVGFyZ2V0RmllbGROYW1lX0lzTnVsbABnZXRfRmls
ZU5hbWVfSXNOdWxsAHNldF9GaWxlTmFtZV9Jc051bGwAc2V0X3RyYWNraW5ncnVsZW5hbWVfSXNO
dWxsAHNldF9hdXRob3JsYXN0bmFtZV9Jc051bGwAc2V0X3N0dWRlbnRsYXN0bmFtZV9Jc051bGwA
c2V0X2F1dGhvcmZpcnN0bmFtZV9Jc051bGwAc2V0X3N0dWRlbnRmaXJzdG5hbWVfSXNOdWxsAGdl
dF9Db2x1bW5IZWFkZXJMaW5lX0lzTnVsbABnZXRfQ29udmVydHRvVGltZVpvbmVfSXNOdWxsAHNl
dF9UYXJnZXRGaWVsZERhdGFUeXBlX0lzTnVsbABzZXRfbm90ZXR5cGVfSXNOdWxsAGdldF9NYXhF
cnJvcnNUb0lnbm9yZV9Jc051bGwAc2V0X2RhdGVfSXNOdWxsAHNldF9Mb29rdXBWYWx1ZV9Jc051
bGwAZ2V0X01heEV2ZW50c1RvTG9nX0lzTnVsbABzZXRfYXV0aG9yaW5zdGl0dXRpb25hbGVtYWls
X0lzTnVsbABnZXRfV29ya2RheUlEQ29sdW1uX0lzTnVsbABnZXRfQWRkaXRpb25hbERhdGFDb2x1
bW5fSXNOdWxsAGdldF9Mb29rdXBWYWx1ZUNvbHVtbl9Jc051bGwAc2V0X0Vycm9yQ29sdW1uX0lz
TnVsbABnZXRfRmlsZU5hbWVPdXRwdXRDb2x1bW5fSXNOdWxsAGdldF9SZWNvcmRUZXh0T3V0cHV0
Q29sdW1uX0lzTnVsbABnZXRfRmlsZUxvY2F0aW9uX0lzTnVsbABnZXRfRWFybGllc3RBbGxvd2Fi
bGVZZWFyX0lzTnVsbABzZXRfVGFyZ2V0RmllbGROdW1iZXJfSXNOdWxsAHNldF9QYXJzZURhdGFU
eXBlRXJyb3JfSXNOdWxsAHNldF9QYXJzZVRydW5jYXRpb25FcnJvcl9Jc051bGwAc2V0X1BhcnNl
T3RoZXJFcnJvcl9Jc051bGwAc2V0X1BhcnNlRm9ybWF0RXJyb3JfSXNOdWxsAHNldF9QYXJzZUZp
ZWxkQ291bnRFcnJvcl9Jc051bGwAc2V0X1BhcnNlTnVsbGFiaWxpdHlFcnJvcl9Jc051bGwAZ2V0
X05vblRydW5jYXRlYWJsZUNvbHVtbnNfSXNOdWxsAGdldF9Ob3ROdWxsQ29sdW1uc19Jc051bGwA
Z2V0X01hbmRhdG9yeUNvbHVtbnNfSXNOdWxsAGdldF9Db2x1bW5SZWdleFBhdHRlcm5zX0lzTnVs
bABzZXRfVG90YWxEYXRhVHlwZUVycm9yc19Jc051bGwAc2V0X1RvdGFsVHJ1bmNhdGlvbkVycm9y
c19Jc051bGwAc2V0X1RvdGFsT3RoZXJFcnJvcnNfSXNOdWxsAHNldF9Ub3RhbEZvcm1hdEVycm9y
c19Jc051bGwAc2V0X1RvdGFsRmllbGRDb3VudEVycm9yc19Jc051bGwAc2V0X1RvdGFsTnVsbGFi
aWxpdHlFcnJvcnNfSXNOdWxsAGdldF9NYXhMaW5lc1RvUHJvY2Vzc19Jc051bGwAZ2V0X0FsbG93
YWJsZURhdGVGb3JtYXRzX0lzTnVsbABzZXRfc3ViamVjdF9Jc051bGwAc2V0X1BhcnNlU291cmNl
TGluZU9mZnNldF9Jc051bGwAc2V0X1BhcnNlUGFzc0ZhaWxSZXN1bHRfSXNOdWxsAGdldF9IZWFk
ZXJMaW5lQ291bnRfSXNOdWxsAGdldF9Db2x1bW5IZWFkZXJMaXN0X0lzTnVsbABzZXRfUGFyc2VG
aWVsZFRleHRfSXNOdWxsAHNldF9GYWlsZWRMaW5lVGV4dF9Jc051bGwAc2V0X1BhcnNlU291cmNl
TGluZVRleHRfSXNOdWxsAHNldF9ib2R5X0lzTnVsbABnZXRfUGFyc2VMb2dMZXZlbEFFQWxsb3JF
cnJvcnNPbmx5X0lzTnVsbABTZXROdWxsAGdldF9JdGVtAHNldF9JdGVtAFN5c3RlbQBUcmltAHJl
c291cmNlTWFuAFNldEJvb2xlYW4AVGltZVNwYW4ATWluAFNjcmlwdE1haW4AZ2V0X1dvcmtkYXlJ
RENvbHVtbgB3b3JrZGF5SURDb2x1bW4AZ2V0X0FkZGl0aW9uYWxEYXRhQ29sdW1uAGFkZGl0aW9u
YWxEYXRhQ29sdW1uAGdldF9Mb29rdXBWYWx1ZUNvbHVtbgBsb29rdXBWYWx1ZUNvbHVtbgBzZXRf
RXJyb3JDb2x1bW4AZ2V0X0ZpbGVOYW1lT3V0cHV0Q29sdW1uAGZpbGVOYW1lT3V0cHV0Q29sdW1u
AGdldF9SZWNvcmRUZXh0T3V0cHV0Q29sdW1uAHJlY29yZFRleHRPdXRwdXRDb2x1bW4AZ2V0X1By
ZWNpc2lvbgBnZXRfRmlsZUxvY2F0aW9uAGZpbGVMb2NhdGlvbgBTeXN0ZW0uQ29uZmlndXJhdGlv
bgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBnZXRfT3V0cHV0Q29sdW1u
Q29sbGVjdGlvbgBnZXRfT3V0cHV0Q29sbGVjdGlvbgBLZXlDb2xsZWN0aW9uAG1haW5PdXRwdXRD
b2x1bW5OYW1lc0J5UG9zaXRpb24AZmxhdGZpbGVDb2x1bW5zQnlQb3NpdGlvbgBNYWxmb3JtZWRM
aW5lRXhjZXB0aW9uAEludmFsaWRPcGVyYXRpb25FeGNlcHRpb24AU3RyaW5nQ29tcGFyaXNvbgBj
b252ZXJ0VG9UaW1lWm9uZUluZm8AQ3VsdHVyZUluZm8AT3V0cHV0TmFtZU1hcABjb2x1bW5SZWdl
eFBhdHRlcm5NYXAAT3V0cHV0TWFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUnVudGltZVdyYXAA
TWljcm9zb2Z0LlNxbFNlcnZlci5EVFNQaXBlbGluZVdyYXAAZ2V0X1llYXIAZ2V0X0VhcmxpZXN0
QWxsb3dhYmxlWWVhcgBlYXJsaWVzdEFsbG93YWJsZVllYXIAQ2xlYXIAQ2hhcgBzZXRfVGFyZ2V0
RmllbGROdW1iZXIAdGFyZ2V0RmllbGROdW1iZXIASUZvcm1hdFByb3ZpZGVyAE91dHB1dEZpbGVE
YXRhQnVmZmVyAFBpcGVsaW5lQnVmZmVyAE91dHB1dEZpZWxkTGV2ZWxQYXJzZUxvZ2dpbmdCdWZm
ZXIAT3V0cHV0RmlsZUxldmVsUGFyc2VMb2dnaW5nQnVmZmVyAElucHV0Q29uZmlndXJhdGlvblBh
cmFtZXRlckJ1ZmZlcgBPdXRwdXRSZWNvcmRMZXZlbFBhcnNlRXJyb3JzQnVmZmVyAFNjcmlwdEJ1
ZmZlcgBtYWluT3V0cHV0QnVmZmVyAGdldF9SZXNvdXJjZU1hbmFnZXIAVG9VcHBlcgBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
UGlwZWxpbmUuV3JhcHBlcgBTdHJpbmdDb21wYXJlcgBUZXh0RmllbGRQYXJzZXIAc2V0X1BhcnNl
RGF0YVR5cGVFcnJvcgBwYXJzZURhdGFUeXBlRXJyb3IARmlyZUVycm9yAEFkZFJlY29yZExldmVs
UGFyc2luZ0Vycm9yAHNldF9QYXJzZVRydW5jYXRpb25FcnJvcgBwYXJzZVRydW5jYXRpb25FcnJv
cgBzZXRfUGFyc2VPdGhlckVycm9yAHBhcnNlT3RoZXJFcnJvcgBzZXRfUGFyc2VGb3JtYXRFcnJv
cgBwYXJzZUZvcm1hdEVycm9yAHNldF9QYXJzZUZpZWxkQ291bnRFcnJvcgBwYXJzZUZpZWxkQ291
bnRFcnJvcgBzZXRfUGFyc2VOdWxsYWJpbGl0eUVycm9yAHBhcnNlTnVsbGFiaWxpdHlFcnJvcgBJ
RW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBnZXRfSG91cgBPdXRwdXRJRHMA
U3lzdGVtLkRpYWdub3N0aWNzAFJlYWRGaWVsZHMAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2
aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDXzZkNjlmMjhkNmY3MDRmOTk4Y2Q4MmZhMmIyZDNmNzYw
LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTQ182ZDY5ZjI4
ZDZmNzA0Zjk5OGNkODJmYTJiMmQzZjc2MC5Qcm9wZXJ0aWVzAFZhcmlhYmxlcwBEYXRlVGltZVN0
eWxlcwBzZXRfSGFzRmllbGRzRW5jbG9zZWRJblF1b3RlcwBCdWZmZXJDb2x1bW5JbmRleGVzAEdl
dENvbHVtbkluZGV4ZXMAU2V0dGluZ3MARXF1YWxzAENvbnRhaW5zAGdldF9Ob25UcnVuY2F0ZWFi
bGVDb2x1bW5zAG5vblRydW5jYXRlYWJsZUNvbHVtbnMAZ2V0X05vdE51bGxDb2x1bW5zAG5vdE51
bGxDb2x1bW5zAGdldF9NYW5kYXRvcnlDb2x1bW5zAG1hbmRhdG9yeUNvbHVtbnMAU3lzdGVtLlRl
eHQuUmVndWxhckV4cHJlc3Npb25zAFN5c3RlbS5Db2xsZWN0aW9ucwBDb25uZWN0aW9ucwBnZXRf
Q29sdW1uUmVnZXhQYXR0ZXJucwBjb2x1bW5SZWdleFBhdHRlcm5zAFBlZWtDaGFycwBCdWZmZXJz
AFNldERlbGltaXRlcnMAdG90YWxGaWVsZEVycm9ycwB0b3RhbExpbmVFcnJvcnMAc2V0X1RvdGFs
RGF0YVR5cGVFcnJvcnMAdG90YWxEYXRhVHlwZUVycm9ycwBzZXRfVG90YWxUcnVuY2F0aW9uRXJy
b3JzAHRvdGFsVHJ1bmNhdGlvbkVycm9ycwBzZXRfVG90YWxPdGhlckVycm9ycwB0b3RhbE90aGVy
RXJyb3JzAHNldF9Ub3RhbEZvcm1hdEVycm9ycwB0b3RhbEZvcm1hdEVycm9ycwBzZXRfVG90YWxG
aWVsZENvdW50RXJyb3JzAHRvdGFsRmllbGRDb3VudEVycm9ycwBzZXRfVG90YWxOdWxsYWJpbGl0
eUVycm9ycwB0b3RhbE51bGxhYmlsaXR5RXJyb3JzAGdldF9NYXhMaW5lc1RvUHJvY2VzcwBtYXhM
aW5lc1RvUHJvY2VzcwBnZXRfQWxsb3dhYmxlRGF0ZUZvcm1hdHMAYWxsb3dhYmxlRGF0ZUZvcm1h
dHMARmluaXNoT3V0cHV0cwBDcmVhdGVOZXdPdXRwdXRSb3dzAGdldF9LZXlzAENvbmNhdABQYXJz
ZUV4YWN0AE9iamVjdABzZXRfc3ViamVjdABTZXREYXRlVGltZU9mZnNldABzZXRfUGFyc2VTb3Vy
Y2VMaW5lT2Zmc2V0AHBhcnNlU291cmNlTGluZU9mZnNldAB0ejNUb09mZnNldABnZXRfRW5kT2ZS
b3dzZXQAU2V0RW5kT2ZSb3dzZXQAU3BsaXQAZ2V0X0RlZmF1bHQAc2V0X1BhcnNlUGFzc0ZhaWxS
ZXN1bHQAcGFyc2VQYXNzRmFpbFJlc3VsdABVc2VyQ29tcG9uZW50AFBhcmVudENvbXBvbmVudABT
Y3JpcHRDb21wb25lbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50AGdldF9IZWFkZXJMaW5lQ291bnQA
aGVhZGVyTGluZUNvdW50AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuVHhTY3JpcHQAbm9uVHJ1bmNhdGVh
YmxlQ29sdW1uTGlzdABub3ROdWxsQ29sdW1uTGlzdABtYW5kYXRvcnlDb2x1bW5MaXN0AGdldF9D
b2x1bW5IZWFkZXJMaXN0AGNvbHVtbkhlYWRlckxpc3QATWljcm9zb2Z0LlNxbFNlcnZlci5QaXBl
bGluZUhvc3QASW5wdXRDb25maWd1cmF0aW9uUGFyYW1ldGVyX1Byb2Nlc3NJbnB1dABQcmltZU91
dHB1dABNb3ZlTmV4dABzZXRfUGFyc2VGaWVsZFRleHQAcGFyc2VGaWVsZFRleHQAc2V0X0ZhaWxl
ZExpbmVUZXh0AHNldF9QYXJzZVNvdXJjZUxpbmVUZXh0AHBhcnNlU291cmNlTGluZVRleHQAQWRk
Um93AFJlbW92ZVJvdwBJbnB1dENvbmZpZ3VyYXRpb25QYXJhbWV0ZXJfUHJvY2Vzc0lucHV0Um93
AE5leHRSb3cAUmVnZXgAZ2V0X0RheQBkYXRlRm9ybWF0QXJyYXkAc2V0X2JvZHkAZ2V0X0tleQBD
b250YWluc0tleQBnZXRfQXNzZW1ibHkAZ2V0X1BhcnNlTG9nTGV2ZWxBRUFsbG9yRXJyb3JzT25s
eQBvcF9FcXVhbGl0eQBvcF9JbmVxdWFsaXR5AGNvbENhc2VTZW5zaXRpdml0eQBFbXB0eQAAJU8A
dQB0AHAAdQB0ACAALQAgAEYAaQBsAGUAIABEAGEAdABhAAEDRQAACVAAQQBTAFMAAAteAC4AKgBc
ACQAAANcAAAHRQBEAFQAAA0tADAANAA6ADAAMAABB0UAUwBUAAANLQAwADUAOgAwADAAAQdDAEQA
VAAAB0MAUwBUAAANLQAwADYAOgAwADAAAQdNAEQAVAAAB00AUwBUAAANLQAwADcAOgAwADAAAQdQ
AEQAVAAAB1AAUwBUAAANLQAwADgAOgAwADAAAQlBAEsARABUAAAJQQBLAFMAVAAADS0AMAA5ADoA
MAAwAAEHSABEAFQAAAdIAFMAVAAADS0AMQAwADoAMAAwAAEDLAAAB04ALwBBAAArVQBuAGEAYgBs
AGUAIAB0AG8AIABwAGEAcgBzAGUAIABsAGkAbgBlACAAABcgAG8AZgAgAGYAaQBsAGUALgAgAFsA
AANdAAABAAlGAEEASQBMAAADTgAAA1kAAF9EAHUAcABsAGkAYwBhAHQAZQAgAGMAbwBsAHUAbQBu
ACAAbgBhAG0AZQAgAGYAbwB1AG4AZAAgAGkAbgAgAGkAbgBwAHUAdAAgAHIAZQBjAG8AcgBkAHMA
ZQB0AC4AAF1NAGEAbgBkAGEAdABvAHIAeQAgAGMAbwBsAHUAbQBuACAAbQBpAHMAcwBpAG4AZwAg
AGYAcgBvAG0AIABpAG4AcAB1AHQAIAByAGUAYwBvAHIAZABzAGUAdAAuAAB7VwBvAHIAawBkAGEA
eQAgAEkARAAgAGMAbwBsAHUAbQBuACAAcgBlAHEAdQBlAHMAdABlAGQAIABiAHUAdAAgAG0AaQBz
AHMAaQBuAGcAIABmAHIAbwBtACAAaQBuAHAAdQB0ACAAcgBlAGMAbwByAGQAcwBlAHQALgAAf0wA
bwBvAGsAdQBwACAAVgBhAGwAdQBlACAAYwBvAGwAdQBtAG4AIAByAGUAcQB1AGUAcwB0AGUAZAAg
AGIAdQB0ACAAbQBpAHMAcwBpAG4AZwAgAGYAcgBvAG0AIABpAG4AcAB1AHQAIAByAGUAYwBvAHIA
ZABzAGUAdAAuAACAhUEAZABkAGkAdABpAG8AbgBhAGwAIABEAGEAdABhACAAYwBvAGwAdQBtAG4A
IAByAGUAcQB1AGUAcwB0AGUAZAAgAGIAdQB0ACAAbQBpAHMAcwBpAG4AZwAgAGYAcgBvAG0AIABp
AG4AcAB1AHQAIAByAGUAYwBvAHIAZABzAGUAdAAuAAB5QwBvAGwAdQBtAG4AIABvAG4AIABvAHUA
dABwAHUAdAAgAHIAZQBjAG8AcgBkAHMAZQB0ACAAYgB1AHQAIABtAGkAcwBzAGkAbgBnACAAZgBy
AG8AbQAgAGkAbgBwAHUAdAAgAHIAZQBjAG8AcgBkAHMAZQB0AC4AAE1FAHgAdAByAGEAIABjAG8A
bAB1AG0AbgAgAGYAbwB1AG4AZAAgAG8AbgAgAGkAbgBwAHUAdAAgAHIAZQBjAG8AcgBkAHMAZQB0
AC4AAFFNAGEAbgBkAGEAdABvAHIAeQAgAEMAbwBsAHUAbQBuACAATQBpAHMAcwBpAG4AZwAgAGYA
cgBvAG0AIABJAG4AcAB1AHQAIABGAGkAbABlAABPRQB4AHAAZQBjAHQAZQBkACAAQwBvAGwAdQBt
AG4AIABNAGkAcwBzAGkAbgBnACAAZgByAG8AbQAgAEkAbgBwAHUAdAAgAEYAaQBsAGUAAEtVAG4A
ZQB4AHAAZQBjAHQAZQBkACAAQwBvAGwAdQBtAG4AIABGAG8AdQBuAGQAIABpAG4AIABJAG4AcAB1
AHQAIABGAGkAbABlAAAvRABUAF8AQgBZAFQARQBTAHwARABUAF8AUwBUAFIAfABEAFQAXwBXAFMA
VABSAAADKAAAAykAACtEAFQAXwBEAEUAQwBJAE0AQQBMAHwARABUAF8ATgBVAE0ARQBSAEkAQwAA
EU4ATwBUACAATgBVAEwATAAACU4AVQBMAEwAAE9VAG4AYQBiAGwAZQAgAHQAbwAgAGMAbwBuAHYA
ZQByAHQAIAB0AG8AIAB0AGEAcgBnAGUAdAAgAGQAYQB0AGEAIAB0AHkAcABlACAAWwAAI0QAYQB0
AGUAIAB3AGkAdABoACAAWQBlAGEAcgAgADwAIAAAM1MAdAByAGkAbgBnACAAdwBvAHUAbABkACAA
YgBlACAAdAByAHUAbgBjAGEAdABlAGQAAAsgAGEAbgBkACAAAG9TAHQAcgBpAG4AZwAgAHYAYQBs
AHUAZQAgAGYAYQBpAGwAZQBkACAAdABvACAAbQBhAHQAYwBoACAAcgBlAGcAdQBsAGEAcgAgAGUA
eABwAHIAZQBzAHMAaQBvAG4AIABwAGEAdAB0AGUAcgBuAAAjWwBeAFwAdQAwADAAMAAwAC0AXAB1
ADAAMAA3AEYAXQArAAENWwBeAAAALQB/AF0AAWtVAG4AaQBjAG8AZABlACAAYwBoAGEAcgBhAGMA
dABlAHIAIABmAG8AdQBuAGQAIABmAG8AcgAgAG4AbwBuAC0AdQBuAGkAYwBvAGQAZQAgAHQAYQBy
AGcAZQB0ACAAYwBvAGwAdQBtAG4AAU9UAGgAZQAgAGYAbwBsAGwAbwB3AGkAbgBnACAAYwBvAGwA
dQBtAG4AcwAgAGYAYQBpAGwAZQBkACAAdABvACAAcABhAHIAcwBlADoAIAAAL0MAdQBzAHQAbwBt
ACAARgBsAGEAdAAgAEYAaQBsAGUAIABQAGEAcgBzAGUAcgAAU00AYQB4AGkAbQB1AG0AIABOAHUA
bQBiAGUAcgAgAG8AZgAgAEUAcgByAG8AcgAgAEwAaQBuAGUAcwAgAHQAbwAgAEkAZwBuAG8AcgBl
ACAAKAAAKSkAIABlAHgAYwBlAGUAZABlAGQAIABpAG4AIABmAGkAbABlACAAIgAABSIALgAAAzoA
ADUoAD8APAAhACgAJAB8AFsAXgBcAFwAXQApACgAXABcAFwAXAApACoAPwBcAFwAKQBcACwAADUo
AD8APAAhACgAJAB8AFsAXgBcAFwAXQApACgAXABcAFwAXAApACoAPwBcAFwAKQBcADsAADUoAD8A
PAAhACgAJAB8AFsAXgBcAFwAXQApACgAXABcAFwAXAApACoAPwBcAFwAKQBcADoAAICbSQBzAE4A
dQBsAGwAIABwAHIAbwBwAGUAcgB0AHkAIABjAGEAbgBuAG8AdAAgAGIAZQAgAHMAZQB0ACAAdABv
ACAARgBhAGwAcwBlAC4AIABBAHMAcwBpAGcAbgAgAGEAIAB2AGEAbAB1AGUAIAB0AG8AIAB0AGgA
ZQAgAGMAbwBsAHUAbQBuACAAaQBuAHMAdABlAGEAZAAuAAA/SQBuAHAAdQB0ACAALQAgAEMAbwBu
AGYAaQBnAHUAcgBhAHQAaQBvAG4AIABQAGEAcgBhAG0AZQB0AGUAcgABRU8AdQB0AHAAdQB0ACAA
LQAgAFIAZQBjAG8AcgBkACAATABlAHYAZQBsACAAUABhAHIAcwBlACAARQByAHIAbwByAHMAAUVP
AHUAdABwAHUAdAAgAC0AIABGAGkAZQBsAGQAIABMAGUAdgBlAGwAIABQAGEAcgBzAGUAIABMAG8A
ZwBnAGkAbgBnAAFDTwB1AHQAcAB1AHQAIAAtACAARgBpAGwAZQAgAEwAZQB2AGUAbAAgAFAAYQBy
AHMAZQAgAEwAbwBnAGcAaQBuAGcAAXFTAEMAXwA2AGQANgA5AGYAMgA4AGQANgBmADcAMAA0AGYA
OQA5ADgAYwBkADgAMgBmAGEAMgBiADIAZAAzAGYANwA2ADAALgBQAHIAbwBwAGUAcgB0AGkAZQBz
AC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAAFhLyzsRaYRPnZkh5CxivE4ABCABAQgDIAABBSABARER
BCABAQ4GIAEBEYCxDAcFElUSWRJVEkESXQUgABKAwQUgABKAxQQgABJVAyAAHAMgAA4EIAECDgUg
ABKAzQcVEjkCDhJBByACARMAEwEGFRI5AggOAyAACAMgAAIDBwEIBgACCBJhDgUAAgIODgUAAggI
CAUgAg4ICIDAB2oSZR0OCAIOEmkCAgICAh0OCA4VEW0BDg4VEXUCDhJBDhURdQIOCA4CAgIODg4C
DggODhJBDg4ODg4ODg4ODg4OEXkIAgICAhJ9EYCBEn0RgIUVEYCJAg4OFRGAjQIODhJ9EYCFEn0R
gJESfRGAkRJ9EYCFEn0RgIUSfRGAhRJ9EYCBEn0RgIUSfRGAlRJ9BBJ9BhJ9CBJ9ChJ9DhJ9EYCB
En0MEn0NEn0OEn0OEn0FEn0HEn0JEn0LEn0OEn0CBQACDg4OBhUSOQIODgUgAQEdDgQgAQECBCAB
DggEIAAdDgUAAQ4dDgYVEjkCDggFIAECEwAFFRJJAQ4IIAAVEW0BEwAFFRFtAQ4EIAATAAogABUS
cQITABMBBxUScQIOEkEKIAAVEXUCEwATAQcVEXUCDhJBBhUScQIOCAYVEXUCDggKIAYBCA4ODggQ
AgYgARMBEwAEIAAReQcABA4ODg4OBgADDg4ODgQAAQIOBSACAQgCBgABEYCBDgcgAgEIEYCBCyAA
FRGAiQITABMBBxURgIkCDg4LIAAVEYCNAhMAEwEHFRGAjQIODgQgABMBBQAAEoCtDgAEEYCFDh0O
EoDdEYDhBgABEYCFDgUgABGAhQoAAhGAhRGAhRJRCiAHAQgICAgICAgHIAIBCBGA5QYAARGAkQ4H
IAIBCBGAkQcgAgEIEYCFBgABEYCVDgcgAgEIEYCVBAABBA4FIAIBCAQEAAEGDgUgAgEIBgQAAQgO
BSACAQgIBAABCg4FIAIBCAoHFRI5Ag4STQUgAgEIDgQAAQwOBSACAQgMBAABDQ4FIAIBCA0CBg4E
AAEFDgUgAgEIBQQAAQcOBSACAQgHBAABCQ4FIAIBCAkEAAELDgUgAgEICwMHAQIvBxUVEjkCDhJB
FRF1Ag4SQQ4dDggdDhJNAgICAgIOFRFtAQ4ODhURdQIOCA4CAgIEAAASPQYgAR0OHQMRIAIBFRKB
EQETABUSgRUBEwAGAAIdDg4OBQABElEOCiABARUSgRUBEwAEAAASUQkgAwESRR0IEmEDBhJFAwYd
CAQgAQIIBCABCAgFIAIBCBwHIAICDhGBHQUgAR0ICAgAARKBIRGBJQUgABKBKQcgAgEOEoEpCLd6
XFYZNOCJCImEXc2AgMyRCLA/X38R1Qo6AgYIBwYVEjkCDg4DBhI9CAYVEjkCDhJBBwYVEjkCCA4H
BhUSOQIOCAIGAgYGFRJJAQ4IBhUSOQIOEk0DBh0OAwYSUQMGEiQDBhIoAwYSEAMGEhQDBhIYAwYS
HAQGEoChBAYSgKkEBhKArQMGEjALIAQBCB0IHRJFEmEUIBEBCA4OCAgODg4ODg4ODg4ODg4KIAcB
Dg4ODg4ODgUgAQESDAkgBAEIDhJFEmEGIAEBEoChBQAAEoCpBgABARKArQQAABIwAwAAAQMoAA4D
KAACAygACAUIABKAqQUIABKArQQIABIwCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9u
VGhyb3dzAQgBAAIAAAAAACgBACNTQ182ZDY5ZjI4ZDZmNzA0Zjk5OGNkODJmYTJiMmQzZjc2MAAA
BQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE4AABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0
LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNwQBAAAAALQAAADO
yu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZl
cnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5
MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFE
UEFEULQAAADUuwAAAAAAAAAAAADuuwAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4LsAAAAAAAAA
AAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAA
gAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFjAAADsAwAA
AAAAAAAAAADsAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAA
AAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYA
aQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAETAMA
AAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAKAMAAAEAMAAwADAAMAAwADQAYgAwAAAA
GgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAA
AAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAEMAXwA2AGQA
NgA5AGYAMgA4AGQANgBmADcAMAA0AGYAOQA5ADgAYwBkADgAMgBmAGEAMgBiADIAZAAzAGYANwA2
ADAAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AMAAuADAAAABwACgA
AQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfADAARQA4AEIANABFADQANwA3ADQAMAAy
ADQAQwAwADQAQQAzADAAOAAxAEEARABEADEANQBGADkAOAAxAEYANwAuAGQAbABsAAAASAASAAEA
TABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAy
ADAAMQA4AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgA
AQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBDAF8AMABFADgAQgA0AEUANAA3
ADcANAAwADIANABDADAANABBADMAMAA4ADEAQQBEAEQAMQA1AEYAOQA4ADEARgA3AC4AZABsAGwA
AABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAQwBfADYAZAA2ADkAZgAyADgAZAA2
AGYANwAwADQAZgA5ADkAOABjAGQAOAAyAGYAYQAyAGIAMgBkADMAZgA3ADYAMAAAADQACAABAFAA
cgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAA4AAgAAQBBAHMAcwBl
AG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAMAAAAADwAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_0e8b4e4774024c04a3081add15f981f7</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">7A</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataShaChecksum"
                      typeConverter="NOTBROWSABLE">94381dea27e8645a475f805c35e0543ae2a37b85</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum"
                      typeConverter="NOTBROWSABLE">660e146c05f4964994d81b905bfb7715</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter]"
                      description="Takes a set of input parameters and uses the first row that it finds."
                      hasSideEffects="true"
                      name="Input - Configuration Parameter">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[File Location]"
                          cachedDataType="wstr"
                          cachedLength="15"
                          cachedName="File Location"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[File Location]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[File Name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="File Name"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[File Name]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Header Line Count]"
                          cachedDataType="i4"
                          cachedName="Header Line Count"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Header Line Count]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Column Header Line]"
                          cachedDataType="i4"
                          cachedName="Column Header Line"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Column Header Line]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Column Header List]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="4000"
                          cachedName="Column Header List"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Column Header List]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Max Lines To Process]"
                          cachedDataType="i4"
                          cachedName="Max Lines To Process"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Max Lines To Process]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Max Errors To Ignore]"
                          cachedDataType="i4"
                          cachedName="Max Errors To Ignore"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Max Errors To Ignore]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Max Events To Log]"
                          cachedDataType="i4"
                          cachedName="Max Events To Log"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Max Events To Log]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Parse Log Level AE (All or Errors-Only)]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="1"
                          cachedName="Parse Log Level AE (All or Errors-Only)"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Parse Log Level AE (All or Errors-Only)]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Allow Missing Columns YN]"
                          cachedDataType="wstr"
                          cachedLength="1"
                          cachedName="Allow Missing Columns YN"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Allow Missing Columns YN]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Allow Extra Columns YN]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="1"
                          cachedName="Allow Extra Columns YN"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Allow Extra Columns YN]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Truncate String Values YN]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="1"
                          cachedName="Truncate String Values YN"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Truncate String Values YN]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Fix Date Values YN]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="50"
                          cachedName="Fix Date Values YN"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fix Date Values YN]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Allowable Date Formats]"
                          cachedDataType="wstr"
                          cachedLength="23"
                          cachedName="Allowable Date Formats"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Allowable Date Formats]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Convert to TimeZone]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="255"
                          cachedName="Convert to TimeZone"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Convert to TimeZone]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Workday ID Column]"
                          cachedDataType="wstr"
                          cachedName="Workday ID Column"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Workday ID Column]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Lookup Value Column]"
                          cachedDataType="wstr"
                          cachedName="Lookup Value Column"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Lookup Value Column]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Additional Data Column]"
                          cachedDataType="wstr"
                          cachedName="Additional Data Column"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Additional Data Column]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Not Null Columns]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Not Null Columns"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Not Null Columns]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Mandatory Columns]"
                          cachedDataType="wstr"
                          cachedName="Mandatory Columns"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Mandatory Columns]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Column Regex Patterns]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Column Regex Patterns"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Column Regex Patterns]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[File Name Output Column]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="255"
                          cachedName="File Name Output Column"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[File Name Output Column]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Record Text Output Column]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="255"
                          cachedName="Record Text Output Column"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Record Text Output Column]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Earliest Allowable Year]"
                          cachedDataType="i4"
                          cachedName="Earliest Allowable Year"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Earliest Allowable Year]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Non-Truncateable Columns]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="4000"
                          cachedName="Non-Truncateable Columns"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Non-Truncateable Columns]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Column Names Case Sensitive YN]"
                          cachedDataType="wstr"
                          cachedLength="1"
                          cachedName="Column Names Case Sensitive YN"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Column Names Case Sensitive YN]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Fail On Extra Column YN]"
                          cachedDataType="wstr"
                          cachedLength="1"
                          cachedName="Fail On Extra Column YN"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fail On Extra Column YN]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Fail On Missing Column YN]"
                          cachedDataType="wstr"
                          cachedLength="1"
                          cachedName="Fail On Missing Column YN"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fail On Missing Column YN]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Fail On Missing Mandatory Column In Header YN]"
                          cachedDataType="wstr"
                          cachedLength="1"
                          cachedName="Fail On Missing Mandatory Column In Header YN"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fail On Missing Mandatory Column In Header YN]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Fail On Missing Mandatory Column In Line YN]"
                          cachedDataType="wstr"
                          cachedLength="1"
                          cachedName="Fail On Missing Mandatory Column In Line YN"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fail On Missing Mandatory Column In Line YN]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Strip Unicode from Non-Unicode YN]"
                          cachedDataType="wstr"
                          cachedLength="1"
                          cachedName="Strip Unicode from Non-Unicode YN"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Strip Unicode from Non-Unicode YN]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter].Columns[Convert Three-Char Timezoned to Offsets YN]"
                          cachedDataType="wstr"
                          cachedLength="1"
                          cachedName="Convert Three-Char Timezoned to Offsets YN"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Convert Three-Char Timezoned to Offsets YN]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data]"
                      description="Outputs the data parsed from the flat file.  Set the columns to the desired names and types."
                      hasSideEffects="true"
                      name="Output - File Data">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[note_ext_id]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[note_ext_id]"
                          name="note_ext_id" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[cms_note_ext_id]"
                          dataType="wstr"
                          length="100"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[cms_note_ext_id]"
                          name="cms_note_ext_id" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[date]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[date]"
                          name="date" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[note_type]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[note_type]"
                          name="note_type" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[subject]"
                          dataType="wstr"
                          length="1000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[subject]"
                          name="subject" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[body]"
                          dataType="wstr"
                          length="4000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[body]"
                          name="body" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_userid]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_userid]"
                          name="author_userid" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_integration_id]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_integration_id]"
                          name="author_integration_id" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_first_name]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_first_name]"
                          name="author_first_name" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_last_name]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_last_name]"
                          name="author_last_name" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_institutional_email]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_institutional_email]"
                          name="author_institutional_email" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_integration_id]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_integration_id]"
                          name="student_integration_id" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_userid]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_userid]"
                          name="student_userid" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_id]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_id]"
                          name="student_id" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_first_name]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_first_name]"
                          name="student_first_name" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_last_name]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_last_name]"
                          name="student_last_name" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[tracking_item_ext_id]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[tracking_item_ext_id]"
                          name="tracking_item_ext_id" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[tracking_rule_name]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[tracking_rule_name]"
                          name="tracking_rule_name" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[appointment_item_ext_id]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[appointment_item_ext_id]"
                          name="appointment_item_ext_id" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors]"
                      description="Logs errors only to tbl_WL_ETL_Load_Errors"
                      hasSideEffects="true"
                      name="Output - Record Level Parse Errors">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[File_Name]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[File_Name]"
                          name="File_Name" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[Failed_Line_Text]"
                          dataType="wstr"
                          length="4000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[Failed_Line_Text]"
                          name="Failed_Line_Text" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[Lookup_WorkdayID]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[Lookup_WorkdayID]"
                          name="Lookup_WorkdayID" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[Lookup_Value]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[Lookup_Value]"
                          name="Lookup_Value" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[Additional_Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[Additional_Data]"
                          name="Additional_Data" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[ErrorCode]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[ErrorCode]"
                          name="ErrorCode" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[ErrorColumn]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[ErrorColumn]"
                          name="ErrorColumn" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[Message]"
                          codePage="1252"
                          dataType="str"
                          length="5000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors].Columns[Message]"
                          name="Message" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging]"
                      hasSideEffects="true"
                      name="Output - Field Level Parse Logging">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Control_ID]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Control_ID]"
                          name="Parse_Control_ID" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Source_File]"
                          codePage="1252"
                          dataType="str"
                          length="1000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Source_File]"
                          name="Parse_Source_File" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Source_Line_Text]"
                          dataType="wstr"
                          length="4000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Source_Line_Text]"
                          name="Parse_Source_Line_Text" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Source_Line_Offset]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Source_Line_Offset]"
                          name="Parse_Source_Line_Offset" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Target_Field_Number]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Target_Field_Number]"
                          name="Target_Field_Number" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Target_Field_Name]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Target_Field_Name]"
                          name="Target_Field_Name" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Target_Field_DataType]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Target_Field_DataType]"
                          name="Target_Field_DataType" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Target_Field_Nullable]"
                          codePage="1252"
                          dataType="str"
                          length="20"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Target_Field_Nullable]"
                          name="Target_Field_Nullable" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Field_Text]"
                          dataType="wstr"
                          length="4000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Field_Text]"
                          name="Parse_Field_Text" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_PassFail_Result]"
                          codePage="1252"
                          dataType="str"
                          length="20"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_PassFail_Result]"
                          name="Parse_PassFail_Result" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Truncation_Error]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Truncation_Error]"
                          name="Parse_Truncation_Error" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Nullability_Error]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Nullability_Error]"
                          name="Parse_Nullability_Error" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_DataType_Error]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_DataType_Error]"
                          name="Parse_DataType_Error" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_FieldCount_Error]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_FieldCount_Error]"
                          name="Parse_FieldCount_Error" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Format_Error]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Format_Error]"
                          name="Parse_Format_Error" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Other_Error]"
                          codePage="1252"
                          dataType="str"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Other_Error]"
                          name="Parse_Other_Error" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Error_Message]"
                          codePage="1252"
                          dataType="str"
                          length="2000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Field Level Parse Logging].Columns[Parse_Error_Message]"
                          name="Parse_Error_Message" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging]"
                      hasSideEffects="true"
                      name="Output - File Level Parse Logging">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Parse_Source_File]"
                          codePage="1252"
                          dataType="str"
                          length="1000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Parse_Source_File]"
                          name="Parse_Source_File" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Lines_Parsed]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Lines_Parsed]"
                          name="Total_Lines_Parsed" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Lines_Passed]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Lines_Passed]"
                          name="Total_Lines_Passed" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Lines_Failed]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Lines_Failed]"
                          name="Total_Lines_Failed" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Fields_Parsed]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Fields_Parsed]"
                          name="Total_Fields_Parsed" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Fields_Passed]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Fields_Passed]"
                          name="Total_Fields_Passed" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Fields_Failed]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Fields_Failed]"
                          name="Total_Fields_Failed" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Truncation_Errors]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Truncation_Errors]"
                          name="Total_Truncation_Errors" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Nullability_Errors]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Nullability_Errors]"
                          name="Total_Nullability_Errors" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_DataType_Errors]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_DataType_Errors]"
                          name="Total_DataType_Errors" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_FieldCount_Errors]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_FieldCount_Errors]"
                          name="Total_FieldCount_Errors" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Format_Errors]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Format_Errors]"
                          name="Total_Format_Errors" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Other_Errors]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Level Parse Logging].Columns[Total_Other_Errors]"
                          name="Total_Other_Errors" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;10"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="SCR _HashValue"
                  version="13">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[

#region Namespaces
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Pipeline;
using System.Text;
using System.Windows.Forms;
using System.Security.Cryptography;

#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]

#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion


public class ScriptMain : UserComponent
{
    

    #region Methods
    private PipelineBuffer inputBuffer;

    /// <summary>
    /// The ProcessInput method is called to provide the component a full PipelineBuffer object that contains rows from the upstream component.
    /// The columns contained in buffer include those columns defined in the IDTSInputColumnCollection100 of the component.
    /// If the component has synchronous outputs, the buffer will also include the columns added to the output column collection by the component,
    /// and all the columns in the output column collection of the components upstream from the component.
    /// </summary>
    /// <param name="InputID">The ID of the input of the component.</param>
    /// <param name="Buffer">The PipelineBuffer object.</param>
    public override void ProcessInput(int InputID, Microsoft.SqlServer.Dts.Pipeline.PipelineBuffer Buffer)
    {
        inputBuffer = Buffer;
        base.ProcessInput(InputID, Buffer);
    }
    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        //Holds the number of columns in the row
        int counter = 0;
        //Used to concatenate columns in our row
        StringBuilder values = new StringBuilder();
        //Will be used to hold the value of the column in the loop
        object value = null;
        //Will be used to capture the string
        string probStr = null;
        //Will be used to hold the length of the blob
        int probBlobLen = 0;
        //Will be used to hold the bytes of the blob
        byte[] probbytBlob = null;
        //Will be used to test the type of blob(ASCII or Unicode)
        object tester = null;
        //Will be used to determine case sensitivity
        string caseSensitive = Variables.strCaseSensitive;
            //Variables.strCaseSensitive;

        //Loops through the columns in the current record in the buffer
        for (counter = 0; counter < inputBuffer.ColumnCount - 1; counter++)
        {
            //Checks for null values in the column, if not we process the value, else we submit a blank to the string builder
            if (inputBuffer.IsNull(counter) == false)
            {
                //Sets tester to the object type of the column being evaluated in the loop
                tester = inputBuffer[counter].GetType();
                //Gets SSIS specific data type
                BufferColumn bc = inputBuffer.GetColumnInfo(counter);

                //Checks to see if the data is a BLOB
                if (object.ReferenceEquals(tester, typeof(BlobColumn)))
                {

                    //Convert BLOB data to string
                    probBlobLen = (int)inputBuffer.GetBlobLength(counter);
                    probbytBlob = inputBuffer.GetBlobData(counter, 0, probBlobLen);

                    //If input is Unicode
                    if (bc.DataType == DataType.DT_NTEXT)
                    {
                        probStr = System.Text.Encoding.Unicode.GetString(probbytBlob);

                    }
                    //If input is ASCII
                    else
                    {
                        probStr = System.Text.Encoding.ASCII.GetString(probbytBlob);

                    }
                    //Sets the value object to the current column in the loop if BLOB
                    value = probStr;
                }
                else
                {
                    //Sets the value object to the current column in the loop
                    value = inputBuffer[counter].ToString();

                }
                //Appends the StringBuilder with the value from the current column in the loop
                values.Append(value);
                values.Append("|");
            }
            else
            {
                //Appends the String Builder with a field separator if the incoming column has a null value
                values.Append("|");
            }
        }

        //Sets the output of the component to the SHA1 hash of the String Builder value

        //Not case sensitve
        if (caseSensitive == "N")
        {
            Row.NewHash = CreateMD5Hash(values.ToString().ToUpper());

        }
        //Case sensitive
        else
        {
            Row.NewHash = CreateMD5Hash(values.ToString());

        }

    }

    /// <summary>
    /// Generates a SHA1 hash value for a string passed
    /// </summary>
    /// <param name="data">Data string that is to be hashed</param>
    /// <returns>SAH1 hash value string</returns>
    //public static string CreateHash(string data)
    //{
    //    byte[] dataToHash = (new UnicodeEncoding()).GetBytes(data);
    //    SHA1CryptoServiceProvider sha = new SHA1CryptoServiceProvider();
    //    byte[] hashedData = sha.ComputeHash(dataToHash);
    //    RNGCryptoServiceProvider.Create().GetBytes(dataToHash);
    //    string s = Convert.ToBase64String(hashedData, Base64FormattingOptions.None);
    //    return s;
    //}

    public string CreateMD5Hash(string data)
    {
        // Step 1, calculate MD5 hash from input
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(data);
        byte[] hashBytes = md5.ComputeHash(inputBytes);

        // Step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hashBytes.Length; i++)
        {
            sb.Append(hashBytes[i].ToString("X2"));
        }
        return sb.ToString();
    }



    #endregion
}



]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String cmsnoteextid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool cmsnoteextid_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String notetype
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
    }
    public bool notetype_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public String subject
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[2]);
        }
    }
    public bool subject_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public Int32 authorintegrationid
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[3]);
        }
    }
    public bool authorintegrationid_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public String authorinstitutionalemail
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
    }
    public bool authorinstitutionalemail_IsNull
    {
        get
        {
            return IsNull(4);
        }
    }

    public Int32 studentintegrationid
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[5]);
        }
    }
    public bool studentintegrationid_IsNull
    {
        get
        {
            return IsNull(5);
        }
    }

    public String studentid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[6]);
        }
    }
    public bool studentid_IsNull
    {
        get
        {
            return IsNull(6);
        }
    }

    public String noteextid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[7]);
        }
    }
    public bool noteextid_IsNull
    {
        get
        {
            return IsNull(7);
        }
    }

    public String body
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[8]);
        }
    }
    public bool body_IsNull
    {
        get
        {
            return IsNull(8);
        }
    }

    public String authoruserid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[9]);
        }
    }
    public bool authoruserid_IsNull
    {
        get
        {
            return IsNull(9);
        }
    }

    public String authorfirstname
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[10]);
        }
    }
    public bool authorfirstname_IsNull
    {
        get
        {
            return IsNull(10);
        }
    }

    public String authorlastname
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[11]);
        }
    }
    public bool authorlastname_IsNull
    {
        get
        {
            return IsNull(11);
        }
    }

    public String studentuserid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[12]);
        }
    }
    public bool studentuserid_IsNull
    {
        get
        {
            return IsNull(12);
        }
    }

    public String studentfirstname
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[13]);
        }
    }
    public bool studentfirstname_IsNull
    {
        get
        {
            return IsNull(13);
        }
    }

    public String studentlastname
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[14]);
        }
    }
    public bool studentlastname_IsNull
    {
        get
        {
            return IsNull(14);
        }
    }

    public String trackingitemextid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[15]);
        }
    }
    public bool trackingitemextid_IsNull
    {
        get
        {
            return IsNull(15);
        }
    }

    public Int32 trackingrulename
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[16]);
        }
    }
    public bool trackingrulename_IsNull
    {
        get
        {
            return IsNull(16);
        }
    }

    public String appointmentitemextid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[17]);
        }
    }
    public bool appointmentitemextid_IsNull
    {
        get
        {
            return IsNull(17);
        }
    }

    public String date
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[18]);
        }
    }
    public bool date_IsNull
    {
        get
        {
            return IsNull(18);
        }
    }

    public String NewHash
    {
        set
        {
            this[19] = value;
        }
    }
    public bool NewHash_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(19);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 Connection
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"Connection").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String strCaseSensitive
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["strCaseSensitive"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0d4c795259d145579c25b7a7fd80aadf.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{3C9DD22E-8575-4053-899C-01020A7EF92F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_0d4c795259d145579c25b7a7fd80aadf</RootNamespace>
    <AssemblyName>SC_0d4c795259d145579c25b7a7fd80aadf</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0d4c795259d145579c25b7a7fd80aadf.Properties.Settings.get_Default():SC_0d4c795259d145579c25b7a7fd80aadf.Properties.Sett" +
    "ings")]

namespace SC_0d4c795259d145579c25b7a7fd80aadf.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_0d4c795259d145579c25b7a7fd80aadf</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_0d4c795259d145579c25b7a7fd80aadf</msb:DisplayName>
    <msb:ProjectId>{5A2264D0-3143-442D-8A0A-66EA5C2AC636}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_0d4c795259d145579c25b7a7fd80aadf.csproj" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_0d4c795259d145579c25b7a7fd80aadf")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_0d4c795259d145579c25b7a7fd80aadf")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0d4c795259d145579c25b7a7fd80aadf.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0d4c795259d145579c25b7a7fd80aadf.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0d4c795259d145579c25b7a7fd80aadf.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_0d4c795259d145579c25b7a7fd80aadf.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_0d4c795259d145579c25b7a7fd80aadf.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0d4c795259d145579c25b7a7fd80aadf.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[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
EABpAPQJBgCxAPQJBgDRAPQJFQDhAPQJBgChANQLGwB5APQJBgBxALoHMABxAMkHNQCBAKsCOgBx
AMEIPwDpAOUBRQBxAGMFTABxAOYAUQCJAKICWQAJAccBXgAJATMFZAAJAcYAXgCBACoFagB5ALAB
bgB5ALABdABxAH8LegARAYMMfgARAZsJagAZAQkDjgAJAdwKlAAhAUsFmgApASoFoQCRAPQJpgCR
AGoJsACRAOUKtABxADMFuACRALoHMABxAKgAvQCRANIHwgCRAMEHAQAxAfQJEACRAEgMyACRADkL
yAChAPQJBgARARMLzAChAPkK1ACBAPQJBgChANAA2gBBAVsI4ABJAQEC5gBRAYUJ7QChAMYK8gBZ
AckH+AChABwM/wBhAe0LBQHpAHYMDAG5APQJEgHZAPQJBgAuAAsAmAEuABMAoQEuABsAwAEuACMA
yQEuACsA8gEuADMA8gEuADsA8gEuAEMAyQEuAEsA+AEuAFMA8gEuAFsADwJDAGMAWQLjAGsAWQIB
AXsAWQJpBXMAwAGJBXMAwAEiAIQAAwABAAUAKQAGACoABwArAAgALQAAAHQBeAEAAGoGfAEAALcC
eAEAAEcHfAEAADELeAEAAKIHfAEAAAQBgAEAANAFfAEAAIsFeAEAAH4HfAEAABwBgAEAAO8FfAEA
AFgBeAEAAEAGfAEAAHcBeAEAAG0GfAEAAFQMeAEAALUHfAEAADUBeAEAAA8GfAEAAFwCeAEAABAH
fAEAADUCeAEAANsGfAEAAEYBeAEAACcGfAEAAHACeAEAACsHfAEAAEgCeAEAAPUGfAEAAIUBeAEA
AIIGfAEAACACgAEAAL8GfAEAAJsBeAEAAJ8GfAEAAAQDeAEAAFsHfAEAAFsFeAEAAGsHfAEAAH8I
hAEAANIEeAEAAHUJiQEAAOACjgEAAEkLkwECAAYAAwACAAcABQACAAgABwACAAkACQACAAoACwAC
AAsADQACAAwADwACAA0AEQACAA4AEwACAA8AFQACABAAFwACABEAGQACABIAGwACABMAHQACABQA
HwACABUAIQACABYAIwACABcAJQACABgAJwACABkAKQACABoAKwACABsALQACABwALwACAB0AMQAC
AB4AMwACAB8ANQACACAANwACACEAOQACACIAOwACACMAPQACACQAPwACACUAQQACACYAQwACACcA
RQACACgARwACACkASQACACoASwACACsATQABACwATwABAC0AUQACADUAUwACADcAVQACADkAVwAC
ADoAWQABADsAWQACADwAWwAEgAAAAQAAAAAAAAAAAAAAAADjBAAABAAAAAAAAAAAAAAAGgH3AAAA
AAAQAAAAAAAAAAAAAAAjAY8LAAAAABAAAAAAAAAAAAAAACMBrAsAAAAAEAAAAAAAAAAAAAAAIwHn
CAAAAAAEAAAAAAAAAAAAAAAaAdsHAAAAABAAAAAAAAAAAAAAACMBCgkAAAAAAAAAAAEAAABFCgAA
AAAAAABJRFRTQ29tcG9uZW50TWV0YURhdGExMDAASURUU1ZhcmlhYmxlMTAwAElEVFNSdW50aW1l
Q29ubmVjdGlvbkNvbGxlY3Rpb24xMDAASURUU1J1bnRpbWVDb25uZWN0aW9uMTAwAElEVFNDb25u
ZWN0aW9uTWFuYWdlcjEwMABJRFRTVmFyaWFibGVzMTAwAElEVFNFdmFsdWF0b3JDb250ZXh0MTAw
AEdldEludDMyAE1ENQA8TW9kdWxlPgBJbnB1dElEAGdldF9BU0NJSQBnZXRfQ29tcG9uZW50TWV0
YURhdGEAR2V0QmxvYkRhdGEAZGF0YQBtc2NvcmxpYgBnZXRfYXV0aG9yaW50ZWdyYXRpb25pZABn
ZXRfc3R1ZGVudGludGVncmF0aW9uaWQAZ2V0X2F1dGhvcnVzZXJpZABnZXRfc3R1ZGVudHVzZXJp
ZABnZXRfc3R1ZGVudGlkAGdldF9ub3RlZXh0aWQAZ2V0X2Ntc25vdGVleHRpZABnZXRfdHJhY2tp
bmdpdGVtZXh0aWQAZ2V0X2FwcG9pbnRtZW50aXRlbWV4dGlkAEFwcGVuZABkZWZhdWx0SW5zdGFu
Y2UAZ2V0X1VuaWNvZGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUASW5wdXRO
YW1lAEdldFJ1bnRpbWVDb25uZWN0aW9uQnlOYW1lAGdldF90cmFja2luZ3J1bGVuYW1lAGdldF9h
dXRob3JsYXN0bmFtZQBnZXRfc3R1ZGVudGxhc3RuYW1lAGdldF9hdXRob3JmaXJzdG5hbWUAZ2V0
X3N0dWRlbnRmaXJzdG5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUARGF0YVR5
cGUAR2V0VHlwZQBnZXRfbm90ZXR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VD
dWx0dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAGdldF9kYXRlAENyZWF0ZQBFZGl0b3JCcm93
c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2Rl
QXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFz
c2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJh
bWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURl
c2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1i
bHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRD
b21wb25lbnRFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50
aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBCeXRlAHZhbHVlAGdldF9zdHJDYXNlU2Vuc2l0aXZl
AFNDXzBkNGM3OTUyNTlkMTQ1NTc5YzI1YjdhN2ZkODBhYWRmAEVuY29kaW5nAFN5c3RlbS5SdW50
aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAR2V0U3RyaW5nAENyZWF0ZU1ENUhhc2gAQ29tcHV0ZUhh
c2gAc2V0X05ld0hhc2gAR2V0QmxvYkxlbmd0aABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAZ2V0X2F1
dGhvcmluc3RpdHV0aW9uYWxlbWFpbABTQ18wZDRjNzk1MjU5ZDE0NTU3OWMyNWI3YTdmZDgwYWFk
Zi5kbGwAZ2V0X2F1dGhvcmludGVncmF0aW9uaWRfSXNOdWxsAGdldF9zdHVkZW50aW50ZWdyYXRp
b25pZF9Jc051bGwAZ2V0X2F1dGhvcnVzZXJpZF9Jc051bGwAZ2V0X3N0dWRlbnR1c2VyaWRfSXNO
dWxsAGdldF9zdHVkZW50aWRfSXNOdWxsAGdldF9ub3RlZXh0aWRfSXNOdWxsAGdldF9jbXNub3Rl
ZXh0aWRfSXNOdWxsAGdldF90cmFja2luZ2l0ZW1leHRpZF9Jc051bGwAZ2V0X2FwcG9pbnRtZW50
aXRlbWV4dGlkX0lzTnVsbABnZXRfdHJhY2tpbmdydWxlbmFtZV9Jc051bGwAZ2V0X2F1dGhvcmxh
c3RuYW1lX0lzTnVsbABnZXRfc3R1ZGVudGxhc3RuYW1lX0lzTnVsbABnZXRfYXV0aG9yZmlyc3Ru
YW1lX0lzTnVsbABnZXRfc3R1ZGVudGZpcnN0bmFtZV9Jc051bGwAZ2V0X25vdGV0eXBlX0lzTnVs
bABnZXRfZGF0ZV9Jc051bGwAc2V0X05ld0hhc2hfSXNOdWxsAGdldF9hdXRob3JpbnN0aXR1dGlv
bmFsZW1haWxfSXNOdWxsAGdldF9zdWJqZWN0X0lzTnVsbABnZXRfYm9keV9Jc051bGwAU2V0TnVs
bABnZXRfSXRlbQBzZXRfSXRlbQBTeXN0ZW0ASGFzaEFsZ29yaXRobQByZXNvdXJjZU1hbgBTY3Jp
cHRNYWluAEJsb2JDb2x1bW4AQnVmZmVyQ29sdW1uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3Rl
bS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAGdldF9SdW50aW1lQ29ubmVjdGlvbkNv
bGxlY3Rpb24AZ2V0X0Nvbm5lY3Rpb24ASW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbgBTdHJpbmdD
b21wYXJpc29uAEN1bHR1cmVJbmZvAEdldENvbHVtbkluZm8AT3V0cHV0TmFtZU1hcABPdXRwdXRN
YXAATWljcm9zb2Z0LlNxbFNlcnZlci5EVFNSdW50aW1lV3JhcABNaWNyb3NvZnQuU3FsU2VydmVy
LkRUU1BpcGVsaW5lV3JhcABTdHJpbmdCdWlsZGVyAElucHV0MEJ1ZmZlcgBQaXBlbGluZUJ1ZmZl
cgBTY3JpcHRCdWZmZXIAaW5wdXRCdWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ29ubmVj
dGlvbk1hbmFnZXIAVG9VcHBlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBw
ZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlcgAuY3RvcgAuY2N0b3IA
U3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVt
LlJlc291cmNlcwBTQ18wZDRjNzk1MjU5ZDE0NTU3OWMyNWI3YTdmZDgwYWFkZi5Qcm9wZXJ0aWVz
LlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU0NfMGQ0Yzc5NTI1OWQxNDU1Nzlj
MjViN2E3ZmQ4MGFhZGYuUHJvcGVydGllcwBnZXRfUmVhZE9ubHlWYXJpYWJsZXMAR2V0Qnl0ZXMA
QnVmZmVyQ29sdW1uSW5kZXhlcwBHZXRDb2x1bW5JbmRleGVzAFNldHRpbmdzAEVxdWFscwBDb25u
ZWN0aW9ucwBPYmplY3QAZ2V0X3N1YmplY3QARW5kT2ZSb3dzZXQAZ2V0X0RlZmF1bHQAVXNlckNv
bXBvbmVudABQYXJlbnRDb21wb25lbnQAU2NyaXB0Q29tcG9uZW50AGdldF9Db2x1bW5Db3VudABN
aWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlwZWxpbmVI
b3N0AElucHV0MF9Qcm9jZXNzSW5wdXQAU3lzdGVtLlRleHQAR2V0VmFsdWVXaXRoQ29udGV4dABT
Y3JpcHRDb21wb25lbnRFdmFsQ29udGV4dABnZXRfRXZhbHVhdG9yQ29udGV4dABJbnB1dDBfUHJv
Y2Vzc0lucHV0Um93AE5leHRSb3cAZ2V0X2JvZHkAU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBo
eQBnZXRfQXNzZW1ibHkAb3BfRXF1YWxpdHkAAAADfAAAA04AAAVYADIAAICbSQBzAE4AdQBsAGwA
IABwAHIAbwBwAGUAcgB0AHkAIABjAGEAbgBuAG8AdAAgAGIAZQAgAHMAZQB0ACAAdABvACAARgBh
AGwAcwBlAC4AIABBAHMAcwBpAGcAbgAgAGEAIAB2AGEAbAB1AGUAIAB0AG8AIAB0AGgAZQAgAGMA
bwBsAHUAbQBuACAAaQBuAHMAdABlAGEAZAAuAAAPSQBuAHAAdQB0ACAAMAAAFUMAbwBuAG4AZQBj
AHQAaQBvAG4AACFzAHQAcgBDAGEAcwBlAFMAZQBuAHMAaQB0AGkAdgBlAABxUwBDAF8AMABkADQA
YwA3ADkANQAyADUAOQBkADEANAA1ADUANwA5AGMAMgA1AGIANwBhADcAZgBkADgAMABhAGEAZABm
AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAAPgOJdlWl39Ppw15
uWS2sdQABCABAQgDIAABBSABARERBCABAQ4FIAEBEWUGIAIBCBI5DQcICBI9HA4IHQUOEUUEIAEC
CAQgARwIBCAAEnUFIAERRQgGAAESdRF9BCABCQgHIAMdBQgICAQGEYCBBQAAEoCFBSABDh0FAyAA
DgUgARI9HAUgARI9DgMgAAgFAAICDg4JBwQdBR0FEj0IBQAAEoCNBSABHQUOBiABHQUdBQQgAQ4O
CSADARI5HQgSTQMGEjkDBh0IBCABDggEIAEICAUgAgEIHAMgAAIHIAICDhGAnQUgAR0ICAUgABKA
oQUgABKApQYgARKAqQ4EIAASVQUgABKArQYgARKAsRwFAAASgLUGIAEcEoC5BSAAEoC9ByACAQ4S
gL0It3pcVhk04IkIiYRdzYCAzJEDBhIUAwYSGAMGElEDBhJdAwYSYQMGEiAFIAEBEgwEIAEBAgkg
BAEIDhI5Ek0FIAEBElEEAAASXQQAABJhBQABARJhBAAAEiADAAABAygADgMoAAIDKAAIBCgAElUE
CAASXQQIABJhBAgAEiAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEA
AgAAAAAAKAEAI1NDXzBkNGM3OTUyNTlkMTQ1NTc5YzI1YjdhN2ZkODBhYWRmAAAFAQAAAAAWAQAR
Q29weXJpZ2h0IEAgIDIwMjEAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJh
bWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43BAEAAAAAALQAAADOyu++AQAAAJEA
AABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4w
LjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5
c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAAA
QgAAAAAAAAAAAAAaQgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEIAAAAAAAAAAAAAAABfQ29y
RGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAA
ABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAA
7AMAAAAAAAAAAAAA7AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4A
AAEAAAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEA
cgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACw
BEwDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAACgDAAABADAAMAAwADAAMAA0AGIA
MAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBt
AGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBDAF8A
MABkADQAYwA3ADkANQAyADUAOQBkADEANAA1ADUANwA5AGMAMgA1AGIANwBhADcAZgBkADgAMABh
AGEAZABmAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAALgAwAAAA
cAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwAwAGQANABjADcAOQA1ADIANQA5
AGQAMQA0ADUANQA3ADkAYwAyADUAYgA3AGEANwBmAGQAOAAwAGEAYQBkAGYALgBkAGwAbAAAAEgA
EgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAg
ACAAMgAwADIAMQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAA
eAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAQwBfADAAZAA0AGMANwA5
ADUAMgA1ADkAZAAxADQANQA1ADcAOQBjADIANQBiADcAYQA3AGYAZAA4ADAAYQBhAGQAZgAuAGQA
bABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMAXwAwAGQANABjADcAOQA1
ADIANQA5AGQAMQA0ADUANQA3ADkAYwAyADUAYgA3AGEANwBmAGQAOAAwAGEAYQBkAGYAAAA0AAgA
AQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAOAAIAAEAQQBz
AHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAACwyAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_0d4c795259d145579c25b7a7fd80aadf</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::strCaseSensitive</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum"
                      typeConverter="NOTBROWSABLE">1df6cfa8cbcf9ab163b3e6ccfd145d2e</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataShaChecksum"
                      typeConverter="NOTBROWSABLE">0a41f6e08946d480bc571cc216d8219582357232</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">1F</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Connections[Connection]"
                      connectionManagerID="Package.ConnectionManagers[DW-SQL.Stage]"
                      connectionManagerRefId="Package.ConnectionManagers[DW-SQL.Stage]"
                      name="Connection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0]"
                      hasSideEffects="true"
                      name="Input 0">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[cms_note_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="100"
                          cachedName="cms_note_ext_id"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[cms_note_ext_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[note_type]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="note_type"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[note_type]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[subject]"
                          cachedDataType="wstr"
                          cachedLength="1000"
                          cachedName="subject"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[subject]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[author_integration_id]"
                          cachedDataType="i4"
                          cachedName="author_integration_id"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_integration_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[author_institutional_email]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_institutional_email"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_institutional_email]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[student_integration_id]"
                          cachedDataType="i4"
                          cachedName="student_integration_id"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_integration_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[student_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_id"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[note_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="note_ext_id"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[note_ext_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[body]"
                          cachedDataType="wstr"
                          cachedLength="4000"
                          cachedName="body"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[body]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[author_userid]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_userid"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_userid]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[author_first_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_first_name"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_first_name]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[author_last_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_last_name"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[author_last_name]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[student_userid]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_userid"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_userid]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[student_first_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_first_name"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_first_name]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[student_last_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_last_name"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[student_last_name]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[tracking_item_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="tracking_item_ext_id"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[tracking_item_ext_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[tracking_rule_name]"
                          cachedDataType="i4"
                          cachedName="tracking_rule_name"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[tracking_rule_name]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[appointment_item_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="appointment_item_ext_id"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[appointment_item_ext_id]" />
                        <inputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0].Columns[date]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="date"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data].Columns[date]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Outputs[Output 0]"
                      name="Output 0"
                      synchronousInputId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Outputs[Output 0].Columns[New_Hash]"
                          dataType="wstr"
                          length="250"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Outputs[Output 0].Columns[New_Hash]"
                          name="New_Hash" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Set Script Parameters"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[File Location]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="15"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[File Location]"
                          name="File Location"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">@[User::SourceFolder]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">@[User::SourceFolder]</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[File Name]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[File Name]"
                          name="File Name"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">@[User::FileName]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">@[User::FileName]</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Header Line Count]"
                          dataType="i4"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Header Line Count]"
                          name="Header Line Count"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">1</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">1</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Column Header Line]"
                          dataType="i4"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Column Header Line]"
                          name="Column Header Line"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">1</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">1</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Column Header List]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="4000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Column Header List]"
                          name="Column Header List"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">""</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">""</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Max Lines To Process]"
                          dataType="i4"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Max Lines To Process]"
                          name="Max Lines To Process"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">-1</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">-1</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Max Errors To Ignore]"
                          dataType="i4"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Max Errors To Ignore]"
                          name="Max Errors To Ignore"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">-1</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">-1</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Max Events To Log]"
                          dataType="i4"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Max Events To Log]"
                          name="Max Events To Log"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">-1</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">-1</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Parse Log Level AE (All or Errors-Only)]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Parse Log Level AE (All or Errors-Only)]"
                          name="Parse Log Level AE (All or Errors-Only)"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"E"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"E"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Allow Missing Columns YN]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Allow Missing Columns YN]"
                          name="Allow Missing Columns YN"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"Y"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"Y"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Allow Extra Columns YN]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Allow Extra Columns YN]"
                          name="Allow Extra Columns YN"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"Y"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"Y"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Column Names Case Sensitive YN]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Column Names Case Sensitive YN]"
                          name="Column Names Case Sensitive YN"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"N"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"N"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Truncate String Values YN]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Truncate String Values YN]"
                          name="Truncate String Values YN"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"Y"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"Y"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Strip Unicode from Non-Unicode YN]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Strip Unicode from Non-Unicode YN]"
                          name="Strip Unicode from Non-Unicode YN"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"Y"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"Y"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Convert Three-Char Timezoned to Offsets YN]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Convert Three-Char Timezoned to Offsets YN]"
                          name="Convert Three-Char Timezoned to Offsets YN"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"Y"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"Y"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fix Date Values YN]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="50"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fix Date Values YN]"
                          name="Fix Date Values YN"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"Y"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"Y"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Earliest Allowable Year]"
                          dataType="i4"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Earliest Allowable Year]"
                          name="Earliest Allowable Year"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">1753</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">1753</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Allowable Date Formats]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="23"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Allowable Date Formats]"
                          name="Allowable Date Formats"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"yyyy-MM-dd HH:mm:ss zzz"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"yyyy-MM-dd HH:mm:ss zzz"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Convert to TimeZone]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Convert to TimeZone]"
                          name="Convert to TimeZone"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"Eastern Standard Time"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"Eastern Standard Time"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Workday ID Column]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Workday ID Column]"
                          name="Workday ID Column"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">""</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">""</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Lookup Value Column]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Lookup Value Column]"
                          name="Lookup Value Column"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">""</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">""</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Additional Data Column]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Additional Data Column]"
                          name="Additional Data Column"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">""</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">""</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Not Null Columns]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="8000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Not Null Columns]"
                          name="Not Null Columns"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">""</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">""</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Mandatory Columns]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Mandatory Columns]"
                          name="Mandatory Columns"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">""</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">""</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Non-Truncateable Columns]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="4000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Non-Truncateable Columns]"
                          name="Non-Truncateable Columns"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">""</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">""</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Column Regex Patterns]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="8000"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Column Regex Patterns]"
                          name="Column Regex Patterns"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">""</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">""</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[File Name Output Column]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[File Name Output Column]"
                          name="File Name Output Column"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"Input_File_Name"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"Input_File_Name"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Record Text Output Column]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Record Text Output Column]"
                          name="Record Text Output Column"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"Input_Line_Text"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"Input_Line_Text"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fail On Extra Column YN]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fail On Extra Column YN]"
                          name="Fail On Extra Column YN"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"N"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"N"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fail On Missing Column YN]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fail On Missing Column YN]"
                          name="Fail On Missing Column YN"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"N"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"N"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fail On Missing Mandatory Column In Header YN]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fail On Missing Mandatory Column In Header YN]"
                          name="Fail On Missing Mandatory Column In Header YN"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"Y"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"Y"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fail On Missing Mandatory Column In Line YN]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="1"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output].Columns[Fail On Missing Mandatory Column In Line YN]"
                          name="Fail On Missing Mandatory Column In Line YN"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"N"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"N"</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Derived Column Output]"
                  endId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Inputs[Input - Configuration Parameter]"
                  name="Derived Column Output"
                  startId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Derived Column Output1]"
                  endId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors.Inputs[OLE DB Destination Input]"
                  name="Derived Column Output"
                  startId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Derived Column Output2]"
                  endId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Inputs[Input 0]"
                  name="Derived Column Output"
                  startId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[OLE DB Source Output]"
                  endId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters.Inputs[Derived Column Input]"
                  name="OLE DB Source Output"
                  startId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row.Outputs[OLE DB Source Output]" />
                <path
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Output - File Data]"
                  endId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns.Inputs[Derived Column Input]"
                  name="Output - File Data"
                  startId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - File Data]" />
                <path
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Output - Record Level Parse Errors]"
                  endId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns.Inputs[Derived Column Input]"
                  name="Output - Record Level Parse Errors"
                  startId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*.Outputs[Output - Record Level Parse Errors]" />
                <path
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Output 0]"
                  endId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Row Count.Inputs[Row Count Input 1]"
                  name="Output 0"
                  startId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue.Outputs[Output 0]" />
                <path
                  refId="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Row Count Output 1]"
                  endId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes.Inputs[OLE DB Destination Input]"
                  name="Row Count Output 1"
                  startId="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Row Count.Outputs[Row Count Output 1]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{9B26CE2D-B6B1-42F3-816A-CB5886FF7772}"
          DTS:ObjectName="{9B26CE2D-B6B1-42F3-816A-CB5886FF7772}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::FileName" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Sequence Container"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{C0F5E793-6990-4169-9CE3-A99448599F86}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Archive File"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{24C3A62E-9574-4237-9F8B-1258C70BD502}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Archive File"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_2f3d40c5a861436994b89e55eba0b7ca"
              VSTAMajorVersion="16"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::DestinationFolder,User::SourceFolder"
              ReadWriteVariables="User::FilesMovedCount">
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2f3d40c5a861436994b89e55eba0b7ca.Properties.Settings.get_Default():ST_2f3d40c5a861436994b89e55eba0b7ca.Properties.Sett" +
    "ings")]

namespace ST_2f3d40c5a861436994b89e55eba0b7ca.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
#endregion

namespace ST_2f3d40c5a861436994b89e55eba0b7ca
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            string folderpart;
            bool FolderExistFlg;
            string destFolder;
            destFolder = Dts.Variables["User::DestinationFolder"].Value.ToString();
            string sourceFolder = Dts.Variables["User::SourceFolder"].Value.ToString();
            string fName;

            Int32 fileCnt = 0;

            try
            {

                var directory = new DirectoryInfo(sourceFolder);
                FileInfo[] files = directory.GetFiles("notes_*");
                foreach (FileInfo file in files)
                {
                    folderpart = file.Name.Substring(0, file.Name.LastIndexOf("_"));
                    FolderExistFlg = Directory.Exists(destFolder + folderpart);

                    if (!FolderExistFlg)
                    {
                        Directory.CreateDirectory(destFolder + "\\" + folderpart);
                    }
                    if (File.Exists(destFolder + "\\" + folderpart + "\\" + file.Name))
                    {
                        File.Delete(destFolder + "\\" + folderpart + "\\" + file.Name);

                    }


                    fName = file.FullName.ToString();
                    File.Move(fName, destFolder + "\\" + folderpart + "\\" + file.Name);

                    fileCnt += 1;

                }
                Dts.Variables["User::FilesMovedCount"].Value = Convert.ToInt32(fileCnt);


                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "An error occured", ex.Message, String.Empty, 0);

            }
        }
        #region ScriptResults declaration
            /// <summary>
            /// This enum provides a convenient shorthand within the scope of this class for setting the
            /// result of the script.
            /// 
            /// This code was generated automatically.
            /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="ST_2f3d40c5a861436994b89e55eba0b7ca.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{25B9DDDF-7881-4BD6-98AA-AAC6225E1133}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_2f3d40c5a861436994b89e55eba0b7ca</RootNamespace>
    <AssemblyName>ST_2f3d40c5a861436994b89e55eba0b7ca</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_2f3d40c5a861436994b89e55eba0b7ca</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_2f3d40c5a861436994b89e55eba0b7ca</msb:DisplayName>
    <msb:ProjectId>{47DE4DED-5129-4E6F-80C8-72CE7164A974}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_2f3d40c5a861436994b89e55eba0b7ca.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_2f3d40c5a861436994b89e55eba0b7ca")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_2f3d40c5a861436994b89e55eba0b7ca")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2f3d40c5a861436994b89e55eba0b7ca.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2f3d40c5a861436994b89e55eba0b7ca.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2f3d40c5a861436994b89e55eba0b7ca.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_2f3d40c5a861436994b89e55eba0b7ca.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_2f3d40c5a861436994b89e55eba0b7ca.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_2f3d40c5a861436994b89e55eba0b7ca.dll">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
giIAAAAAhhjYBAYAAgCKIgAAAACRGN4E9AACAAAAAQAmAwkA2AQBABEA2AQGABkA2AQKACkA2AQQ
ADEA2AQQADkA2AQQAEEA2AQQAEkA2AQQAFEA2AQQAFkA2AQQAGEA2AQQAGkA2AQGAJEA2AQGALkA
2AQVAMkA2AQGAHEA0gUqANEAqgUvANkAAgQ0AOEAEgM6AJkAVwM+AOkA2AQQAOkAuAVCAPEAvgA+
APkAMQNJAPkAYANOAPkA+gVUAAEB8wVaAPkA+gVfAAEBOAZmAPkA+gVsAAkB8wVaAAkBcgFyAPEA
xwA+AAkBLAN3ABEBAQB9AOEAHAOCANEAFAYBANEA6AWHAIEAgAA+APkASAaNACEBzgSQAHEA2AQG
AJkA2AQGACkBpwCZACkBKwaiAKEA2ASoAMEA2AQGAAgAFADCAAgAGADHACkAcwAvAS4ACwAHAS4A
EwAQAS4AGwAvAS4AIwA4AS4AKwBhAS4AMwBhAS4AOwBhAS4AQwA4AS4ASwBnAS4AUwBhAS4AWwB+
AUMAYwDHAEkAcwAvAWEAewDHAGMAawDHABsAAwABAAQAAwAAAKoE+AAAACEB/QAAAAwGAgECAAQA
AwACAAUABQABAAYABQACAAcABwAEgAAAAQAAAEMjCyYAAAAAAABDAAAABAAAAAAAAAAAAAAAsABn
AAAAAAAQAAAAAAAAAAAAAAC5AGoDAAAAAAQAAAAAAAAAAAAAALAACwQAAAAAEAAAAAAAAAAAAAAA
uQAcAAAAAAAAAAAAAQAAACkFAAAFAAIAAAAAVG9JbnQzMgA8TW9kdWxlPgBTeXN0ZW0uSU8ATWlj
cm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU1RfMmYzZDQwYzVhODYxNDM2OTk0
Yjg5ZTU1ZWJhMGI3Y2EAbXNjb3JsaWIAZGVmYXVsdEluc3RhbmNlAGdldF9NZXNzYWdlAFZhcmlh
YmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEZpbGUAZ2V0X05hbWUAZ2V0
X0Z1bGxOYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVHlwZQBGYWlsdXJlAGdl
dF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RN
b2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUARGVs
ZXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1
dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlU
aXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtB
dHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRp
b25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1
Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRy
eVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAHZhbHVlAE1vdmUATGFzdEluZGV4T2YA
U3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwBTdWJzdHJpbmcATWljcm9zb2Z0LlNx
bFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRh
c2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzJmM2Q0MGM1YTg2
MTQzNjk5NGI4OWU1NWViYTBiN2NhLmRsbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1h
bgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5
c3RlbS5SZWZsZWN0aW9uAEV4Y2VwdGlvbgBGaWxlSW5mbwBDdWx0dXJlSW5mbwBGaWxlU3lzdGVt
SW5mbwBEaXJlY3RvcnlJbmZvAGdldF9SZXNvdXJjZU1hbmFnZXIARXZlbnRzT2JqZWN0V3JhcHBl
cgBGaXJlRXJyb3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGlt
ZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfMmYzZDQwYzVhODYxNDM2OTk0
Yjg5ZTU1ZWJhMGI3Y2EuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01v
ZGVzAFNUXzJmM2Q0MGM1YTg2MTQzNjk5NGI4OWU1NWViYTBiN2NhLlByb3BlcnRpZXMAZ2V0X1Zh
cmlhYmxlcwBHZXRGaWxlcwBTZXR0aW5ncwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBn
ZXRfRXZlbnRzAEV4aXN0cwBDb25jYXQAT2JqZWN0AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0
AENvbnZlcnQAZ2V0X0Fzc2VtYmx5AENyZWF0ZURpcmVjdG9yeQBFbXB0eQAAAAAvVQBzAGUAcgA6
ADoARABlAHMAdABpAG4AYQB0AGkAbwBuAEYAbwBsAGQAZQByAAAlVQBzAGUAcgA6ADoAUwBvAHUA
cgBjAGUARgBvAGwAZABlAHIAAA9uAG8AdABlAHMAXwAqAAADXwAAA1wAACtVAHMAZQByADoAOgBG
AGkAbABlAHMATQBvAHYAZQBkAEMAbwB1AG4AdAAAIUEAbgAgAGUAcgByAG8AcgAgAG8AYwBjAHUA
cgBlAGQAAHFTAFQAXwAyAGYAMwBkADQAMABjADUAYQA4ADYAMQA0ADMANgA5ADkANABiADgAOQBl
ADUANQBlAGIAYQAwAGIANwBjAGEALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIA
YwBlAHMAAADljcTIpNgvS6CDNxl/zW/jAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFZDgcIDg4O
CB0SPQgSPRJBBCAAEmkEIAASbQUgARJxHAMgABwDIAAOBiABHRI9DgQgAQgOBSACDggIBQACDg4O
BAABAg4GAAMODg4OBQABEnUOBQABDh0OBAABAQ4FAAIBDg4EAAEICAQgAQEcBSAAEoCRAgYOCCAF
AggODg4ICAABEoCVEYCZBSAAEoCdByACAQ4SgJ0It3pcVhk04IkIiYRdzYCAzJEEAAAAAAQBAAAA
AwYSUQMGElUDBhIQAgYIAwYRFAQAABJRBAAAElUFAAEBElUEAAASEAMAAAEECAASUQQIABJVBAgA
EhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NU
XzJmM2Q0MGM1YTg2MTQzNjk5NGI4OWU1NWViYTBiN2NhAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAg
IDIwMjMAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxh
eU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43tAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2Vz
LlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRy
YWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50
aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAKwxAAAAAAAAAAAAAMYxAAAAIAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAC4MQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxs
AAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAEAQAAAAAAAAAAAAAEAQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAAsmQyMAAAEACyZDIz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBHADAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAEwDAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAA
AAAAUwBUAF8AMgBmADMAZAA0ADAAYwA1AGEAOAA2ADEANAAzADYAOQA5ADQAYgA4ADkAZQA1ADUA
ZQBiAGEAMABiADcAYwBhAAAAPAAOAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAu
ADkAMAAyADcALgA5ADcAMwA5AAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQA
XwAyAGYAMwBkADQAMABjADUAYQA4ADYAMQA0ADMANgA5ADkANABiADgAOQBlADUANQBlAGIAYQAw
AGIANwBjAGEALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMA
bwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIAMwAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBk
AGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAVABfADIAZgAzAGQANAAwAGMANQBhADgANgAxADQAMwA2ADkAOQA0AGIAOAA5AGUANQA1
AGUAYgBhADAAYgA3AGMAYQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAFQAXwAyAGYAMwBkADQAMABjADUAYQA4ADYAMQA0ADMANgA5ADkANABiADgAOQBlADUANQBl
AGIAYQAwAGIANwBjAGEAAABAAA4AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADkAMAAyADcALgA5ADcAMwA5AAAARAAOAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4AOQAwADIANwAuADkANwAzADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAANgxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Files  Moved to Archive"
          DTS:CreationName="Microsoft.SendMailTask"
          DTS:Description="Send Mail Task"
          DTS:DTSID="{30B5479D-27E7-42AB-BD9F-FDE2FAD60CAF}"
          DTS:ExecutableType="Microsoft.SendMailTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Files  Moved to Archive"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="FromLine">@[User::Email_id_sender]</DTS:PropertyExpression>
          <DTS:PropertyExpression
            DTS:Name="ToLine">@[User::Email_id_receiver]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SendMailTask:SendMailTaskData
              SendMailTask:SMTPServer="{57AF754B-2200-4A3A-B11A-543EF4246D8B}"
              SendMailTask:From="umg-up.biteam.datawarehouse@pennstateoffice365.onmicrosoft.com"
              SendMailTask:To="L-DWEMAIL@LISTS.PSU.EDU"
              SendMailTask:Subject="Starfish Files"
              SendMailTask:Priority="High"
              SendMailTask:MessageSourceType="Variable"
              SendMailTask:MessageSource="User::FilesMovedMsg" xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Files Not Moved Problem"
          DTS:CreationName="Microsoft.SendMailTask"
          DTS:Description="Send Mail Task"
          DTS:DTSID="{650B0DB7-1CBE-4EFE-A53D-3E3467AC7446}"
          DTS:ExecutableType="Microsoft.SendMailTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Files Not Moved Problem"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="FromLine">@[User::Email_id_sender]</DTS:PropertyExpression>
          <DTS:PropertyExpression
            DTS:Name="ToLine">@[User::Email_id_receiver]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SendMailTask:SendMailTaskData
              SendMailTask:SMTPServer="{57AF754B-2200-4A3A-B11A-543EF4246D8B}"
              SendMailTask:From="umg-up.biteam.datawarehouse@pennstateoffice365.onmicrosoft.com"
              SendMailTask:To="L-DWEMAIL@LISTS.PSU.EDU"
              SendMailTask:Subject="Starfish Files"
              SendMailTask:Priority="High"
              SendMailTask:MessageSourceType="Variable"
              SendMailTask:MessageSource="User::NoFilesMoved" xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{599962C6-F1C9-4919-B283-E3325F786621}"
          DTS:From="Package\Sequence Container\Archive File"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Sequence Container\Files  Moved to Archive" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{1072DEAB-0409-4011-AAF2-BE14B40E4CC4}"
          DTS:From="Package\Sequence Container\Archive File"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Sequence Container\Files Not Moved Problem"
          DTS:Value="1" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Truncate table sf_notes"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{D809470B-C266-4193-ADCA-A2D039F105AE}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Truncate table sf_notes"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{62A80100-15F7-4342-AA10-55E597EC310F}"
          SQLTask:SqlStatementSource="truncate table idr.sf_notes" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Updating Table appointments on IDR"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{7FC9ADD8-F182-468A-96FD-5F70726DE621}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Updating Table appointments on IDR">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{93FD4D64-2D5F-4B90-821D-96FACF857C97}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Incrimental Update Notes Table"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <pipeline
              defaultBufferMaxRows="100000"
              version="1">
              <components>
                <component
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Inputs[Conditional Split Input].Columns[Hash_DW]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Hash_DW"
                          cachedSortKeyPosition="2"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[Hash_DW]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Inputs[Conditional Split Input].Columns[LK_Hash_DW]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="LK_Hash_DW"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Match Output].Columns[LK_Hash_DW]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Inputs[Conditional Split Input].Columns[note_integration_id]"
                          cachedDataType="wstr"
                          cachedLength="72"
                          cachedName="note_integration_id"
                          cachedSortKeyPosition="1"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_integration_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Inputs[Conditional Split Input].Columns[LK_note_integration_id]"
                          cachedDataType="wstr"
                          cachedLength="72"
                          cachedName="LK_note_integration_id"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Match Output].Columns[LK_note_integration_id]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Outputs[MatchedHash]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="MatchedHash"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">#{Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_integration_id]} == #{Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Match Output].Columns[LK_note_integration_id]} &amp;&amp; #{Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[Hash_DW]} == #{Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Match Output].Columns[LK_Hash_DW]}</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">note_integration_id == LK_note_integration_id &amp;&amp; Hash_DW == LK_Hash_DW</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Outputs[NotMatched]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="NotMatched"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Count Matched records"
                  componentClassID="Microsoft.RowCount"
                  contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                  name="Count Matched records">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the variable to hold the row count."
                      name="VariableName">User::RowsDeleted</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Count Matched records.Inputs[Row Count Input 1]"
                      hasSideEffects="true"
                      name="Row Count Input 1">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Count Matched records.Outputs[Row Count Output 1]"
                      name="Row Count Output 1"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Count Matched records.Inputs[Row Count Input 1]">
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="DC-UPDATE_DT"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Outputs[Derived Column Output].Columns[UPDATE_DT]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Outputs[Derived Column Output].Columns[UPDATE_DT]"
                          name="UPDATE_DT"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">@[System::StartTime]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">@[System::StartTime]</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Lookup"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">SELECT distinct [note_integration_id]
      
      ,[Hash_DW]
  FROM [IDR].[etl].[starfish_notes]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (SELECT distinct [note_integration_id]
      
      ,[Hash_DW]
  FROM [IDR].[etl].[starfish_notes]) [refTable]
where [refTable].[Hash_DW] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">1</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">20</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="note_integration_id" dataType="DT_WSTR" length="72" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="Hash_DW" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[Hash_DW]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[LocalHost.IDR]"
                      connectionManagerRefId="Package.ConnectionManagers[LocalHost.IDR]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Inputs[Lookup Input].Columns[Hash_DW]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Hash_DW"
                          cachedSortKeyPosition="2"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[Hash_DW]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">Hash_DW</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Match Output].Columns[LK_note_integration_id]"
                          dataType="wstr"
                          errorOrTruncationOperation="Copy Column"
                          length="72"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Match Output].Columns[LK_note_integration_id]"
                          name="LK_note_integration_id"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">note_integration_id</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Match Output].Columns[LK_Hash_DW]"
                          dataType="wstr"
                          errorOrTruncationOperation="Copy Column"
                          length="255"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Match Output].Columns[LK_Hash_DW]"
                          name="LK_Hash_DW"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">Hash_DW</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Rows Inserted"
                  componentClassID="Microsoft.RowCount"
                  contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                  name="Rows Inserted">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the variable to hold the row count."
                      name="VariableName">User::RowsInserted</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Rows Inserted.Inputs[Row Count Input 1]"
                      hasSideEffects="true"
                      name="Row Count Input 1">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Rows Inserted.Outputs[Row Count Output 1]"
                      name="Row Count Output 1"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Rows Inserted.Inputs[Row Count Input 1]">
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="Source sf-notes"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[idr].[sf_notes]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[DW-SQL.Stage]"
                      connectionManagerRefId="Package.ConnectionManagers[DW-SQL.Stage]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output]"
                      isSorted="true"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_ext_id]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[note_ext_id]"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_ext_id]"
                          name="note_ext_id"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[cms_note_ext_id]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[cms_note_ext_id]"
                          length="100"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[cms_note_ext_id]"
                          name="cms_note_ext_id"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[date]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[date]"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[date]"
                          name="date"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_type]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[note_type]"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_type]"
                          name="note_type"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[subject]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[subject]"
                          length="1000"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[subject]"
                          name="subject"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[body]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[body]"
                          length="4000"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[body]"
                          name="body"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_userid]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[author_userid]"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_userid]"
                          name="author_userid"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_integration_id]"
                          dataType="i4"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[author_integration_id]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_integration_id]"
                          name="author_integration_id"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_first_name]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[author_first_name]"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_first_name]"
                          name="author_first_name"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_last_name]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[author_last_name]"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_last_name]"
                          name="author_last_name"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_institutional_email]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[author_institutional_email]"
                          length="150"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_institutional_email]"
                          name="author_institutional_email"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_integration_id]"
                          dataType="i4"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[student_integration_id]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_integration_id]"
                          name="student_integration_id"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_userid]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[student_userid]"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_userid]"
                          name="student_userid"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_id]"
                          dataType="i4"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[student_id]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_id]"
                          name="student_id"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_first_name]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[student_first_name]"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_first_name]"
                          name="student_first_name"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_last_name]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[student_last_name]"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_last_name]"
                          name="student_last_name"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[tracking_item_ext_id]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[tracking_item_ext_id]"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[tracking_item_ext_id]"
                          name="tracking_item_ext_id"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[tracking_rule_name]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[tracking_rule_name]"
                          length="500"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[tracking_rule_name]"
                          name="tracking_rule_name"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[appointment_item_ext_id]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[appointment_item_ext_id]"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[appointment_item_ext_id]"
                          name="appointment_item_ext_id"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_integration_id]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[note_integration_id]"
                          length="72"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_integration_id]"
                          name="note_integration_id"
                          sortKeyPosition="1"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[DELETE_FLG]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[DELETE_FLG]"
                          length="1"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[DELETE_FLG]"
                          name="DELETE_FLG"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[INSERT_DT]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[INSERT_DT]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[INSERT_DT]"
                          name="INSERT_DT"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[UPDATE_DT]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[UPDATE_DT]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[UPDATE_DT]"
                          name="UPDATE_DT"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[ETL_SOURCE]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[ETL_SOURCE]"
                          length="15"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[ETL_SOURCE]"
                          name="ETL_SOURCE"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[FileImported]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[FileImported]"
                          length="100"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[FileImported]"
                          name="FileImported"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[FileCreated_On]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[FileCreated_On]"
                          length="25"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[FileCreated_On]"
                          name="FileCreated_On"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[FileSize]"
                          dataType="i4"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[FileSize]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[FileSize]"
                          name="FileSize"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[Hash_DW]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[Hash_DW]"
                          length="255"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[Hash_DW]"
                          name="Hash_DW"
                          sortKeyPosition="2"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[note_ext_id]"
                          dataType="wstr"
                          length="50"
                          name="note_ext_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[cms_note_ext_id]"
                          dataType="wstr"
                          length="100"
                          name="cms_note_ext_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[date]"
                          dataType="wstr"
                          length="50"
                          name="date" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[note_type]"
                          dataType="wstr"
                          length="50"
                          name="note_type" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[subject]"
                          dataType="wstr"
                          length="1000"
                          name="subject" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[body]"
                          dataType="wstr"
                          length="4000"
                          name="body" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[author_userid]"
                          dataType="wstr"
                          length="50"
                          name="author_userid" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[author_integration_id]"
                          dataType="i4"
                          name="author_integration_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[author_first_name]"
                          dataType="wstr"
                          length="50"
                          name="author_first_name" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[author_last_name]"
                          dataType="wstr"
                          length="50"
                          name="author_last_name" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[author_institutional_email]"
                          dataType="wstr"
                          length="150"
                          name="author_institutional_email" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[student_integration_id]"
                          dataType="i4"
                          name="student_integration_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[student_userid]"
                          dataType="wstr"
                          length="50"
                          name="student_userid" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[student_id]"
                          dataType="i4"
                          name="student_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[student_first_name]"
                          dataType="wstr"
                          length="50"
                          name="student_first_name" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[student_last_name]"
                          dataType="wstr"
                          length="50"
                          name="student_last_name" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[tracking_item_ext_id]"
                          dataType="wstr"
                          length="50"
                          name="tracking_item_ext_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[tracking_rule_name]"
                          dataType="wstr"
                          length="500"
                          name="tracking_rule_name" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[appointment_item_ext_id]"
                          dataType="wstr"
                          length="50"
                          name="appointment_item_ext_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[note_integration_id]"
                          dataType="wstr"
                          length="72"
                          name="note_integration_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[DELETE_FLG]"
                          dataType="wstr"
                          length="1"
                          name="DELETE_FLG" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[INSERT_DT]"
                          dataType="dbTimeStamp"
                          name="INSERT_DT" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[UPDATE_DT]"
                          dataType="dbTimeStamp"
                          name="UPDATE_DT" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[ETL_SOURCE]"
                          dataType="wstr"
                          length="15"
                          name="ETL_SOURCE" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[FileImported]"
                          codePage="1252"
                          dataType="str"
                          length="100"
                          name="FileImported" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[FileCreated_On]"
                          codePage="1252"
                          dataType="str"
                          length="25"
                          name="FileCreated_On" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[FileSize]"
                          dataType="i4"
                          name="FileSize" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].ExternalColumns[Hash_DW]"
                          dataType="wstr"
                          length="255"
                          name="Hash_DW" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[note_integration_id]"
                          dataType="wstr"
                          length="72"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[note_integration_id]"
                          name="note_integration_id" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[note_ext_id]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[note_ext_id]"
                          name="note_ext_id" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[cms_note_ext_id]"
                          dataType="wstr"
                          length="100"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[cms_note_ext_id]"
                          name="cms_note_ext_id" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[date]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[date]"
                          name="date" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[note_type]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[note_type]"
                          name="note_type" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[subject]"
                          dataType="wstr"
                          length="1000"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[subject]"
                          name="subject" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[body]"
                          dataType="wstr"
                          length="4000"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[body]"
                          name="body" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[author_userid]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[author_userid]"
                          name="author_userid" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[author_integration_id]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[author_integration_id]"
                          name="author_integration_id" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[author_first_name]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[author_first_name]"
                          name="author_first_name" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[author_last_name]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[author_last_name]"
                          name="author_last_name" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[author_institutional_email]"
                          dataType="wstr"
                          length="150"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[author_institutional_email]"
                          name="author_institutional_email" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[student_integration_id]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[student_integration_id]"
                          name="student_integration_id" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[student_userid]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[student_userid]"
                          name="student_userid" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[student_id]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[student_id]"
                          name="student_id" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[student_first_name]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[student_first_name]"
                          name="student_first_name" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[student_last_name]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[student_last_name]"
                          name="student_last_name" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[tracking_item_ext_id]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[tracking_item_ext_id]"
                          name="tracking_item_ext_id" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[tracking_rule_name]"
                          dataType="wstr"
                          length="500"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[tracking_rule_name]"
                          name="tracking_rule_name" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[appointment_item_ext_id]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[appointment_item_ext_id]"
                          name="appointment_item_ext_id" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[DELETE_FLG]"
                          dataType="wstr"
                          length="1"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[DELETE_FLG]"
                          name="DELETE_FLG" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[INSERT_DT]"
                          dataType="dbTimeStamp"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[INSERT_DT]"
                          name="INSERT_DT" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[UPDATE_DT]"
                          dataType="dbTimeStamp"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[UPDATE_DT]"
                          name="UPDATE_DT" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[ETL_SOURCE]"
                          dataType="wstr"
                          length="15"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[ETL_SOURCE]"
                          name="ETL_SOURCE" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[FileImported]"
                          codePage="1252"
                          dataType="str"
                          length="100"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[FileImported]"
                          name="FileImported" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[FileCreated_On]"
                          codePage="1252"
                          dataType="str"
                          length="25"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[FileCreated_On]"
                          name="FileCreated_On" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[FileSize]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[FileSize]"
                          name="FileSize" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[Hash_DW]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[Hash_DW]"
                          name="Hash_DW" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="SQL Insert starfish-notes"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[etl].[starfish_notes]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[LocalHost.IDR]"
                      connectionManagerRefId="Package.ConnectionManagers[LocalHost.IDR]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[UPDATE_DT]"
                          cachedDataType="dbTimeStamp"
                          cachedName="UPDATE_DT"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[UPDATE_DT]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Outputs[Derived Column Output].Columns[UPDATE_DT]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[appointment_item_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="appointment_item_ext_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[appointment_item_ext_id]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[appointment_item_ext_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[author_first_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_first_name"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[author_first_name]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_first_name]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[author_institutional_email]"
                          cachedDataType="wstr"
                          cachedLength="150"
                          cachedName="author_institutional_email"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[author_institutional_email]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_institutional_email]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[author_integration_id]"
                          cachedDataType="i4"
                          cachedName="author_integration_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[author_integration_id]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_integration_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[author_last_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_last_name"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[author_last_name]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_last_name]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[author_userid]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_userid"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[author_userid]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_userid]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[body]"
                          cachedDataType="wstr"
                          cachedLength="4000"
                          cachedName="body"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[body]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[body]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[date]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="date"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[date]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[date]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[cms_note_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="100"
                          cachedName="cms_note_ext_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[cms_note_ext_id]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[cms_note_ext_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[DELETE_FLG]"
                          cachedDataType="wstr"
                          cachedLength="1"
                          cachedName="DELETE_FLG"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[DELETE_FLG]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[DELETE_FLG]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[ETL_SOURCE]"
                          cachedDataType="wstr"
                          cachedLength="15"
                          cachedName="ETL_SOURCE"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[ETL_SOURCE]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[ETL_SOURCE]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[Hash_DW]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Hash_DW"
                          cachedSortKeyPosition="2"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[Hash_DW]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[Hash_DW]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[INSERT_DT]"
                          cachedDataType="dbTimeStamp"
                          cachedName="INSERT_DT"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[INSERT_DT]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[INSERT_DT]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[note_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="note_ext_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[note_ext_id]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_ext_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[note_integration_id]"
                          cachedDataType="wstr"
                          cachedLength="72"
                          cachedName="note_integration_id"
                          cachedSortKeyPosition="1"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[note_integration_id]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_integration_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[note_type]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="note_type"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[note_type]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_type]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[student_first_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_first_name"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[student_first_name]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_first_name]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[student_id]"
                          cachedDataType="i4"
                          cachedName="student_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[student_id]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[student_integration_id]"
                          cachedDataType="i4"
                          cachedName="student_integration_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[student_integration_id]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_integration_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[student_last_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_last_name"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[student_last_name]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_last_name]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[student_userid]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_userid"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[student_userid]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_userid]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[subject]"
                          cachedDataType="wstr"
                          cachedLength="1000"
                          cachedName="subject"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[subject]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[subject]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[tracking_item_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="tracking_item_ext_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[tracking_item_ext_id]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[tracking_item_ext_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[tracking_rule_name]"
                          cachedDataType="wstr"
                          cachedLength="500"
                          cachedName="tracking_rule_name"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[tracking_rule_name]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[tracking_rule_name]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[FileImported]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="100"
                          cachedName="FileImported"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[FileImported]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[FileImported]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[FileCreated_On]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="25"
                          cachedName="FileCreated_On"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[FileCreated_On]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[FileCreated_On]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].Columns[FileSize]"
                          cachedDataType="i4"
                          cachedName="FileSize"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[FileSize]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[FileSize]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[DELETE_FLG]"
                          dataType="wstr"
                          length="1"
                          name="DELETE_FLG" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[INSERT_DT]"
                          dataType="dbTimeStamp"
                          name="INSERT_DT" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[UPDATE_DT]"
                          dataType="dbTimeStamp"
                          name="UPDATE_DT" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[ETL_SOURCE]"
                          dataType="wstr"
                          length="15"
                          name="ETL_SOURCE" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[Hash_DW]"
                          dataType="wstr"
                          length="255"
                          name="Hash_DW" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[note_integration_id]"
                          dataType="wstr"
                          length="72"
                          name="note_integration_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[note_ext_id]"
                          dataType="wstr"
                          length="50"
                          name="note_ext_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[cms_note_ext_id]"
                          dataType="wstr"
                          length="100"
                          name="cms_note_ext_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[date]"
                          dataType="wstr"
                          length="50"
                          name="date" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[note_type]"
                          dataType="wstr"
                          length="50"
                          name="note_type" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[subject]"
                          dataType="wstr"
                          length="1000"
                          name="subject" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[body]"
                          dataType="wstr"
                          length="4000"
                          name="body" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[author_userid]"
                          dataType="wstr"
                          length="50"
                          name="author_userid" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[author_integration_id]"
                          dataType="i4"
                          name="author_integration_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[author_first_name]"
                          dataType="wstr"
                          length="50"
                          name="author_first_name" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[author_last_name]"
                          dataType="wstr"
                          length="50"
                          name="author_last_name" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[author_institutional_email]"
                          dataType="wstr"
                          length="150"
                          name="author_institutional_email" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[student_integration_id]"
                          dataType="i4"
                          name="student_integration_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[student_userid]"
                          dataType="wstr"
                          length="50"
                          name="student_userid" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[student_id]"
                          dataType="i4"
                          name="student_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[student_first_name]"
                          dataType="wstr"
                          length="50"
                          name="student_first_name" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[student_last_name]"
                          dataType="wstr"
                          length="50"
                          name="student_last_name" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[tracking_item_ext_id]"
                          dataType="wstr"
                          length="50"
                          name="tracking_item_ext_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[tracking_rule_name]"
                          dataType="wstr"
                          length="500"
                          name="tracking_rule_name" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[appointment_item_ext_id]"
                          dataType="wstr"
                          length="50"
                          name="appointment_item_ext_id" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[FileImported]"
                          codePage="1252"
                          dataType="str"
                          length="100"
                          name="FileImported" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[FileCreated_On]"
                          codePage="1252"
                          dataType="str"
                          length="25"
                          name="FileCreated_On" />
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input].ExternalColumns[FileSize]"
                          dataType="i4"
                          name="FileSize" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes"
                  componentClassID="Microsoft.OLEDBCommand"
                  contactInfo="OLE DB Command;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
                  description="Runs an SQL statement for each row in a data flow. For example, call a 'new employee setup' stored procedure for each row in the 'new employees' table. Note: running an SQL statement for each row of a large data flow may take a long time."
                  name="UPDATE etl-notes"
                  usesDispositions="true"
                  version="2">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">
 UPDATE [etl].[starfish_notes]
   SET [note_ext_id] = ?
      ,[cms_note_ext_id] = ?
      ,[date] = ?
      ,[note_type] = ?
      ,[subject] = ?
      ,[body] =?
      ,[author_userid] = ?
      ,[author_integration_id] = ?
      ,[author_first_name] = ?
      ,[author_last_name] = ?
      ,[author_institutional_email] =?
      ,[student_integration_id] = ?
      ,[student_userid] = ?
      ,[student_id] = ?
      ,[student_first_name] =?
      ,[student_last_name] = ?
      ,[tracking_item_ext_id] = ?
      ,[tracking_rule_name] = ?
      ,[appointment_item_ext_id] = ?
      ,[UPDATE_DT] = ?
      ,[ETL_SOURCE] = ?
      ,[FileImported] = ?
      ,[FileCreated_On] = ?
      ,[FileSize] = ?
     
 WHERE note_integration_id= ? and  [Hash_DW] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[LocalHost.IDR]"
                      connectionManagerRefId="Package.ConnectionManagers[LocalHost.IDR]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input]"
                      errorOrTruncationOperation="Command Execution"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Command Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[note_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="note_ext_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_ext_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[cms_note_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="100"
                          cachedName="cms_note_ext_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[cms_note_ext_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[date]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="date"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_2]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[date]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[note_type]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="note_type"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_3]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_type]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[subject]"
                          cachedDataType="wstr"
                          cachedLength="1000"
                          cachedName="subject"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_4]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[subject]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[body]"
                          cachedDataType="wstr"
                          cachedLength="4000"
                          cachedName="body"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_5]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[body]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[author_userid]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_userid"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_6]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_userid]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[author_integration_id]"
                          cachedDataType="i4"
                          cachedName="author_integration_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_7]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_integration_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[author_first_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_first_name"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_8]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_first_name]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[author_last_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="author_last_name"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_9]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_last_name]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[author_institutional_email]"
                          cachedDataType="wstr"
                          cachedLength="150"
                          cachedName="author_institutional_email"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_10]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[author_institutional_email]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[student_integration_id]"
                          cachedDataType="i4"
                          cachedName="student_integration_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_11]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_integration_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[student_userid]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_userid"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_12]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_userid]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[student_id]"
                          cachedDataType="i4"
                          cachedName="student_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_13]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[student_first_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_first_name"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_14]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_first_name]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[student_last_name]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="student_last_name"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_15]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[student_last_name]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[tracking_item_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="tracking_item_ext_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_16]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[tracking_item_ext_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[tracking_rule_name]"
                          cachedDataType="wstr"
                          cachedLength="500"
                          cachedName="tracking_rule_name"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_17]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[tracking_rule_name]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[appointment_item_ext_id]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="appointment_item_ext_id"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_18]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[appointment_item_ext_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[UPDATE_DT]"
                          cachedDataType="dbTimeStamp"
                          cachedName="UPDATE_DT"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_19]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Outputs[Derived Column Output].Columns[UPDATE_DT]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[ETL_SOURCE]"
                          cachedDataType="wstr"
                          cachedLength="15"
                          cachedName="ETL_SOURCE"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_20]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[ETL_SOURCE]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[FileImported]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="100"
                          cachedName="FileImported"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_21]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[FileImported]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[FileCreated_On]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="25"
                          cachedName="FileCreated_On"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_22]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[FileCreated_On]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[FileSize]"
                          cachedDataType="i4"
                          cachedName="FileSize"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_23]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[FileSize]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[note_integration_id]"
                          cachedDataType="wstr"
                          cachedLength="72"
                          cachedName="note_integration_id"
                          cachedSortKeyPosition="1"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_24]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[note_integration_id]" />
                        <inputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].Columns[Hash_DW]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Hash_DW"
                          cachedSortKeyPosition="2"
                          externalMetadataColumnId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_25]"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output].Columns[Hash_DW]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                          dataType="wstr"
                          length="50"
                          name="Param_0">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                          dataType="wstr"
                          length="100"
                          name="Param_1">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_2]"
                          dataType="wstr"
                          length="50"
                          name="Param_2">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_3]"
                          dataType="wstr"
                          length="50"
                          name="Param_3">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_4]"
                          dataType="wstr"
                          length="1000"
                          name="Param_4">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_5]"
                          dataType="wstr"
                          length="4000"
                          name="Param_5">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_6]"
                          dataType="wstr"
                          length="50"
                          name="Param_6">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_7]"
                          dataType="i4"
                          name="Param_7">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_8]"
                          dataType="wstr"
                          length="50"
                          name="Param_8">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_9]"
                          dataType="wstr"
                          length="50"
                          name="Param_9">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_10]"
                          dataType="wstr"
                          length="150"
                          name="Param_10">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_11]"
                          dataType="i4"
                          name="Param_11">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_12]"
                          dataType="wstr"
                          length="50"
                          name="Param_12">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_13]"
                          dataType="i4"
                          name="Param_13">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_14]"
                          dataType="wstr"
                          length="50"
                          name="Param_14">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_15]"
                          dataType="wstr"
                          length="50"
                          name="Param_15">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_16]"
                          dataType="wstr"
                          length="50"
                          name="Param_16">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_17]"
                          dataType="wstr"
                          length="500"
                          name="Param_17">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_18]"
                          dataType="wstr"
                          length="50"
                          name="Param_18">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">1073741889</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_19]"
                          dataType="dbTimeStamp"
                          name="Param_19">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">1073741889</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_20]"
                          dataType="wstr"
                          length="15"
                          name="Param_20">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_21]"
                          codePage="1252"
                          dataType="str"
                          length="100"
                          name="Param_21">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_22]"
                          codePage="1252"
                          dataType="str"
                          length="25"
                          name="Param_22">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_23]"
                          dataType="i4"
                          name="Param_23">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_24]"
                          dataType="wstr"
                          length="72"
                          name="Param_24">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input].ExternalColumns[Param_25]"
                          dataType="wstr"
                          length="255"
                          name="Param_25">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Outputs[OLE DB Command Output]"
                      exclusionGroup="1"
                      name="OLE DB Command Output"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Outputs[OLE DB Command Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Command Error Output"
                      synchronousInputId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[Derived Column Output]"
                  endId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Inputs[Lookup Input]"
                  name="Derived Column Output"
                  startId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[ExistinRecords]"
                  endId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Rows Inserted.Inputs[Row Count Input 1]"
                  name="ExistinRecords"
                  startId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Outputs[NotMatched]" />
                <path
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[Lookup Match Output]"
                  endId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Inputs[Conditional Split Input]"
                  name="Lookup Match Output"
                  startId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup Match Output]" />
                <path
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[Lookup No Match Output]"
                  endId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes.Inputs[OLE DB Destination Input]"
                  name="Lookup No Match Output"
                  startId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup.Outputs[Lookup No Match Output]" />
                <path
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[MatchedHash]"
                  endId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Count Matched records.Inputs[Row Count Input 1]"
                  name="MatchedHash"
                  startId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split.Outputs[MatchedHash]" />
                <path
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[OLE DB Source Output]"
                  endId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT.Inputs[Derived Column Input]"
                  name="OLE DB Source Output"
                  startId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes.Outputs[OLE DB Source Output]" />
                <path
                  refId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[Row Count Output 1]"
                  endId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes.Inputs[OLE DB Command Input]"
                  name="Row Count Output 1"
                  startId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Rows Inserted.Outputs[Row Count Output 1]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Updating Table appointments on IDR\Successul Transfer Send Mail Task"
          DTS:CreationName="Microsoft.SendMailTask"
          DTS:Description="Send Mail Task"
          DTS:DTSID="{6C392503-BEDA-4296-A20E-9916B200018C}"
          DTS:ExecutableType="Microsoft.SendMailTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Successul Transfer Send Mail Task"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:PropertyExpression
            DTS:Name="FromLine">@[User::Email_id_sender]</DTS:PropertyExpression>
          <DTS:PropertyExpression
            DTS:Name="MessageSource">"Starfish importer Inserted  " +  (DT_STR, 10,1252) @[User::RowsInserted] +", Updated "+ (DT_STR, 10,1252)  @[User::RowsUpdated] + " and Removed " +(DT_STR, 10,1252) @[User::RowsDeleted] +"  records " + " on " +  @[System::MachineName] + " !"</DTS:PropertyExpression>
          <DTS:PropertyExpression
            DTS:Name="ToLine">@[User::Email_id_receiver]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SendMailTask:SendMailTaskData
              SendMailTask:SMTPServer="{57AF754B-2200-4A3A-B11A-543EF4246D8B}"
              SendMailTask:From="umg-up.biteam.datawarehouse@pennstateoffice365.onmicrosoft.com"
              SendMailTask:To="L-DWEMAIL@LISTS.PSU.EDU"
              SendMailTask:Subject="Starfish Import Status"
              SendMailTask:MessageSource="Starfish importer Inserted  0, Updated 0 and Removed 0  records  on S8-WHSE-SQL-T01 !" xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Updating Table appointments on IDR.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{C7EDC803-AD64-41CB-B705-4CA12C1C6CE2}"
          DTS:From="Package\Updating Table appointments on IDR\Incrimental Update Notes Table"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Updating Table appointments on IDR\Successul Transfer Send Mail Task" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{456122B8-927B-4EE0-9C4C-D6793C840F66}"
      DTS:EvalOp="3"
      DTS:Expression="@[User::IsFound]==true"
      DTS:From="Package\Check for File"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Files is missing Mail"
      DTS:Value="1" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{26458013-B094-4E44-BC3A-33B2C0DD7152}"
      DTS:EvalOp="3"
      DTS:Expression="@[User::IsFound] ==false"
      DTS:From="Package\Check for File"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Loop Trought All Appointment Files" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{39D61DE5-3573-4448-A419-2ADDF779E950}"
      DTS:From="Package\Loop Trought All Appointment Files"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Updating Table appointments on IDR" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{C821BE67-7AE9-4B63-B8FC-B7015405AE6C}"
      DTS:From="Package\Loop Trought All Appointment Files"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Error Mail"
      DTS:Value="1" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 5]"
      DTS:CreationName=""
      DTS:DTSID="{B726B556-9B4B-4BAD-A7F5-7C301D564CB1}"
      DTS:From="Package\Updating Table appointments on IDR"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 5"
      DTS:To="Package\Sequence Container" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 6]"
      DTS:CreationName=""
      DTS:DTSID="{DF531219-EF66-4B60-AFFA-33B936B8E7C1}"
      DTS:From="Package\Sequence Container"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 6"
      DTS:To="Package\Error Mail"
      DTS:Value="1" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 7]"
      DTS:CreationName=""
      DTS:DTSID="{A932B1EF-0ADF-436F-AD3C-8DF6349C84D2}"
      DTS:From="Package\Truncate table sf_notes"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 7"
      DTS:To="Package\Check for File" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 9]"
      DTS:CreationName=""
      DTS:DTSID="{0BCEA699-6487-4B27-BBEB-7FAB1EEBB11C}"
      DTS:From="Package\Updating Table appointments on IDR"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 9"
      DTS:To="Package\Error Mail"
      DTS:Value="1" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="142,42"
          Id="Package\Check for File\Get File Size"
          TopLeft="30.5,107.5" />
        <NodeLayout
          Size="184,42"
          Id="Package\Check for File\Is Notes*-csv Present"
          TopLeft="5.50000000000001,5.5" />
        <EdgeLayout
          Id="Package\Check for File.PrecedenceConstraints[Constraint]"
          TopLeft="99.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="195,205"
          Size="195,248"
          Id="Package\Check for File"
          TopLeft="497,107.5" />
        <NodeLayout
          Size="127,42"
          Id="Package\Error Mail"
          TopLeft="469,1260.5" />
        <NodeLayout
          Size="177,42"
          Id="Package\Files is missing Mail"
          TopLeft="251,467.5" />
        <NodeLayout
          Size="200,42"
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage"
          TopLeft="5.5,5.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="211,103"
          Size="211,146"
          Id="Package\Loop Trought All Appointment Files"
          TopLeft="489,415.5" />
        <NodeLayout
          Size="137,42"
          Id="Package\Sequence Container\Archive File"
          TopLeft="291.5,5.5" />
        <NodeLayout
          Size="193,42"
          Id="Package\Sequence Container\Files  Moved to Archive"
          TopLeft="5.5,107.5" />
        <NodeLayout
          Size="202,42"
          Id="Package\Sequence Container\Files Not Moved Problem"
          TopLeft="259,107.5" />
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 1]"
          TopLeft="338.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-236.5,60"
              Start="0,0"
              End="-236.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.4155844155844" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.4155844155844"
                    Point2="0,24.4155844155844"
                    Point3="-4,24.4155844155844" />
                  <mssgle:LineSegment
                    End="-232.5,24.4155844155844" />
                  <mssgle:CubicBezierSegment
                    Point1="-232.5,24.4155844155844"
                    Point2="-236.5,24.4155844155844"
                    Point3="-236.5,28.4155844155844" />
                  <mssgle:LineSegment
                    End="-236.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 2]"
          TopLeft="381.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-21.5,60"
              Start="0,0"
              End="-21.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.4155844155844" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.4155844155844"
                    Point2="0,24.4155844155844"
                    Point3="-4,24.4155844155844" />
                  <mssgle:LineSegment
                    End="-17.5,24.4155844155844" />
                  <mssgle:CubicBezierSegment
                    Point1="-17.5,24.4155844155844"
                    Point2="-21.5,24.4155844155844"
                    Point3="-21.5,28.4155844155844" />
                  <mssgle:LineSegment
                    End="-21.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.99134765625,29.4155844155844,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="466,205"
          Size="466,248"
          Id="Package\Sequence Container"
          TopLeft="5.50000000000011,929.5" />
        <NodeLayout
          Size="194,42"
          Id="Package\Truncate table sf_notes"
          TopLeft="497.5,5.5" />
        <NodeLayout
          Size="233,42"
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table"
          TopLeft="15,5.5" />
        <NodeLayout
          Size="252,42"
          Id="Package\Updating Table appointments on IDR\Successul Transfer Send Mail Task"
          TopLeft="5.50000000000003,107.5" />
        <EdgeLayout
          Id="Package\Updating Table appointments on IDR.PrecedenceConstraints[Constraint 1]"
          TopLeft="131.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="263,205"
          Size="263,248"
          Id="Package\Updating Table appointments on IDR"
          TopLeft="270,621.5" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="563.333333333333,355.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-223.833333333333,112"
              Start="0,0"
              End="-223.833333333333,104.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,41.3468972533062" />
                  <mssgle:CubicBezierSegment
                    Point1="0,41.3468972533062"
                    Point2="0,45.3468972533062"
                    Point3="-4,45.3468972533062" />
                  <mssgle:LineSegment
                    End="-219.833333333333,45.3468972533062" />
                  <mssgle:CubicBezierSegment
                    Point1="-219.833333333333,45.3468972533062"
                    Point2="-223.833333333333,45.3468972533062"
                    Point3="-223.833333333333,49.3468972533062" />
                  <mssgle:LineSegment
                    End="-223.833333333333,104.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-136.026666666667,50.3468972533062,48.22,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="625.666666666667,355.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-31.1666666666666,60"
              Start="0,0"
              End="-31.1666666666666,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.292980671414" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.292980671414"
                    Point2="0,24.292980671414"
                    Point3="-4,24.292980671414" />
                  <mssgle:LineSegment
                    End="-27.1666666666666,24.292980671414" />
                  <mssgle:CubicBezierSegment
                    Point1="-27.1666666666666,24.292980671414"
                    Point2="-31.1666666666666,24.292980671414"
                    Point3="-31.1666666666666,28.292980671414" />
                  <mssgle:LineSegment
                    End="-31.1666666666666,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-23.5833333333333,29.292980671414,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="560.666666666667,561.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-159.166666666667,60"
              Start="0,0"
              End="-159.166666666667,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.2709313264346" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.2709313264346"
                    Point2="0,24.2709313264346"
                    Point3="-4,24.2709313264346" />
                  <mssgle:LineSegment
                    End="-155.166666666667,24.2709313264346" />
                  <mssgle:CubicBezierSegment
                    Point1="-155.166666666667,24.2709313264346"
                    Point2="-159.166666666667,24.2709313264346"
                    Point3="-159.166666666667,28.2709313264346" />
                  <mssgle:LineSegment
                    End="-159.166666666667,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="628.333333333333,561.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-66.083333333333,699"
              Start="0,0"
              End="-66.083333333333,691.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,388.165301142931" />
                  <mssgle:CubicBezierSegment
                    Point1="0,388.165301142931"
                    Point2="0,392.165301142931"
                    Point3="-4,392.165301142931" />
                  <mssgle:LineSegment
                    End="-62.083333333333,392.165301142931" />
                  <mssgle:CubicBezierSegment
                    Point1="-62.083333333333,392.165301142931"
                    Point2="-66.083333333333,392.165301142931"
                    Point3="-66.083333333333,396.165301142931" />
                  <mssgle:LineSegment
                    End="-66.083333333333,691.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-48.2830143229165,397.165301142931,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 5]"
          TopLeft="359,869.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-120.5,60"
              Start="0,0"
              End="-120.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.2176870748299" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.2176870748299"
                    Point2="0,24.2176870748299"
                    Point3="-4,24.2176870748299" />
                  <mssgle:LineSegment
                    End="-116.5,24.2176870748299" />
                  <mssgle:CubicBezierSegment
                    Point1="-116.5,24.2176870748299"
                    Point2="-120.5,24.2176870748299"
                    Point3="-120.5,28.2176870748299" />
                  <mssgle:LineSegment
                    End="-120.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 6]"
          TopLeft="238.5,1177.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="264.25,83"
              Start="0,0"
              End="264.25,75.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.1953727506427" />
                  <mssgle:CubicBezierSegment
                    Point1="0,50.1953727506427"
                    Point2="0,54.1953727506427"
                    Point3="4,54.1953727506427" />
                  <mssgle:LineSegment
                    End="260.25,54.1953727506427" />
                  <mssgle:CubicBezierSegment
                    Point1="260.25,54.1953727506427"
                    Point2="264.25,54.1953727506427"
                    Point3="264.25,58.1953727506427" />
                  <mssgle:LineSegment
                    End="264.25,75.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="116.88365234375,59.1953727506427,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 7]"
          TopLeft="594.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 9]"
          TopLeft="444,869.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="88.5000000000001,391"
              Start="0,0"
              End="88.5000000000001,383.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,153.818594104308" />
                  <mssgle:CubicBezierSegment
                    Point1="0,153.818594104308"
                    Point2="0,157.818594104308"
                    Point3="4,157.818594104308" />
                  <mssgle:LineSegment
                    End="84.5000000000001,157.818594104308" />
                  <mssgle:CubicBezierSegment
                    Point1="84.5000000000001,157.818594104308"
                    Point2="88.5000000000001,157.818594104308"
                    Point3="88.5000000000001,161.818594104308" />
                  <mssgle:LineSegment
                    End="88.5000000000001,383.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="29.0086523437501,162.818594104308,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="Doing cleanup in incoming folder &#xA;and moving files to approprate directories&#xA;In the finall stage the proces moves all the files from starfish into the archive.&#xA;1. notes"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="434,88"
          Id="e9b3641c-18b3-458d-bf1a-8560bf2f4c66"
          TopLeft="656.5,1237.5" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package\Error Mail.EventHandlers[OnPreValidate]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="Package\Error Mail.EventHandlers[OnPreValidate]\Send Mail Task"
          TopLeft="NaN,NaN" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <TaskHost
    design-time-name="Package\Loop Trought All Appointment Files\Importing Notes to Stage">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph" xmlns:mssge="clr-namespace:Microsoft.SqlServer.Graph.Extended;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
        <NodeLayout
          Size="180,42"
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Set Script Parameters"
          TopLeft="342,107.5" />
        <NodeLayout
          Size="206,42"
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage\New Parse Error Columns"
          TopLeft="73.0000000000002,311.5" />
        <NodeLayout
          Size="151,42"
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row"
          TopLeft="356.5,5.49999999999977" />
        <NodeLayout
          Size="206,42"
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes"
          TopLeft="329,622" />
        <NodeLayout
          Size="283,42"
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Push errors to starfish_ETL_Parse_Errors"
          TopLeft="5.50000000000023,413.5" />
        <NodeLayout
          Size="133,42"
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Row Count"
          TopLeft="365.5,515.5" />
        <NodeLayout
          Size="165,42"
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SCR _HashValue"
          TopLeft="349.5,413.5" />
        <NodeLayout
          Size="207,42"
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage\SafeParse Flat File notes*"
          TopLeft="328.5,209.5" />
        <NodeLayout
          Size="185,42"
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Adding New Columns"
          TopLeft="339.5,311.5" />
        <EdgeLayout
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Derived Column Output1]"
          TopLeft="176,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-29,60"
              Start="0,0"
              End="-29,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26"
                    Point2="0,30"
                    Point3="-4,30" />
                  <mssgle:LineSegment
                    End="-25,30" />
                  <mssgle:CubicBezierSegment
                    Point1="-25,30"
                    Point2="-29,30"
                    Point3="-29,34" />
                  <mssgle:LineSegment
                    End="-29,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-35.06447265625,35,41.1289453125,9.55859375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Derived Column Output]"
          TopLeft="432,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60.0000000000001"
              Start="0,0"
              End="0,52.5000000000001">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5000000000001" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.10447265625,21.52685546875,30.2089453125,9.4462890625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Row Count Output 1]"
          TopLeft="432,557.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,64.5"
              Start="0,0"
              End="0,57">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,57" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-18.1494140625,23.71337890625,36.298828125,9.5732421875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Output 0]"
          TopLeft="432,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-18.1494140625,21.46337890625,36.298828125,9.5732421875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Output - Record Level Parse Errors]"
          TopLeft="398.833333333333,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-222.833333333333,60"
              Start="0,0"
              End="-222.833333333333,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.2761265580057" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.2761265580057"
                    Point2="0,24.2761265580057"
                    Point3="-4,24.2761265580057" />
                  <mssgle:LineSegment
                    End="-218.833333333333,24.2761265580057" />
                  <mssgle:CubicBezierSegment
                    Point1="-218.833333333333,24.2761265580057"
                    Point2="-222.833333333333,24.2761265580057"
                    Point3="-222.833333333333,28.2761265580057" />
                  <mssgle:LineSegment
                    End="-222.833333333333,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-188.921764322917,29.2761265580057,205.878515625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Output - File Data]"
          TopLeft="465.166666666667,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-33.1666666666666,60"
              Start="0,0"
              End="-33.1666666666666,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.2761265580058" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.2761265580058"
                    Point2="0,24.2761265580058"
                    Point3="-4,24.2761265580058" />
                  <mssgle:LineSegment
                    End="-29.1666666666666,24.2761265580058" />
                  <mssgle:CubicBezierSegment
                    Point1="-29.1666666666666,24.2761265580058"
                    Point2="-33.1666666666666,24.2761265580058"
                    Point3="-33.1666666666666,28.2761265580058" />
                  <mssgle:LineSegment
                    End="-33.1666666666666,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-56.6792122395833,29.2761265580058,126.038515625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[OLE DB Source Output]"
          TopLeft="432,47.4999999999998">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.10447265625,21.52685546875,30.2089453125,9.4462890625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loop Trought All Appointment Files\Importing Notes to Stage.Paths[Derived Column Output2]"
          TopLeft="432,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-18.1494140625,21.46337890625,36.298828125,9.5732421875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="Calculate checksum value for non-key fields"
          ParentId="Package\Loop Trought All Appointment Files\Importing Notes to Stage"
          Size="200,51"
          Id="aeec4707-3b91-489e-ae20-06059405bccc"
          TopLeft="596,617.5">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Color="#FF000000">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
        <AnnotationLayout
          Text="Add FileName and InsertDate"
          ParentId="Package\Loop Trought All Appointment Files\Importing Notes to Stage"
          Size="200,37"
          Id="01628568-1bbc-41c1-8450-8a37bcae095d"
          TopLeft="857,624.5">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Color="#FF000000">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
        <AnnotationLayout
          Text=" A dummy column is one which has a value of one &#xA;when a categorical event occurs and a zero when it doesn’t occur."
          ParentId="Package\Loop Trought All Appointment Files\Importing Notes to Stage"
          Size="350,51"
          Id="6a662e55-0e7c-4d59-a106-aa0fafa6e783"
          TopLeft="1118,617.5">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Color="#FF000000">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Loop Trought All Appointment Files\Importing Notes to Stage\Get Single Row">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Loop Trought All Appointment Files\Importing Notes to Stage\DB Insert into idr-sf_notes">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Updating Table appointments on IDR\Incrimental Update Notes Table">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph" xmlns:mssge="clr-namespace:Microsoft.SqlServer.Graph.Extended;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
        <NodeLayout
          Size="115,42"
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup"
          TopLeft="288,209.5" />
        <NodeLayout
          Size="169,42"
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\UPDATE etl-notes"
          TopLeft="30.0000000000001,515.5" />
        <NodeLayout
          Size="156,42"
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes"
          TopLeft="267.5,5.5" />
        <NodeLayout
          Size="200,42"
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes"
          TopLeft="5.50000000000003,311.5" />
        <NodeLayout
          Size="147,42"
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Rows Inserted"
          TopLeft="41,413.5" />
        <NodeLayout
          Size="164,42"
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\DC-UPDATE_DT"
          TopLeft="263.5,107.5" />
        <NodeLayout
          Size="159,42"
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Conditional Split"
          TopLeft="266,311.5" />
        <NodeLayout
          Size="193,42"
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Count Matched records"
          TopLeft="315,425.5" />
        <EdgeLayout
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[ExistinRecords]"
          TopLeft="320.333333333333,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-205.833333333333,60"
              Start="0,0"
              End="-205.833333333333,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.3586550435865" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.3586550435865"
                    Point2="0,24.3586550435865"
                    Point3="-4,24.3586550435865" />
                  <mssgle:LineSegment
                    End="-201.833333333333,24.3586550435865" />
                  <mssgle:CubicBezierSegment
                    Point1="-201.833333333333,24.3586550435865"
                    Point2="-205.833333333333,24.3586550435865"
                    Point3="-205.833333333333,28.3586550435865" />
                  <mssgle:LineSegment
                    End="-205.833333333333,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-129.574654947917,29.3586550435865,53.3159765625,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[Derived Column Output]"
          TopLeft="345.5,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[Row Count Output 1]"
          TopLeft="114.5,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[OLE DB Source Output]"
          TopLeft="345.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[MatchedHash]"
          TopLeft="370.666666666667,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="40.8333333333334,72"
              Start="0,0"
              End="40.8333333333334,64.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,25.2303860523039" />
                  <mssgle:CubicBezierSegment
                    Point1="0,25.2303860523039"
                    Point2="0,29.2303860523039"
                    Point3="4,29.2303860523039" />
                  <mssgle:LineSegment
                    End="36.8333333333334,29.2303860523039" />
                  <mssgle:CubicBezierSegment
                    Point1="36.8333333333334,29.2303860523039"
                    Point2="40.8333333333334,29.2303860523039"
                    Point3="40.8333333333334,33.2303860523039" />
                  <mssgle:LineSegment
                    End="40.8333333333334,64.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-9.56026692708329,34.2303860523039,59.9538671875,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[Lookup No Match Output]"
          TopLeft="327.666666666667,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-222.166666666667,60"
              Start="0,0"
              End="-222.166666666667,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.4939965694683" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.4939965694683"
                    Point2="0,24.4939965694683"
                    Point3="-4,24.4939965694683" />
                  <mssgle:LineSegment
                    End="-218.166666666667,24.4939965694683" />
                  <mssgle:CubicBezierSegment
                    Point1="-218.166666666667,24.4939965694683"
                    Point2="-222.166666666667,24.4939965694683"
                    Point3="-222.166666666667,28.4939965694683" />
                  <mssgle:LineSegment
                    End="-222.166666666667,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-166.889720052083,29.4939965694683,111.6127734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Updating Table appointments on IDR\Incrimental Update Notes Table.Paths[Lookup Match Output]"
          TopLeft="363.333333333333,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-17.8333333333333,60"
              Start="0,0"
              End="-17.8333333333333,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.4939965694683" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.4939965694683"
                    Point2="0,24.4939965694683"
                    Point3="-4,24.4939965694683" />
                  <mssgle:LineSegment
                    End="-13.8333333333333,24.4939965694683" />
                  <mssgle:CubicBezierSegment
                    Point1="-13.8333333333333,24.4939965694683"
                    Point2="-17.8333333333333,24.4939965694683"
                    Point3="-17.8333333333333,28.4939965694683" />
                  <mssgle:LineSegment
                    End="-17.8333333333333,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-57.1080533854167,29.4939965694683,96.3827734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="Adding new field"
          ParentId="Package\Updating Table appointments on IDR\Incrimental Update Notes Table"
          Size="110,NaN"
          Id="083cb5d5-fbfb-418e-9254-5495f4712044"
          TopLeft="464,112">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Color="#FF000000">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Lookup">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string"></Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\Source sf-notes">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Updating Table appointments on IDR\Incrimental Update Notes Table\SQL Insert starfish-notes">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>